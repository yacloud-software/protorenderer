syntax = "proto3";

package protorenderer2;
option go_package = "golang.conradwood.net/apis/protorenderer2";
option java_package = "net.conradwood.golang.apis.protorenderer2";
import "golang.conradwood.net/apis/protorenderer/protorenderer.proto";
import "golang.conradwood.net/apis/common/common.proto";
import "golang.conradwood.net/apis/h2gproxy/h2gproxy.proto";
import "google/protobuf/descriptor.proto";

// information parsed out of a .proto file, enriched with references to database IDs, created by meta
message ProtoFileInfo {
  DBProtoFile ProtoFile=1; // which file this was parsed from
  repeated DBProtoFile Imports=2; // which files this file imports
  map<string,string> CNWOptions=3;
  repeated ProtoMessageInfo Messages=4;
}

message ProtoMessageInfo {
  SQLMessage Message=1;
  string Comment=2; // this message's comment
  repeated ProtoFieldInfo Fields=3; 
}

enum FieldModifier {
  FM_UNDEFINED=0;
  SINGLE=1;
  MAP=2;
  ARRAY=3;    
}
enum FieldType {
  ft_UNDEFINED=0;
  PRIMITIVE=1; // built-ins, e.g. "string" or "bool"
  OBJECT=2; // if referring to another protobuf message
}

enum ProtoFieldPrimitive {
  PFT_UNDEFINED=0;
  STRING=1;
  UINT64=2;
  UINT32=3;
  BYTES=4;
  BOOL=5;
  INT32=6;
  ENUM=7;
  DOUBLE=8;
  FLOAT=9;
  INT64=10;
  SINT32=11;
  SINT64=12;
}

message ProtoFieldInfo {
  string Name=1;
  string Comment=2;
  FieldModifier Modifier=3; // is it single element, array or map?
  FieldType Type1=4; // valid for single, map and array
  FieldType Type2=5; // valid for map only (map<Type1,Type2>)
  ProtoFieldPrimitive PrimitiveType1=6; // if type1 is primitive, then this is the type
  ProtoFieldPrimitive PrimitiveType2=7; // if type2 is primitive, then this is the type
  uint64 ObjectID1=8; // if type1 is object, this is the ID of the protobuf message it is referring to
  uint64 ObjectID2=9; // if type2 is object, this is the ID of the protobuf message it is referring to
  ProtoFieldInfoText TextualRepresentation=10; // textual representation of the information in this proto
}
message ProtoFieldInfoText {
  string ModifierString=1; // textual representation of field with same name
  string Type1String=2; // textual representation of field with same name
  string Type2String=3; // textual representation of field with same name
  string PrimitiveType1String=4; // textual representation of field with same name
  string PrimitiveType2String=5; // textual representation of field with same name
  string ObjectID1String=6; // textual representation of field with same name
  string ObjectID2String=7; // textual representation of field with same name
}

// keeping a file in database with metadata
message DBProtoFile {
  uint64 ID=1;
  string Name=2; //  e.g. "golang.conradwood.net/apis/protorenderer/protorenderer.proto" 
  uint64 RepositoryID=3; // a repo id, if submitted
  string Package=4; // the string provided by the "package" option
}

message SQLMessage {
  uint64 ID=1;
  DBProtoFile ProtoFile=2 [(common.sql_type)="uint64",(common.sql_reference)="dbprotofile.id"];
  string Name=3;
}
message ProtocRequest {
  string MetaCompilerID = 1;
  repeated google.protobuf.FileDescriptorProto ProtoFiles = 2;
}

message FileTransfer {
  string Filename=1;
  bytes Data=2;
  bool TransferComplete=3;
  uint32 RepositoryID=4; // if we are submitting a filename, then this is the repository ID where the file comes from (if any)
  FileResult Result=5; // send by server as response to a compile
}

message FileResult {
  //  bool Failed=1; // if at least one compiler failed, this is set
  string Filename=2;
  repeated CompileResult CompileResults=3;
}
message CompileResult {
  string CompilerName=1;
  bool Success=2;
  string ErrorMessage=3;
  bytes Output=4; // compiler output
}
message VersionInfo {
  repeated VersionFile Files=1;
  uint32 Created=2;
}
message VersionFile {
  string Filename=1;
  FileResult FileResult=2;
}
service ProtoRenderer2 {
  // protoc-gen-meta2 submits files to protorenderer server for analysis. not intented to be used by clients other than protoc-gen-meta2
  rpc InternalMetaSubmit(ProtocRequest) returns (common.Void);
  // compile
  rpc Compile(stream FileTransfer) returns (stream FileTransfer);
  // add or update a ".proto" file in the renderers database
  rpc UpdateProto(protorenderer.AddProtoRequest) returns (protorenderer.AddProtoResponse);
}
