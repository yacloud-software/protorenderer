syntax = "proto3";

package protorenderer2;
option go_package = "golang.conradwood.net/apis/protorenderer2";
option java_package = "net.conradwood.golang.apis.protorenderer2";
import "golang.conradwood.net/apis/protorenderer/protorenderer.proto";
import "golang.conradwood.net/apis/common/common.proto";
import "golang.conradwood.net/apis/h2gproxy/h2gproxy.proto";
import "google/protobuf/descriptor.proto";

  // keeping a file in database with metadata
message DBProtoFile {
  uint64 ID=1;
  string Name=2; //  e.g. "golang.conradwood.net/apis/protorenderer/protorenderer.proto" 
  uint64 RepositoryID=3; // a repo id, if submitted
  string Package=4; // the string provided by the "package" option
}

message SQLMessage {
  uint64 ID=1;
  DBProtoFile ProtoFile=2 [(common.sql_type)="uint64",(common.sql_reference)="dbprotofile.id"];
  string Name=3;
}
message ProtocRequest {
  string MetaCompilerID = 1;
  repeated google.protobuf.FileDescriptorProto ProtoFiles = 2;
}

message FileTransfer {
  string Filename=1;
  bytes Data=2;
  bool TransferComplete=3;
  uint32 RepositoryID=4; // if we are submitting a filename, then this is the repository ID where the file comes from (if any)
  FileResult Result=5; // send by server as response to a compile
}

message FileResult {
  bool Failed=1; // if at least one compiler failed, this is set
  string Filename=2;
  repeated CompileFailure Failures=3;
}
message CompileFailure {
  string CompilerName=1;
  string ErrorMessage=2;
  bytes Output=3; // compiler output
}

service ProtoRenderer2 {
  // protoc-gen-meta2 submits files to protorenderer server for analysis. not intented to be used by clients other than protoc-gen-meta2
  rpc InternalMetaSubmit(ProtocRequest) returns (common.Void);
  // compile
  rpc Compile(stream FileTransfer) returns (stream FileTransfer);
  // add or update a ".proto" file in the renderers database
  rpc UpdateProto(protorenderer.AddProtoRequest) returns (protorenderer.AddProtoResponse);
}
