// Code generated by protoc-gen-go.
// source: extra/compilers/original/nanopb/proto/nanopb.proto
// DO NOT EDIT!

/*
Package nanopb is a generated protocol buffer package.

It is generated from these files:
	extra/compilers/original/nanopb/proto/nanopb.proto

It has these top-level messages:
	NanoPBOptions
*/
package nanopb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FieldType int32

const (
	FieldType_FT_DEFAULT  FieldType = 0
	FieldType_FT_CALLBACK FieldType = 1
	FieldType_FT_POINTER  FieldType = 4
	FieldType_FT_STATIC   FieldType = 2
	FieldType_FT_IGNORE   FieldType = 3
	FieldType_FT_INLINE   FieldType = 5
)

var FieldType_name = map[int32]string{
	0: "FT_DEFAULT",
	1: "FT_CALLBACK",
	4: "FT_POINTER",
	2: "FT_STATIC",
	3: "FT_IGNORE",
	5: "FT_INLINE",
}
var FieldType_value = map[string]int32{
	"FT_DEFAULT":  0,
	"FT_CALLBACK": 1,
	"FT_POINTER":  4,
	"FT_STATIC":   2,
	"FT_IGNORE":   3,
	"FT_INLINE":   5,
}

func (x FieldType) Enum() *FieldType {
	p := new(FieldType)
	*p = x
	return p
}
func (x FieldType) String() string {
	return proto.EnumName(FieldType_name, int32(x))
}
func (x *FieldType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FieldType_value, data, "FieldType")
	if err != nil {
		return err
	}
	*x = FieldType(value)
	return nil
}
func (FieldType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type IntSize int32

const (
	IntSize_IS_DEFAULT IntSize = 0
	IntSize_IS_8       IntSize = 8
	IntSize_IS_16      IntSize = 16
	IntSize_IS_32      IntSize = 32
	IntSize_IS_64      IntSize = 64
)

var IntSize_name = map[int32]string{
	0:  "IS_DEFAULT",
	8:  "IS_8",
	16: "IS_16",
	32: "IS_32",
	64: "IS_64",
}
var IntSize_value = map[string]int32{
	"IS_DEFAULT": 0,
	"IS_8":       8,
	"IS_16":      16,
	"IS_32":      32,
	"IS_64":      64,
}

func (x IntSize) Enum() *IntSize {
	p := new(IntSize)
	*p = x
	return p
}
func (x IntSize) String() string {
	return proto.EnumName(IntSize_name, int32(x))
}
func (x *IntSize) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IntSize_value, data, "IntSize")
	if err != nil {
		return err
	}
	*x = IntSize(value)
	return nil
}
func (IntSize) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type TypenameMangling int32

const (
	TypenameMangling_M_NONE             TypenameMangling = 0
	TypenameMangling_M_STRIP_PACKAGE    TypenameMangling = 1
	TypenameMangling_M_FLATTEN          TypenameMangling = 2
	TypenameMangling_M_PACKAGE_INITIALS TypenameMangling = 3
)

var TypenameMangling_name = map[int32]string{
	0: "M_NONE",
	1: "M_STRIP_PACKAGE",
	2: "M_FLATTEN",
	3: "M_PACKAGE_INITIALS",
}
var TypenameMangling_value = map[string]int32{
	"M_NONE":             0,
	"M_STRIP_PACKAGE":    1,
	"M_FLATTEN":          2,
	"M_PACKAGE_INITIALS": 3,
}

func (x TypenameMangling) Enum() *TypenameMangling {
	p := new(TypenameMangling)
	*p = x
	return p
}
func (x TypenameMangling) String() string {
	return proto.EnumName(TypenameMangling_name, int32(x))
}
func (x *TypenameMangling) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TypenameMangling_value, data, "TypenameMangling")
	if err != nil {
		return err
	}
	*x = TypenameMangling(value)
	return nil
}
func (TypenameMangling) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type DescriptorSize int32

const (
	DescriptorSize_DS_AUTO DescriptorSize = 0
	DescriptorSize_DS_1    DescriptorSize = 1
	DescriptorSize_DS_2    DescriptorSize = 2
	DescriptorSize_DS_4    DescriptorSize = 4
	DescriptorSize_DS_8    DescriptorSize = 8
)

var DescriptorSize_name = map[int32]string{
	0: "DS_AUTO",
	1: "DS_1",
	2: "DS_2",
	4: "DS_4",
	8: "DS_8",
}
var DescriptorSize_value = map[string]int32{
	"DS_AUTO": 0,
	"DS_1":    1,
	"DS_2":    2,
	"DS_4":    4,
	"DS_8":    8,
}

func (x DescriptorSize) Enum() *DescriptorSize {
	p := new(DescriptorSize)
	*p = x
	return p
}
func (x DescriptorSize) String() string {
	return proto.EnumName(DescriptorSize_name, int32(x))
}
func (x *DescriptorSize) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DescriptorSize_value, data, "DescriptorSize")
	if err != nil {
		return err
	}
	*x = DescriptorSize(value)
	return nil
}
func (DescriptorSize) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// This is the inner options message, which basically defines options for
// a field. When it is used in message or file scope, it applies to all
// fields.
type NanoPBOptions struct {
	// Allocated size for 'bytes' and 'string' fields.
	// For string fields, this should include the space for null terminator.
	MaxSize *int32 `protobuf:"varint,1,opt,name=max_size,json=maxSize" json:"max_size,omitempty"`
	// Maximum length for 'string' fields. Setting this is equivalent
	// to setting max_size to a value of length+1.
	MaxLength *int32 `protobuf:"varint,14,opt,name=max_length,json=maxLength" json:"max_length,omitempty"`
	// Allocated number of entries in arrays ('repeated' fields)
	MaxCount *int32 `protobuf:"varint,2,opt,name=max_count,json=maxCount" json:"max_count,omitempty"`
	// Size of integer fields. Can save some memory if you don't need
	// full 32 bits for the value.
	IntSize *IntSize `protobuf:"varint,7,opt,name=int_size,json=intSize,enum=IntSize,def=0" json:"int_size,omitempty"`
	// Force type of field (callback or static allocation)
	Type *FieldType `protobuf:"varint,3,opt,name=type,enum=FieldType,def=0" json:"type,omitempty"`
	// Use long names for enums, i.e. EnumName_EnumValue.
	LongNames *bool `protobuf:"varint,4,opt,name=long_names,json=longNames,def=1" json:"long_names,omitempty"`
	// Add 'packed' attribute to generated structs.
	// Note: this cannot be used on CPUs that break on unaligned
	// accesses to variables.
	PackedStruct *bool `protobuf:"varint,5,opt,name=packed_struct,json=packedStruct,def=0" json:"packed_struct,omitempty"`
	// Add 'packed' attribute to generated enums.
	PackedEnum *bool `protobuf:"varint,10,opt,name=packed_enum,json=packedEnum,def=0" json:"packed_enum,omitempty"`
	// Skip this message
	SkipMessage *bool `protobuf:"varint,6,opt,name=skip_message,json=skipMessage,def=0" json:"skip_message,omitempty"`
	// Generate oneof fields as normal optional fields instead of union.
	NoUnions *bool `protobuf:"varint,8,opt,name=no_unions,json=noUnions,def=0" json:"no_unions,omitempty"`
	// integer type tag for a message
	Msgid *uint32 `protobuf:"varint,9,opt,name=msgid" json:"msgid,omitempty"`
	// decode oneof as anonymous union
	AnonymousOneof *bool `protobuf:"varint,11,opt,name=anonymous_oneof,json=anonymousOneof,def=0" json:"anonymous_oneof,omitempty"`
	// Proto3 singular field does not generate a "has_" flag
	Proto3 *bool `protobuf:"varint,12,opt,name=proto3,def=0" json:"proto3,omitempty"`
	// Force proto3 messages to have no "has_" flag.
	// This was default behavior until nanopb-0.4.0.
	Proto3SingularMsgs *bool `protobuf:"varint,21,opt,name=proto3_singular_msgs,json=proto3SingularMsgs,def=0" json:"proto3_singular_msgs,omitempty"`
	// Generate an enum->string mapping function (can take up lots of space).
	EnumToString *bool `protobuf:"varint,13,opt,name=enum_to_string,json=enumToString,def=0" json:"enum_to_string,omitempty"`
	// Generate bytes arrays with fixed length
	FixedLength *bool `protobuf:"varint,15,opt,name=fixed_length,json=fixedLength,def=0" json:"fixed_length,omitempty"`
	// Generate repeated field with fixed count
	FixedCount *bool `protobuf:"varint,16,opt,name=fixed_count,json=fixedCount,def=0" json:"fixed_count,omitempty"`
	// Generate message-level callback that is called before decoding submessages.
	// This can be used to set callback fields for submsgs inside oneofs.
	SubmsgCallback *bool `protobuf:"varint,22,opt,name=submsg_callback,json=submsgCallback,def=0" json:"submsg_callback,omitempty"`
	// Shorten or remove package names from type names.
	// This option applies only on the file level.
	MangleNames *TypenameMangling `protobuf:"varint,17,opt,name=mangle_names,json=mangleNames,enum=TypenameMangling,def=0" json:"mangle_names,omitempty"`
	// Data type for storage associated with callback fields.
	CallbackDatatype *string `protobuf:"bytes,18,opt,name=callback_datatype,json=callbackDatatype,def=pb_callback_t" json:"callback_datatype,omitempty"`
	// Callback function used for encoding and decoding.
	// Prior to nanopb-0.4.0, the callback was specified in per-field pb_callback_t
	// structure. This is still supported, but does not work inside e.g. oneof or pointer
	// fields. Instead, a new method allows specifying a per-message callback that
	// will be called for all callback fields in a message type.
	CallbackFunction *string `protobuf:"bytes,19,opt,name=callback_function,json=callbackFunction,def=pb_default_field_callback" json:"callback_function,omitempty"`
	// Select the size of field descriptors. This option has to be defined
	// for the whole message, not per-field. Usually automatic selection is
	// ok, but if it results in compilation errors you can increase the field
	// size here.
	Descriptorsize *DescriptorSize `protobuf:"varint,20,opt,name=descriptorsize,enum=DescriptorSize,def=0" json:"descriptorsize,omitempty"`
	// Set default value for has_ fields.
	DefaultHas *bool `protobuf:"varint,23,opt,name=default_has,json=defaultHas,def=0" json:"default_has,omitempty"`
	// Extra files to include in generated `.pb.h`
	Include []string `protobuf:"bytes,24,rep,name=include" json:"include,omitempty"`
	// Automatic includes to exclude from generated `.pb.h`
	// Same as nanopb_generator.py command line flag -x.
	Exclude []string `protobuf:"bytes,26,rep,name=exclude" json:"exclude,omitempty"`
	// Package name that applies only for nanopb.
	Package *string `protobuf:"bytes,25,opt,name=package" json:"package,omitempty"`
	// Override type of the field in generated C code. Only to be used with related field types
	TypeOverride *google_protobuf.FieldDescriptorProto_Type `protobuf:"varint,27,opt,name=type_override,json=typeOverride,enum=google.protobuf.FieldDescriptorProto_Type" json:"type_override,omitempty"`
	// Due to historical reasons, nanopb orders fields in structs by their tag number
	// instead of the order in .proto. Set this to false to keep the .proto order.
	// The default value will probably change to false in nanopb-0.5.0.
	SortByTag *bool `protobuf:"varint,28,opt,name=sort_by_tag,json=sortByTag,def=1" json:"sort_by_tag,omitempty"`
	// this affects the FT_DEFAULT (the default) field conversion strategy. A field
	// that can become a static member of a c struct (e.g. int, bool, etc) will be a
	// a static field. Fields with dynamic length are converted, to either a pointer or a callback.
	// this defines wether it becomes a pointer or a callback.
	FallbackType     *FieldType `protobuf:"varint,29,opt,name=fallback_type,json=fallbackType,enum=FieldType,def=1" json:"fallback_type,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *NanoPBOptions) Reset()                    { *m = NanoPBOptions{} }
func (m *NanoPBOptions) String() string            { return proto.CompactTextString(m) }
func (*NanoPBOptions) ProtoMessage()               {}
func (*NanoPBOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

const Default_NanoPBOptions_IntSize IntSize = IntSize_IS_DEFAULT
const Default_NanoPBOptions_Type FieldType = FieldType_FT_DEFAULT
const Default_NanoPBOptions_LongNames bool = true
const Default_NanoPBOptions_PackedStruct bool = false
const Default_NanoPBOptions_PackedEnum bool = false
const Default_NanoPBOptions_SkipMessage bool = false
const Default_NanoPBOptions_NoUnions bool = false
const Default_NanoPBOptions_AnonymousOneof bool = false
const Default_NanoPBOptions_Proto3 bool = false
const Default_NanoPBOptions_Proto3SingularMsgs bool = false
const Default_NanoPBOptions_EnumToString bool = false
const Default_NanoPBOptions_FixedLength bool = false
const Default_NanoPBOptions_FixedCount bool = false
const Default_NanoPBOptions_SubmsgCallback bool = false
const Default_NanoPBOptions_MangleNames TypenameMangling = TypenameMangling_M_NONE
const Default_NanoPBOptions_CallbackDatatype string = "pb_callback_t"
const Default_NanoPBOptions_CallbackFunction string = "pb_default_field_callback"
const Default_NanoPBOptions_Descriptorsize DescriptorSize = DescriptorSize_DS_AUTO
const Default_NanoPBOptions_DefaultHas bool = false
const Default_NanoPBOptions_SortByTag bool = true
const Default_NanoPBOptions_FallbackType FieldType = FieldType_FT_CALLBACK

func (m *NanoPBOptions) GetMaxSize() int32 {
	if m != nil && m.MaxSize != nil {
		return *m.MaxSize
	}
	return 0
}

func (m *NanoPBOptions) GetMaxLength() int32 {
	if m != nil && m.MaxLength != nil {
		return *m.MaxLength
	}
	return 0
}

func (m *NanoPBOptions) GetMaxCount() int32 {
	if m != nil && m.MaxCount != nil {
		return *m.MaxCount
	}
	return 0
}

func (m *NanoPBOptions) GetIntSize() IntSize {
	if m != nil && m.IntSize != nil {
		return *m.IntSize
	}
	return Default_NanoPBOptions_IntSize
}

func (m *NanoPBOptions) GetType() FieldType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_NanoPBOptions_Type
}

func (m *NanoPBOptions) GetLongNames() bool {
	if m != nil && m.LongNames != nil {
		return *m.LongNames
	}
	return Default_NanoPBOptions_LongNames
}

func (m *NanoPBOptions) GetPackedStruct() bool {
	if m != nil && m.PackedStruct != nil {
		return *m.PackedStruct
	}
	return Default_NanoPBOptions_PackedStruct
}

func (m *NanoPBOptions) GetPackedEnum() bool {
	if m != nil && m.PackedEnum != nil {
		return *m.PackedEnum
	}
	return Default_NanoPBOptions_PackedEnum
}

func (m *NanoPBOptions) GetSkipMessage() bool {
	if m != nil && m.SkipMessage != nil {
		return *m.SkipMessage
	}
	return Default_NanoPBOptions_SkipMessage
}

func (m *NanoPBOptions) GetNoUnions() bool {
	if m != nil && m.NoUnions != nil {
		return *m.NoUnions
	}
	return Default_NanoPBOptions_NoUnions
}

func (m *NanoPBOptions) GetMsgid() uint32 {
	if m != nil && m.Msgid != nil {
		return *m.Msgid
	}
	return 0
}

func (m *NanoPBOptions) GetAnonymousOneof() bool {
	if m != nil && m.AnonymousOneof != nil {
		return *m.AnonymousOneof
	}
	return Default_NanoPBOptions_AnonymousOneof
}

func (m *NanoPBOptions) GetProto3() bool {
	if m != nil && m.Proto3 != nil {
		return *m.Proto3
	}
	return Default_NanoPBOptions_Proto3
}

func (m *NanoPBOptions) GetProto3SingularMsgs() bool {
	if m != nil && m.Proto3SingularMsgs != nil {
		return *m.Proto3SingularMsgs
	}
	return Default_NanoPBOptions_Proto3SingularMsgs
}

func (m *NanoPBOptions) GetEnumToString() bool {
	if m != nil && m.EnumToString != nil {
		return *m.EnumToString
	}
	return Default_NanoPBOptions_EnumToString
}

func (m *NanoPBOptions) GetFixedLength() bool {
	if m != nil && m.FixedLength != nil {
		return *m.FixedLength
	}
	return Default_NanoPBOptions_FixedLength
}

func (m *NanoPBOptions) GetFixedCount() bool {
	if m != nil && m.FixedCount != nil {
		return *m.FixedCount
	}
	return Default_NanoPBOptions_FixedCount
}

func (m *NanoPBOptions) GetSubmsgCallback() bool {
	if m != nil && m.SubmsgCallback != nil {
		return *m.SubmsgCallback
	}
	return Default_NanoPBOptions_SubmsgCallback
}

func (m *NanoPBOptions) GetMangleNames() TypenameMangling {
	if m != nil && m.MangleNames != nil {
		return *m.MangleNames
	}
	return Default_NanoPBOptions_MangleNames
}

func (m *NanoPBOptions) GetCallbackDatatype() string {
	if m != nil && m.CallbackDatatype != nil {
		return *m.CallbackDatatype
	}
	return Default_NanoPBOptions_CallbackDatatype
}

func (m *NanoPBOptions) GetCallbackFunction() string {
	if m != nil && m.CallbackFunction != nil {
		return *m.CallbackFunction
	}
	return Default_NanoPBOptions_CallbackFunction
}

func (m *NanoPBOptions) GetDescriptorsize() DescriptorSize {
	if m != nil && m.Descriptorsize != nil {
		return *m.Descriptorsize
	}
	return Default_NanoPBOptions_Descriptorsize
}

func (m *NanoPBOptions) GetDefaultHas() bool {
	if m != nil && m.DefaultHas != nil {
		return *m.DefaultHas
	}
	return Default_NanoPBOptions_DefaultHas
}

func (m *NanoPBOptions) GetInclude() []string {
	if m != nil {
		return m.Include
	}
	return nil
}

func (m *NanoPBOptions) GetExclude() []string {
	if m != nil {
		return m.Exclude
	}
	return nil
}

func (m *NanoPBOptions) GetPackage() string {
	if m != nil && m.Package != nil {
		return *m.Package
	}
	return ""
}

func (m *NanoPBOptions) GetTypeOverride() google_protobuf.FieldDescriptorProto_Type {
	if m != nil && m.TypeOverride != nil {
		return *m.TypeOverride
	}
	return google_protobuf.FieldDescriptorProto_TYPE_DOUBLE
}

func (m *NanoPBOptions) GetSortByTag() bool {
	if m != nil && m.SortByTag != nil {
		return *m.SortByTag
	}
	return Default_NanoPBOptions_SortByTag
}

func (m *NanoPBOptions) GetFallbackType() FieldType {
	if m != nil && m.FallbackType != nil {
		return *m.FallbackType
	}
	return Default_NanoPBOptions_FallbackType
}

var E_NanopbFileopt = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FileOptions)(nil),
	ExtensionType: (*NanoPBOptions)(nil),
	Field:         1010,
	Name:          "nanopb_fileopt",
	Tag:           "bytes,1010,opt,name=nanopb_fileopt,json=nanopbFileopt",
	Filename:      "extra/compilers/original/nanopb/proto/nanopb.proto",
}

var E_NanopbMsgopt = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*NanoPBOptions)(nil),
	Field:         1010,
	Name:          "nanopb_msgopt",
	Tag:           "bytes,1010,opt,name=nanopb_msgopt,json=nanopbMsgopt",
	Filename:      "extra/compilers/original/nanopb/proto/nanopb.proto",
}

var E_NanopbEnumopt = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.EnumOptions)(nil),
	ExtensionType: (*NanoPBOptions)(nil),
	Field:         1010,
	Name:          "nanopb_enumopt",
	Tag:           "bytes,1010,opt,name=nanopb_enumopt,json=nanopbEnumopt",
	Filename:      "extra/compilers/original/nanopb/proto/nanopb.proto",
}

var E_Nanopb = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*NanoPBOptions)(nil),
	Field:         1010,
	Name:          "nanopb",
	Tag:           "bytes,1010,opt,name=nanopb",
	Filename:      "extra/compilers/original/nanopb/proto/nanopb.proto",
}

func init() {
	proto.RegisterType((*NanoPBOptions)(nil), "NanoPBOptions")
	proto.RegisterEnum("FieldType", FieldType_name, FieldType_value)
	proto.RegisterEnum("IntSize", IntSize_name, IntSize_value)
	proto.RegisterEnum("TypenameMangling", TypenameMangling_name, TypenameMangling_value)
	proto.RegisterEnum("DescriptorSize", DescriptorSize_name, DescriptorSize_value)
	proto.RegisterExtension(E_NanopbFileopt)
	proto.RegisterExtension(E_NanopbMsgopt)
	proto.RegisterExtension(E_NanopbEnumopt)
	proto.RegisterExtension(E_Nanopb)
}

func init() { proto.RegisterFile("extra/compilers/original/nanopb/proto/nanopb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1052 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x55, 0x5b, 0x8f, 0xdb, 0x36,
	0x13, 0x8d, 0x77, 0xed, 0xb5, 0x3d, 0xbe, 0x29, 0x4c, 0xbe, 0x7c, 0xcc, 0x65, 0x51, 0x23, 0x2d,
	0x02, 0xc3, 0x05, 0x64, 0x64, 0x13, 0xa4, 0x81, 0x91, 0x87, 0x78, 0x7d, 0x49, 0x85, 0xf8, 0xb2,
	0x90, 0xb4, 0x2f, 0x7d, 0x21, 0x68, 0x9b, 0x56, 0xd4, 0x95, 0x48, 0x41, 0x97, 0xc2, 0x9b, 0x1f,
	0xd0, 0x1f, 0xdc, 0x5f, 0x50, 0x50, 0xa4, 0xbd, 0x76, 0xb2, 0x40, 0xfa, 0xc6, 0x99, 0x73, 0x78,
	0x44, 0x0d, 0xcf, 0x0c, 0xe1, 0x82, 0x6d, 0xd3, 0x98, 0xf6, 0x56, 0x22, 0x8c, 0xfc, 0x80, 0xc5,
	0x49, 0x4f, 0xc4, 0xbe, 0xe7, 0x73, 0x1a, 0xf4, 0x38, 0xe5, 0x22, 0x5a, 0xf6, 0xa2, 0x58, 0xa4,
	0x42, 0x07, 0x66, 0x1e, 0x3c, 0x6b, 0x7b, 0x42, 0x78, 0x01, 0x53, 0xd0, 0x32, 0xdb, 0xf4, 0xd6,
	0x2c, 0x59, 0xc5, 0x7e, 0x94, 0x8a, 0x58, 0x31, 0x5e, 0xfe, 0x0d, 0xd0, 0x98, 0x53, 0x2e, 0xae,
	0x2e, 0x17, 0x51, 0xea, 0x0b, 0x9e, 0xa0, 0xa7, 0x50, 0x09, 0xe9, 0x96, 0x24, 0xfe, 0x57, 0x86,
	0x0b, 0xed, 0x42, 0xa7, 0x64, 0x97, 0x43, 0xba, 0x75, 0xfc, 0xaf, 0x0c, 0x9d, 0x03, 0x48, 0x28,
	0x60, 0xdc, 0x4b, 0xbf, 0xe0, 0x66, 0x0e, 0x56, 0x43, 0xba, 0x9d, 0xe6, 0x09, 0xf4, 0x1c, 0x64,
	0x40, 0x56, 0x22, 0xe3, 0x29, 0x3e, 0xc9, 0x51, 0x29, 0x35, 0x94, 0x31, 0xea, 0x41, 0xc5, 0xe7,
	0xa9, 0x92, 0x2d, 0xb7, 0x0b, 0x9d, 0xe6, 0x45, 0xc5, 0xb4, 0x78, 0x2a, 0x75, 0xfb, 0x60, 0x39,
	0x64, 0x34, 0x9e, 0x0c, 0xae, 0xa7, 0xae, 0x5d, 0xf6, 0x55, 0x12, 0x75, 0xa1, 0x98, 0xde, 0x46,
	0x0c, 0x9f, 0xe6, 0x64, 0x30, 0x27, 0x3e, 0x0b, 0xd6, 0xee, 0x6d, 0xc4, 0xfa, 0x30, 0x71, 0xf7,
	0xf4, 0x9c, 0x83, 0x7e, 0x06, 0x08, 0x04, 0xf7, 0x08, 0xa7, 0x21, 0x4b, 0x70, 0xb1, 0x5d, 0xe8,
	0x54, 0xfa, 0xc5, 0x34, 0xce, 0x98, 0x5d, 0x95, 0xf9, 0xb9, 0x4c, 0xa3, 0x2e, 0x34, 0x22, 0xba,
	0xba, 0x61, 0x6b, 0x92, 0xa4, 0x71, 0xb6, 0x4a, 0x71, 0x29, 0xe7, 0x95, 0x36, 0x34, 0x48, 0x98,
	0x5d, 0x57, 0x98, 0x93, 0x43, 0xe8, 0x15, 0xd4, 0x34, 0x97, 0xf1, 0x2c, 0xc4, 0x70, 0xc8, 0x04,
	0x85, 0x8c, 0x79, 0x16, 0xa2, 0x0e, 0xd4, 0x93, 0x1b, 0x3f, 0x22, 0x21, 0x4b, 0x12, 0xea, 0x31,
	0x7c, 0x76, 0x48, 0xac, 0x49, 0x68, 0xa6, 0x10, 0xf4, 0x12, 0xaa, 0x5c, 0x90, 0x8c, 0xcb, 0x1a,
	0xe3, 0xca, 0x21, 0xad, 0xc2, 0xc5, 0x75, 0x9e, 0x46, 0x8f, 0xa1, 0x14, 0x26, 0x9e, 0xbf, 0xc6,
	0xd5, 0x76, 0xa1, 0xd3, 0xb0, 0x55, 0x80, 0x4c, 0x68, 0x51, 0x2e, 0xf8, 0x6d, 0x28, 0xb2, 0x84,
	0x08, 0xce, 0xc4, 0x06, 0xd7, 0x0e, 0xf7, 0x37, 0xf7, 0xe8, 0x42, 0x82, 0xe8, 0x1c, 0xce, 0xf2,
	0xbb, 0x7d, 0x83, 0xeb, 0x87, 0x34, 0x9d, 0x44, 0xbf, 0xc1, 0x63, 0xb5, 0x22, 0x89, 0xcf, 0xbd,
	0x2c, 0xa0, 0x31, 0x09, 0x13, 0x2f, 0xc1, 0xff, 0x3b, 0x24, 0x23, 0x45, 0x71, 0x34, 0x63, 0x96,
	0x78, 0x09, 0xfa, 0x15, 0x9a, 0xb2, 0x18, 0x24, 0x15, 0xb2, 0x80, 0x3e, 0xf7, 0x70, 0xe3, 0xa8,
	0x80, 0x12, 0x74, 0x85, 0x93, 0x43, 0xb2, 0x30, 0x1b, 0x7f, 0xcb, 0xd6, 0x3b, 0xb3, 0xb4, 0x8e,
	0x0a, 0x93, 0x43, 0xda, 0x35, 0xaf, 0x40, 0x85, 0xda, 0x37, 0xc6, 0x51, 0xa9, 0x73, 0x44, 0x19,
	0xc8, 0x84, 0x56, 0x92, 0x2d, 0xc3, 0xc4, 0x23, 0x2b, 0x1a, 0x04, 0x4b, 0xba, 0xba, 0xc1, 0x4f,
	0x8e, 0xca, 0xa0, 0xd0, 0xa1, 0x06, 0xd1, 0x07, 0xa8, 0x87, 0x94, 0x7b, 0x01, 0xd3, 0xae, 0x78,
	0x98, 0xfb, 0xe8, 0xa1, 0x29, 0x2d, 0x24, 0x33, 0x33, 0x09, 0xfa, 0xdc, 0xeb, 0x9f, 0xcd, 0xc8,
	0x7c, 0x31, 0x1f, 0xdb, 0x35, 0x45, 0x57, 0x66, 0xe9, 0xc3, 0xc3, 0xdd, 0x67, 0xc8, 0x9a, 0xa6,
	0x34, 0xb7, 0x22, 0x6a, 0x17, 0x3a, 0xd5, 0x7e, 0x23, 0x5a, 0xee, 0x8f, 0x40, 0x52, 0xdb, 0xd8,
	0xad, 0x47, 0x9a, 0x86, 0x26, 0x07, 0x7b, 0x37, 0x19, 0x5f, 0xc9, 0xbe, 0xc2, 0x8f, 0xf2, 0xbd,
	0x4f, 0xa3, 0x25, 0x59, 0xb3, 0x0d, 0xcd, 0x82, 0x94, 0x6c, 0xa4, 0xa1, 0xf7, 0x4a, 0x77, 0x3a,
	0x13, 0xbd, 0x05, 0x7d, 0x84, 0xe6, 0x5d, 0xbf, 0xe6, 0x8d, 0xf3, 0x38, 0xff, 0x87, 0x96, 0x39,
	0xda, 0xa7, 0xf3, 0xfe, 0x29, 0x8f, 0x1c, 0x32, 0xb8, 0x76, 0x17, 0xf6, 0x37, 0x7c, 0x59, 0xdb,
	0xdd, 0xd7, 0xbe, 0xd0, 0x04, 0xff, 0xff, 0xa8, 0xb6, 0x1a, 0xf9, 0x9d, 0x26, 0x08, 0x43, 0xd9,
	0xe7, 0xab, 0x20, 0x5b, 0x33, 0x8c, 0xdb, 0xa7, 0x9d, 0xaa, 0xbd, 0x0b, 0x25, 0xc2, 0xb6, 0x0a,
	0x79, 0xa6, 0x10, 0x1d, 0x4a, 0x44, 0x36, 0x82, 0x74, 0xfd, 0x53, 0xf9, 0x6f, 0xf6, 0x2e, 0x44,
	0x0b, 0x68, 0xc8, 0x3a, 0x10, 0xf1, 0x17, 0x8b, 0x63, 0x7f, 0xcd, 0xf0, 0xf3, 0xfc, 0xd8, 0x5d,
	0x53, 0x4d, 0x23, 0x73, 0x37, 0x8d, 0x54, 0x4b, 0xdf, 0xfd, 0xcb, 0x95, 0xcc, 0xe7, 0xf7, 0x63,
	0xd7, 0xa5, 0xc0, 0x42, 0xef, 0x47, 0xbf, 0x40, 0x2d, 0x11, 0x71, 0x4a, 0x96, 0xb7, 0x24, 0xa5,
	0x1e, 0x7e, 0x71, 0xd8, 0xdf, 0x12, 0xb8, 0xbc, 0x75, 0xa9, 0x87, 0x3e, 0x40, 0x63, 0xb3, 0xbf,
	0x16, 0x79, 0x5d, 0xe7, 0xdf, 0x4d, 0x8e, 0xda, 0xc4, 0x25, 0xc3, 0xc1, 0x74, 0x7a, 0x39, 0x18,
	0x7e, 0xb6, 0xeb, 0x3b, 0xb6, 0x84, 0xba, 0x3e, 0x54, 0xf7, 0x3c, 0xd4, 0x84, 0x83, 0x19, 0x63,
	0x3c, 0x40, 0x2d, 0x38, 0xdc, 0x69, 0x14, 0x34, 0xe1, 0x6a, 0x61, 0xcd, 0xdd, 0xb1, 0x6d, 0x14,
	0x51, 0x03, 0xaa, 0x13, 0x97, 0x38, 0xee, 0xc0, 0xb5, 0x86, 0xc6, 0x89, 0x0e, 0xad, 0x4f, 0xf3,
	0x85, 0x3d, 0x36, 0x4e, 0x77, 0xe1, 0x7c, 0x6a, 0xcd, 0xc7, 0x46, 0xa9, 0x3b, 0x82, 0xb2, 0x9e,
	0x7c, 0x52, 0xe7, 0x6e, 0xf6, 0x19, 0x0f, 0x50, 0x05, 0x8a, 0x96, 0x43, 0xde, 0x1b, 0x15, 0x54,
	0x85, 0x92, 0xe5, 0x90, 0xd7, 0xef, 0x0c, 0x43, 0x2f, 0xdf, 0x5c, 0x18, 0x6d, 0xbd, 0x7c, 0xf7,
	0xd6, 0xf8, 0xd8, 0xfd, 0x03, 0x8c, 0x6f, 0xad, 0x8c, 0x00, 0xb4, 0x99, 0x8d, 0x07, 0xe8, 0x11,
	0xb4, 0x66, 0xc4, 0x71, 0x6d, 0xeb, 0x8a, 0x5c, 0x0d, 0x86, 0x9f, 0x07, 0x9f, 0xc6, 0x46, 0x41,
	0x9e, 0x64, 0x46, 0x26, 0xd3, 0x81, 0xeb, 0x8e, 0xe7, 0xc6, 0x09, 0x7a, 0x02, 0x68, 0xb6, 0x43,
	0x89, 0x35, 0xb7, 0x5c, 0x6b, 0x30, 0x75, 0x8c, 0xd3, 0xee, 0x18, 0x9a, 0xc7, 0x16, 0x43, 0x35,
	0xd8, 0x99, 0x4c, 0x9d, 0x72, 0xe4, 0x90, 0xd7, 0x46, 0x41, 0xaf, 0x2e, 0x8c, 0x13, 0xbd, 0x7a,
	0x6b, 0x14, 0xf5, 0xea, 0xbd, 0x51, 0xe9, 0xbb, 0xd0, 0x54, 0xcf, 0x11, 0xd9, 0xf8, 0x01, 0x13,
	0x51, 0x8a, 0x5e, 0xdc, 0xe3, 0x81, 0x80, 0xe9, 0xa7, 0x07, 0xff, 0x23, 0x1f, 0x86, 0xda, 0x45,
	0xd3, 0x3c, 0x7a, 0x91, 0xec, 0x86, 0x12, 0x99, 0x28, 0x8d, 0xfe, 0x35, 0xe8, 0x84, 0x9c, 0x5b,
	0x52, 0xf4, 0xa7, 0xef, 0x44, 0xf5, 0xd0, 0xfd, 0x81, 0x6e, 0x5d, 0xc9, 0xcc, 0x72, 0x95, 0x83,
	0xc3, 0xca, 0x41, 0x76, 0xff, 0x61, 0xe5, 0xcc, 0xff, 0x6f, 0x87, 0x1d, 0x2b, 0x8d, 0xfe, 0x04,
	0xce, 0x54, 0x02, 0x9d, 0xdf, 0x6f, 0xff, 0x1f, 0xc8, 0xe9, 0xdd, 0x97, 0xcf, 0x00, 0x6f, 0x7c,
	0xf3, 0x86, 0x46, 0x89, 0x6f, 0xde, 0x88, 0xd4, 0x37, 0xff, 0x8c, 0xa8, 0xa9, 0xb0, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x70, 0x7f, 0xd5, 0x00, 0x1a, 0x08, 0x00, 0x00,
}
