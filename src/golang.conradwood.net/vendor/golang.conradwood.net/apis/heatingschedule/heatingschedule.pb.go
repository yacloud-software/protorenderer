// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/heatingschedule/heatingschedule.proto
// DO NOT EDIT!

/*
Package heatingschedule is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/heatingschedule/heatingschedule.proto

It has these top-level messages:
	Slot
	SlotTemp
	SlotList
	Dwelling
	Room
	Actuator
	SetTempRequest
	SetFrostModeRequest
	OverviewRoom
	Overview
	DwellingList
	SettingsRequest
	SlotRoomTemp
	SlotTemperatures
	Settings
	SetSettingsRequest
	DwellingDemandRequest
	OffRequest
	DwellingDemandResponse
	OverrideRequest
	CancelOverrideRequest
	TempOverrideRequest
	CancelTempOverrideRequest
	RoomStatus
	RoomStatusRequest
	DwellingsFlagsRequest
	ActuatorRequest
	IgnoreRequest
	UpdateRoomRequest
	TempOverrideResponse
	WindowRequest
*/
package heatingschedule

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import _ "github.com/golang/protobuf/protoc-gen-go/descriptor"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// a "slot" is a time of day
type Slot struct {
	ID          uint64   `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	StartHour   uint32   `protobuf:"varint,2,opt,name=StartHour" json:"StartHour,omitempty"`
	StartMinute uint32   `protobuf:"varint,3,opt,name=StartMinute" json:"StartMinute,omitempty"`
	Days        []uint32 `protobuf:"varint,4,rep,packed,name=Days" json:"Days,omitempty"`
	Name        string   `protobuf:"bytes,5,opt,name=Name" json:"Name,omitempty"`
}

func (m *Slot) Reset()                    { *m = Slot{} }
func (m *Slot) String() string            { return proto.CompactTextString(m) }
func (*Slot) ProtoMessage()               {}
func (*Slot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Slot) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Slot) GetStartHour() uint32 {
	if m != nil {
		return m.StartHour
	}
	return 0
}

func (m *Slot) GetStartMinute() uint32 {
	if m != nil {
		return m.StartMinute
	}
	return 0
}

func (m *Slot) GetDays() []uint32 {
	if m != nil {
		return m.Days
	}
	return nil
}

func (m *Slot) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SlotTemp struct {
	ID            uint64  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	SlotID        uint64  `protobuf:"varint,2,opt,name=SlotID" json:"SlotID,omitempty"`
	RoomID        uint64  `protobuf:"varint,3,opt,name=RoomID" json:"RoomID,omitempty"`
	PreferredTemp float64 `protobuf:"fixed64,4,opt,name=PreferredTemp" json:"PreferredTemp,omitempty"`
}

func (m *SlotTemp) Reset()                    { *m = SlotTemp{} }
func (m *SlotTemp) String() string            { return proto.CompactTextString(m) }
func (*SlotTemp) ProtoMessage()               {}
func (*SlotTemp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SlotTemp) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SlotTemp) GetSlotID() uint64 {
	if m != nil {
		return m.SlotID
	}
	return 0
}

func (m *SlotTemp) GetRoomID() uint64 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *SlotTemp) GetPreferredTemp() float64 {
	if m != nil {
		return m.PreferredTemp
	}
	return 0
}

type SlotList struct {
	Slots []*Slot `protobuf:"bytes,1,rep,name=Slots" json:"Slots,omitempty"`
}

func (m *SlotList) Reset()                    { *m = SlotList{} }
func (m *SlotList) String() string            { return proto.CompactTextString(m) }
func (*SlotList) ProtoMessage()               {}
func (*SlotList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SlotList) GetSlots() []*Slot {
	if m != nil {
		return m.Slots
	}
	return nil
}

// e.g. a house
type Dwelling struct {
	ID           uint64  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name         string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Rooms        []*Room `protobuf:"bytes,3,rep,name=Rooms" json:"Rooms,omitempty"`
	BoilerDemand bool    `protobuf:"varint,4,opt,name=BoilerDemand" json:"BoilerDemand,omitempty"`
	FrostMode    bool    `protobuf:"varint,5,opt,name=FrostMode" json:"FrostMode,omitempty"`
}

func (m *Dwelling) Reset()                    { *m = Dwelling{} }
func (m *Dwelling) String() string            { return proto.CompactTextString(m) }
func (*Dwelling) ProtoMessage()               {}
func (*Dwelling) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Dwelling) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Dwelling) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Dwelling) GetRooms() []*Room {
	if m != nil {
		return m.Rooms
	}
	return nil
}

func (m *Dwelling) GetBoilerDemand() bool {
	if m != nil {
		return m.BoilerDemand
	}
	return false
}

func (m *Dwelling) GetFrostMode() bool {
	if m != nil {
		return m.FrostMode
	}
	return false
}

// e.g. "Living Room"
type Room struct {
	ID               uint64      `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name             string      `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	SingingCatSensor uint64      `protobuf:"varint,3,opt,name=SingingCatSensor" json:"SingingCatSensor,omitempty"`
	LastTemp         float64     `protobuf:"fixed64,5,opt,name=LastTemp" json:"LastTemp,omitempty"`
	Actuators        []*Actuator `protobuf:"bytes,6,rep,name=Actuators" json:"Actuators,omitempty"`
	FrostMode        bool        `protobuf:"varint,7,opt,name=FrostMode" json:"FrostMode,omitempty"`
	Ignored          bool        `protobuf:"varint,8,opt,name=Ignored" json:"Ignored,omitempty"`
	WindowOpen       bool        `protobuf:"varint,9,opt,name=WindowOpen" json:"WindowOpen,omitempty"`
}

func (m *Room) Reset()                    { *m = Room{} }
func (m *Room) String() string            { return proto.CompactTextString(m) }
func (*Room) ProtoMessage()               {}
func (*Room) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Room) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Room) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Room) GetSingingCatSensor() uint64 {
	if m != nil {
		return m.SingingCatSensor
	}
	return 0
}

func (m *Room) GetLastTemp() float64 {
	if m != nil {
		return m.LastTemp
	}
	return 0
}

func (m *Room) GetActuators() []*Actuator {
	if m != nil {
		return m.Actuators
	}
	return nil
}

func (m *Room) GetFrostMode() bool {
	if m != nil {
		return m.FrostMode
	}
	return false
}

func (m *Room) GetIgnored() bool {
	if m != nil {
		return m.Ignored
	}
	return false
}

func (m *Room) GetWindowOpen() bool {
	if m != nil {
		return m.WindowOpen
	}
	return false
}

// name for a radiator, e.g. "by the window"
type Actuator struct {
	ID                uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Mosfet            bool   `protobuf:"varint,3,opt,name=Mosfet" json:"Mosfet,omitempty"`
	Mosfetno          uint32 `protobuf:"varint,4,opt,name=Mosfetno" json:"Mosfetno,omitempty"`
	Pinno             uint32 `protobuf:"varint,5,opt,name=Pinno" json:"Pinno,omitempty"`
	NormallyOpen      bool   `protobuf:"varint,6,opt,name=NormallyOpen" json:"NormallyOpen,omitempty"`
	ModuleID          uint64 `protobuf:"varint,7,opt,name=ModuleID" json:"ModuleID,omitempty"`
	RadiatorRequested bool   `protobuf:"varint,8,opt,name=RadiatorRequested" json:"RadiatorRequested,omitempty"`
	RadiatorFailed    bool   `protobuf:"varint,9,opt,name=RadiatorFailed" json:"RadiatorFailed,omitempty"`
	CustomNode        bool   `protobuf:"varint,10,opt,name=CustomNode" json:"CustomNode,omitempty"`
	CustomNodeID      uint64 `protobuf:"varint,11,opt,name=CustomNodeID" json:"CustomNodeID,omitempty"`
	IsAutoMode        bool   `protobuf:"varint,12,opt,name=IsAutoMode" json:"IsAutoMode,omitempty"`
	IsOn              bool   `protobuf:"varint,13,opt,name=IsOn" json:"IsOn,omitempty"`
}

func (m *Actuator) Reset()                    { *m = Actuator{} }
func (m *Actuator) String() string            { return proto.CompactTextString(m) }
func (*Actuator) ProtoMessage()               {}
func (*Actuator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Actuator) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Actuator) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Actuator) GetMosfet() bool {
	if m != nil {
		return m.Mosfet
	}
	return false
}

func (m *Actuator) GetMosfetno() uint32 {
	if m != nil {
		return m.Mosfetno
	}
	return 0
}

func (m *Actuator) GetPinno() uint32 {
	if m != nil {
		return m.Pinno
	}
	return 0
}

func (m *Actuator) GetNormallyOpen() bool {
	if m != nil {
		return m.NormallyOpen
	}
	return false
}

func (m *Actuator) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

func (m *Actuator) GetRadiatorRequested() bool {
	if m != nil {
		return m.RadiatorRequested
	}
	return false
}

func (m *Actuator) GetRadiatorFailed() bool {
	if m != nil {
		return m.RadiatorFailed
	}
	return false
}

func (m *Actuator) GetCustomNode() bool {
	if m != nil {
		return m.CustomNode
	}
	return false
}

func (m *Actuator) GetCustomNodeID() uint64 {
	if m != nil {
		return m.CustomNodeID
	}
	return 0
}

func (m *Actuator) GetIsAutoMode() bool {
	if m != nil {
		return m.IsAutoMode
	}
	return false
}

func (m *Actuator) GetIsOn() bool {
	if m != nil {
		return m.IsOn
	}
	return false
}

type SetTempRequest struct {
	RoomID  uint64  `protobuf:"varint,1,opt,name=RoomID" json:"RoomID,omitempty"`
	NewTemp float64 `protobuf:"fixed64,2,opt,name=NewTemp" json:"NewTemp,omitempty"`
}

func (m *SetTempRequest) Reset()                    { *m = SetTempRequest{} }
func (m *SetTempRequest) String() string            { return proto.CompactTextString(m) }
func (*SetTempRequest) ProtoMessage()               {}
func (*SetTempRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SetTempRequest) GetRoomID() uint64 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *SetTempRequest) GetNewTemp() float64 {
	if m != nil {
		return m.NewTemp
	}
	return 0
}

type SetFrostModeRequest struct {
	RoomID    uint64 `protobuf:"varint,1,opt,name=RoomID" json:"RoomID,omitempty"`
	FrostMode bool   `protobuf:"varint,2,opt,name=FrostMode" json:"FrostMode,omitempty"`
}

func (m *SetFrostModeRequest) Reset()                    { *m = SetFrostModeRequest{} }
func (m *SetFrostModeRequest) String() string            { return proto.CompactTextString(m) }
func (*SetFrostModeRequest) ProtoMessage()               {}
func (*SetFrostModeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SetFrostModeRequest) GetRoomID() uint64 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *SetFrostModeRequest) GetFrostMode() bool {
	if m != nil {
		return m.FrostMode
	}
	return false
}

// a pre-rendered (strings) room overview
type OverviewRoom struct {
	RoomID               uint64 `protobuf:"varint,1,opt,name=RoomID" json:"RoomID,omitempty"`
	RoomName             string `protobuf:"bytes,2,opt,name=RoomName" json:"RoomName,omitempty"`
	CurrentTemperature   string `protobuf:"bytes,3,opt,name=CurrentTemperature" json:"CurrentTemperature,omitempty"`
	PreferredTemperature string `protobuf:"bytes,4,opt,name=PreferredTemperature" json:"PreferredTemperature,omitempty"`
	Demand               bool   `protobuf:"varint,5,opt,name=Demand" json:"Demand,omitempty"`
	FrostMode            bool   `protobuf:"varint,6,opt,name=FrostMode" json:"FrostMode,omitempty"`
	TRVUnavailable       bool   `protobuf:"varint,7,opt,name=TRVUnavailable" json:"TRVUnavailable,omitempty"`
	ShortMessage         string `protobuf:"bytes,8,opt,name=ShortMessage" json:"ShortMessage,omitempty"`
	DetailMessage        string `protobuf:"bytes,9,opt,name=DetailMessage" json:"DetailMessage,omitempty"`
	SensorUnavailable    bool   `protobuf:"varint,10,opt,name=SensorUnavailable" json:"SensorUnavailable,omitempty"`
	Room                 *Room  `protobuf:"bytes,11,opt,name=Room" json:"Room,omitempty"`
	WindowOpen           bool   `protobuf:"varint,12,opt,name=WindowOpen" json:"WindowOpen,omitempty"`
}

func (m *OverviewRoom) Reset()                    { *m = OverviewRoom{} }
func (m *OverviewRoom) String() string            { return proto.CompactTextString(m) }
func (*OverviewRoom) ProtoMessage()               {}
func (*OverviewRoom) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *OverviewRoom) GetRoomID() uint64 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *OverviewRoom) GetRoomName() string {
	if m != nil {
		return m.RoomName
	}
	return ""
}

func (m *OverviewRoom) GetCurrentTemperature() string {
	if m != nil {
		return m.CurrentTemperature
	}
	return ""
}

func (m *OverviewRoom) GetPreferredTemperature() string {
	if m != nil {
		return m.PreferredTemperature
	}
	return ""
}

func (m *OverviewRoom) GetDemand() bool {
	if m != nil {
		return m.Demand
	}
	return false
}

func (m *OverviewRoom) GetFrostMode() bool {
	if m != nil {
		return m.FrostMode
	}
	return false
}

func (m *OverviewRoom) GetTRVUnavailable() bool {
	if m != nil {
		return m.TRVUnavailable
	}
	return false
}

func (m *OverviewRoom) GetShortMessage() string {
	if m != nil {
		return m.ShortMessage
	}
	return ""
}

func (m *OverviewRoom) GetDetailMessage() string {
	if m != nil {
		return m.DetailMessage
	}
	return ""
}

func (m *OverviewRoom) GetSensorUnavailable() bool {
	if m != nil {
		return m.SensorUnavailable
	}
	return false
}

func (m *OverviewRoom) GetRoom() *Room {
	if m != nil {
		return m.Room
	}
	return nil
}

func (m *OverviewRoom) GetWindowOpen() bool {
	if m != nil {
		return m.WindowOpen
	}
	return false
}

type Overview struct {
	Rooms              []*OverviewRoom `protobuf:"bytes,1,rep,name=Rooms" json:"Rooms,omitempty"`
	HeatingSystemOn    bool            `protobuf:"varint,2,opt,name=HeatingSystemOn" json:"HeatingSystemOn,omitempty"`
	SlotName           string          `protobuf:"bytes,3,opt,name=SlotName" json:"SlotName,omitempty"`
	Disabled           bool            `protobuf:"varint,4,opt,name=Disabled" json:"Disabled,omitempty"`
	OutdoorTemperature float64         `protobuf:"fixed64,5,opt,name=OutdoorTemperature" json:"OutdoorTemperature,omitempty"`
	FrostMode          bool            `protobuf:"varint,6,opt,name=FrostMode" json:"FrostMode,omitempty"`
	SystemTime         uint32          `protobuf:"varint,7,opt,name=SystemTime" json:"SystemTime,omitempty"`
	SystemTimeText     string          `protobuf:"bytes,8,opt,name=SystemTimeText" json:"SystemTimeText,omitempty"`
}

func (m *Overview) Reset()                    { *m = Overview{} }
func (m *Overview) String() string            { return proto.CompactTextString(m) }
func (*Overview) ProtoMessage()               {}
func (*Overview) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Overview) GetRooms() []*OverviewRoom {
	if m != nil {
		return m.Rooms
	}
	return nil
}

func (m *Overview) GetHeatingSystemOn() bool {
	if m != nil {
		return m.HeatingSystemOn
	}
	return false
}

func (m *Overview) GetSlotName() string {
	if m != nil {
		return m.SlotName
	}
	return ""
}

func (m *Overview) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *Overview) GetOutdoorTemperature() float64 {
	if m != nil {
		return m.OutdoorTemperature
	}
	return 0
}

func (m *Overview) GetFrostMode() bool {
	if m != nil {
		return m.FrostMode
	}
	return false
}

func (m *Overview) GetSystemTime() uint32 {
	if m != nil {
		return m.SystemTime
	}
	return 0
}

func (m *Overview) GetSystemTimeText() string {
	if m != nil {
		return m.SystemTimeText
	}
	return ""
}

type DwellingList struct {
	Dwellings []*Dwelling `protobuf:"bytes,1,rep,name=Dwellings" json:"Dwellings,omitempty"`
}

func (m *DwellingList) Reset()                    { *m = DwellingList{} }
func (m *DwellingList) String() string            { return proto.CompactTextString(m) }
func (*DwellingList) ProtoMessage()               {}
func (*DwellingList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DwellingList) GetDwellings() []*Dwelling {
	if m != nil {
		return m.Dwellings
	}
	return nil
}

type SettingsRequest struct {
	DwellingID        uint64 `protobuf:"varint,1,opt,name=DwellingID" json:"DwellingID,omitempty"`
	IncludeNonCurrent bool   `protobuf:"varint,2,opt,name=IncludeNonCurrent" json:"IncludeNonCurrent,omitempty"`
}

func (m *SettingsRequest) Reset()                    { *m = SettingsRequest{} }
func (m *SettingsRequest) String() string            { return proto.CompactTextString(m) }
func (*SettingsRequest) ProtoMessage()               {}
func (*SettingsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SettingsRequest) GetDwellingID() uint64 {
	if m != nil {
		return m.DwellingID
	}
	return 0
}

func (m *SettingsRequest) GetIncludeNonCurrent() bool {
	if m != nil {
		return m.IncludeNonCurrent
	}
	return false
}

type SlotRoomTemp struct {
	Room                 *Room   `protobuf:"bytes,1,opt,name=Room" json:"Room,omitempty"`
	PreferredTemperature float64 `protobuf:"fixed64,2,opt,name=PreferredTemperature" json:"PreferredTemperature,omitempty"`
}

func (m *SlotRoomTemp) Reset()                    { *m = SlotRoomTemp{} }
func (m *SlotRoomTemp) String() string            { return proto.CompactTextString(m) }
func (*SlotRoomTemp) ProtoMessage()               {}
func (*SlotRoomTemp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SlotRoomTemp) GetRoom() *Room {
	if m != nil {
		return m.Room
	}
	return nil
}

func (m *SlotRoomTemp) GetPreferredTemperature() float64 {
	if m != nil {
		return m.PreferredTemperature
	}
	return 0
}

type SlotTemperatures struct {
	Slot      *Slot           `protobuf:"bytes,1,opt,name=Slot" json:"Slot,omitempty"`
	Daynames  string          `protobuf:"bytes,2,opt,name=Daynames" json:"Daynames,omitempty"`
	StartTime string          `protobuf:"bytes,3,opt,name=StartTime" json:"StartTime,omitempty"`
	Rooms     []*SlotRoomTemp `protobuf:"bytes,4,rep,name=Rooms" json:"Rooms,omitempty"`
}

func (m *SlotTemperatures) Reset()                    { *m = SlotTemperatures{} }
func (m *SlotTemperatures) String() string            { return proto.CompactTextString(m) }
func (*SlotTemperatures) ProtoMessage()               {}
func (*SlotTemperatures) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SlotTemperatures) GetSlot() *Slot {
	if m != nil {
		return m.Slot
	}
	return nil
}

func (m *SlotTemperatures) GetDaynames() string {
	if m != nil {
		return m.Daynames
	}
	return ""
}

func (m *SlotTemperatures) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *SlotTemperatures) GetRooms() []*SlotRoomTemp {
	if m != nil {
		return m.Rooms
	}
	return nil
}

type Settings struct {
	Slots        []*Slot             `protobuf:"bytes,1,rep,name=Slots" json:"Slots,omitempty"`
	Temperatures []*SlotTemperatures `protobuf:"bytes,2,rep,name=Temperatures" json:"Temperatures,omitempty"`
}

func (m *Settings) Reset()                    { *m = Settings{} }
func (m *Settings) String() string            { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()               {}
func (*Settings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Settings) GetSlots() []*Slot {
	if m != nil {
		return m.Slots
	}
	return nil
}

func (m *Settings) GetTemperatures() []*SlotTemperatures {
	if m != nil {
		return m.Temperatures
	}
	return nil
}

type SetSettingsRequest struct {
	SlotID      uint64  `protobuf:"varint,1,opt,name=SlotID" json:"SlotID,omitempty"`
	RoomID      uint64  `protobuf:"varint,2,opt,name=RoomID" json:"RoomID,omitempty"`
	Temperature float64 `protobuf:"fixed64,3,opt,name=Temperature" json:"Temperature,omitempty"`
}

func (m *SetSettingsRequest) Reset()                    { *m = SetSettingsRequest{} }
func (m *SetSettingsRequest) String() string            { return proto.CompactTextString(m) }
func (*SetSettingsRequest) ProtoMessage()               {}
func (*SetSettingsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SetSettingsRequest) GetSlotID() uint64 {
	if m != nil {
		return m.SlotID
	}
	return 0
}

func (m *SetSettingsRequest) GetRoomID() uint64 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *SetSettingsRequest) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

type DwellingDemandRequest struct {
	DwellingID uint64 `protobuf:"varint,1,opt,name=DwellingID" json:"DwellingID,omitempty"`
}

func (m *DwellingDemandRequest) Reset()                    { *m = DwellingDemandRequest{} }
func (m *DwellingDemandRequest) String() string            { return proto.CompactTextString(m) }
func (*DwellingDemandRequest) ProtoMessage()               {}
func (*DwellingDemandRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DwellingDemandRequest) GetDwellingID() uint64 {
	if m != nil {
		return m.DwellingID
	}
	return 0
}

type OffRequest struct {
	DwellingID uint64 `protobuf:"varint,1,opt,name=DwellingID" json:"DwellingID,omitempty"`
	ForceOff   bool   `protobuf:"varint,2,opt,name=ForceOff" json:"ForceOff,omitempty"`
}

func (m *OffRequest) Reset()                    { *m = OffRequest{} }
func (m *OffRequest) String() string            { return proto.CompactTextString(m) }
func (*OffRequest) ProtoMessage()               {}
func (*OffRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *OffRequest) GetDwellingID() uint64 {
	if m != nil {
		return m.DwellingID
	}
	return 0
}

func (m *OffRequest) GetForceOff() bool {
	if m != nil {
		return m.ForceOff
	}
	return false
}

type DwellingDemandResponse struct {
	Demand bool `protobuf:"varint,1,opt,name=Demand" json:"Demand,omitempty"`
}

func (m *DwellingDemandResponse) Reset()                    { *m = DwellingDemandResponse{} }
func (m *DwellingDemandResponse) String() string            { return proto.CompactTextString(m) }
func (*DwellingDemandResponse) ProtoMessage()               {}
func (*DwellingDemandResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DwellingDemandResponse) GetDemand() bool {
	if m != nil {
		return m.Demand
	}
	return false
}

// it is a an error if both, CoveredSlotIDs and EndTime are set. only one or the other is allowed
type OverrideRequest struct {
	DwellingID     uint64   `protobuf:"varint,1,opt,name=DwellingID" json:"DwellingID,omitempty"`
	ToSlotID       uint64   `protobuf:"varint,2,opt,name=ToSlotID" json:"ToSlotID,omitempty"`
	CoveredSlotIDs []uint64 `protobuf:"varint,3,rep,packed,name=CoveredSlotIDs" json:"CoveredSlotIDs,omitempty"`
	EndTime        uint32   `protobuf:"varint,4,opt,name=EndTime" json:"EndTime,omitempty"`
}

func (m *OverrideRequest) Reset()                    { *m = OverrideRequest{} }
func (m *OverrideRequest) String() string            { return proto.CompactTextString(m) }
func (*OverrideRequest) ProtoMessage()               {}
func (*OverrideRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *OverrideRequest) GetDwellingID() uint64 {
	if m != nil {
		return m.DwellingID
	}
	return 0
}

func (m *OverrideRequest) GetToSlotID() uint64 {
	if m != nil {
		return m.ToSlotID
	}
	return 0
}

func (m *OverrideRequest) GetCoveredSlotIDs() []uint64 {
	if m != nil {
		return m.CoveredSlotIDs
	}
	return nil
}

func (m *OverrideRequest) GetEndTime() uint32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type CancelOverrideRequest struct {
	DwellingID uint64 `protobuf:"varint,1,opt,name=DwellingID" json:"DwellingID,omitempty"`
}

func (m *CancelOverrideRequest) Reset()                    { *m = CancelOverrideRequest{} }
func (m *CancelOverrideRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelOverrideRequest) ProtoMessage()               {}
func (*CancelOverrideRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CancelOverrideRequest) GetDwellingID() uint64 {
	if m != nil {
		return m.DwellingID
	}
	return 0
}

type TempOverrideRequest struct {
	RoomID       uint64  `protobuf:"varint,1,opt,name=RoomID" json:"RoomID,omitempty"`
	Temp         float64 `protobuf:"fixed64,2,opt,name=Temp" json:"Temp,omitempty"`
	Expiry       uint32  `protobuf:"varint,3,opt,name=Expiry" json:"Expiry,omitempty"`
	RelativeTemp bool    `protobuf:"varint,4,opt,name=RelativeTemp" json:"RelativeTemp,omitempty"`
}

func (m *TempOverrideRequest) Reset()                    { *m = TempOverrideRequest{} }
func (m *TempOverrideRequest) String() string            { return proto.CompactTextString(m) }
func (*TempOverrideRequest) ProtoMessage()               {}
func (*TempOverrideRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *TempOverrideRequest) GetRoomID() uint64 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *TempOverrideRequest) GetTemp() float64 {
	if m != nil {
		return m.Temp
	}
	return 0
}

func (m *TempOverrideRequest) GetExpiry() uint32 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *TempOverrideRequest) GetRelativeTemp() bool {
	if m != nil {
		return m.RelativeTemp
	}
	return false
}

type CancelTempOverrideRequest struct {
	RoomID uint64 `protobuf:"varint,1,opt,name=RoomID" json:"RoomID,omitempty"`
}

func (m *CancelTempOverrideRequest) Reset()                    { *m = CancelTempOverrideRequest{} }
func (m *CancelTempOverrideRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelTempOverrideRequest) ProtoMessage()               {}
func (*CancelTempOverrideRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CancelTempOverrideRequest) GetRoomID() uint64 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

type RoomStatus struct {
	PreferredTemp      float64 `protobuf:"fixed64,2,opt,name=PreferredTemp" json:"PreferredTemp,omitempty"`
	CurrentTemperature float64 `protobuf:"fixed64,3,opt,name=CurrentTemperature" json:"CurrentTemperature,omitempty"`
	RoomName           string  `protobuf:"bytes,4,opt,name=RoomName" json:"RoomName,omitempty"`
	Demand             bool    `protobuf:"varint,5,opt,name=Demand" json:"Demand,omitempty"`
	FrostMode          bool    `protobuf:"varint,6,opt,name=FrostMode" json:"FrostMode,omitempty"`
	WindowOpen         bool    `protobuf:"varint,7,opt,name=WindowOpen" json:"WindowOpen,omitempty"`
}

func (m *RoomStatus) Reset()                    { *m = RoomStatus{} }
func (m *RoomStatus) String() string            { return proto.CompactTextString(m) }
func (*RoomStatus) ProtoMessage()               {}
func (*RoomStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *RoomStatus) GetPreferredTemp() float64 {
	if m != nil {
		return m.PreferredTemp
	}
	return 0
}

func (m *RoomStatus) GetCurrentTemperature() float64 {
	if m != nil {
		return m.CurrentTemperature
	}
	return 0
}

func (m *RoomStatus) GetRoomName() string {
	if m != nil {
		return m.RoomName
	}
	return ""
}

func (m *RoomStatus) GetDemand() bool {
	if m != nil {
		return m.Demand
	}
	return false
}

func (m *RoomStatus) GetFrostMode() bool {
	if m != nil {
		return m.FrostMode
	}
	return false
}

func (m *RoomStatus) GetWindowOpen() bool {
	if m != nil {
		return m.WindowOpen
	}
	return false
}

type RoomStatusRequest struct {
	RoomID uint64 `protobuf:"varint,1,opt,name=RoomID" json:"RoomID,omitempty"`
}

func (m *RoomStatusRequest) Reset()                    { *m = RoomStatusRequest{} }
func (m *RoomStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*RoomStatusRequest) ProtoMessage()               {}
func (*RoomStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *RoomStatusRequest) GetRoomID() uint64 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

type DwellingsFlagsRequest struct {
	DwellingID uint64 `protobuf:"varint,1,opt,name=DwellingID" json:"DwellingID,omitempty"`
	FrostMode  bool   `protobuf:"varint,2,opt,name=FrostMode" json:"FrostMode,omitempty"`
}

func (m *DwellingsFlagsRequest) Reset()                    { *m = DwellingsFlagsRequest{} }
func (m *DwellingsFlagsRequest) String() string            { return proto.CompactTextString(m) }
func (*DwellingsFlagsRequest) ProtoMessage()               {}
func (*DwellingsFlagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *DwellingsFlagsRequest) GetDwellingID() uint64 {
	if m != nil {
		return m.DwellingID
	}
	return 0
}

func (m *DwellingsFlagsRequest) GetFrostMode() bool {
	if m != nil {
		return m.FrostMode
	}
	return false
}

type ActuatorRequest struct {
	ActuatorID uint64 `protobuf:"varint,1,opt,name=ActuatorID" json:"ActuatorID,omitempty"`
	AutoMode   bool   `protobuf:"varint,2,opt,name=AutoMode" json:"AutoMode,omitempty"`
	On         bool   `protobuf:"varint,3,opt,name=On" json:"On,omitempty"`
}

func (m *ActuatorRequest) Reset()                    { *m = ActuatorRequest{} }
func (m *ActuatorRequest) String() string            { return proto.CompactTextString(m) }
func (*ActuatorRequest) ProtoMessage()               {}
func (*ActuatorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ActuatorRequest) GetActuatorID() uint64 {
	if m != nil {
		return m.ActuatorID
	}
	return 0
}

func (m *ActuatorRequest) GetAutoMode() bool {
	if m != nil {
		return m.AutoMode
	}
	return false
}

func (m *ActuatorRequest) GetOn() bool {
	if m != nil {
		return m.On
	}
	return false
}

type IgnoreRequest struct {
	RoomID uint64 `protobuf:"varint,1,opt,name=RoomID" json:"RoomID,omitempty"`
	Ignore bool   `protobuf:"varint,2,opt,name=Ignore" json:"Ignore,omitempty"`
}

func (m *IgnoreRequest) Reset()                    { *m = IgnoreRequest{} }
func (m *IgnoreRequest) String() string            { return proto.CompactTextString(m) }
func (*IgnoreRequest) ProtoMessage()               {}
func (*IgnoreRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *IgnoreRequest) GetRoomID() uint64 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *IgnoreRequest) GetIgnore() bool {
	if m != nil {
		return m.Ignore
	}
	return false
}

type UpdateRoomRequest struct {
	ID       uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	SensorID uint64 `protobuf:"varint,3,opt,name=SensorID" json:"SensorID,omitempty"`
}

func (m *UpdateRoomRequest) Reset()                    { *m = UpdateRoomRequest{} }
func (m *UpdateRoomRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRoomRequest) ProtoMessage()               {}
func (*UpdateRoomRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *UpdateRoomRequest) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UpdateRoomRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateRoomRequest) GetSensorID() uint64 {
	if m != nil {
		return m.SensorID
	}
	return 0
}

type TempOverrideResponse struct {
	NewTemperature float64 `protobuf:"fixed64,1,opt,name=NewTemperature" json:"NewTemperature,omitempty"`
}

func (m *TempOverrideResponse) Reset()                    { *m = TempOverrideResponse{} }
func (m *TempOverrideResponse) String() string            { return proto.CompactTextString(m) }
func (*TempOverrideResponse) ProtoMessage()               {}
func (*TempOverrideResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *TempOverrideResponse) GetNewTemperature() float64 {
	if m != nil {
		return m.NewTemperature
	}
	return 0
}

type WindowRequest struct {
	IsOpen   bool   `protobuf:"varint,1,opt,name=IsOpen" json:"IsOpen,omitempty"`
	ModuleID uint64 `protobuf:"varint,2,opt,name=ModuleID" json:"ModuleID,omitempty"`
}

func (m *WindowRequest) Reset()                    { *m = WindowRequest{} }
func (m *WindowRequest) String() string            { return proto.CompactTextString(m) }
func (*WindowRequest) ProtoMessage()               {}
func (*WindowRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *WindowRequest) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

func (m *WindowRequest) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

func init() {
	proto.RegisterType((*Slot)(nil), "heatingschedule.Slot")
	proto.RegisterType((*SlotTemp)(nil), "heatingschedule.SlotTemp")
	proto.RegisterType((*SlotList)(nil), "heatingschedule.SlotList")
	proto.RegisterType((*Dwelling)(nil), "heatingschedule.Dwelling")
	proto.RegisterType((*Room)(nil), "heatingschedule.Room")
	proto.RegisterType((*Actuator)(nil), "heatingschedule.Actuator")
	proto.RegisterType((*SetTempRequest)(nil), "heatingschedule.SetTempRequest")
	proto.RegisterType((*SetFrostModeRequest)(nil), "heatingschedule.SetFrostModeRequest")
	proto.RegisterType((*OverviewRoom)(nil), "heatingschedule.OverviewRoom")
	proto.RegisterType((*Overview)(nil), "heatingschedule.Overview")
	proto.RegisterType((*DwellingList)(nil), "heatingschedule.DwellingList")
	proto.RegisterType((*SettingsRequest)(nil), "heatingschedule.SettingsRequest")
	proto.RegisterType((*SlotRoomTemp)(nil), "heatingschedule.SlotRoomTemp")
	proto.RegisterType((*SlotTemperatures)(nil), "heatingschedule.SlotTemperatures")
	proto.RegisterType((*Settings)(nil), "heatingschedule.Settings")
	proto.RegisterType((*SetSettingsRequest)(nil), "heatingschedule.SetSettingsRequest")
	proto.RegisterType((*DwellingDemandRequest)(nil), "heatingschedule.DwellingDemandRequest")
	proto.RegisterType((*OffRequest)(nil), "heatingschedule.OffRequest")
	proto.RegisterType((*DwellingDemandResponse)(nil), "heatingschedule.DwellingDemandResponse")
	proto.RegisterType((*OverrideRequest)(nil), "heatingschedule.OverrideRequest")
	proto.RegisterType((*CancelOverrideRequest)(nil), "heatingschedule.CancelOverrideRequest")
	proto.RegisterType((*TempOverrideRequest)(nil), "heatingschedule.TempOverrideRequest")
	proto.RegisterType((*CancelTempOverrideRequest)(nil), "heatingschedule.CancelTempOverrideRequest")
	proto.RegisterType((*RoomStatus)(nil), "heatingschedule.RoomStatus")
	proto.RegisterType((*RoomStatusRequest)(nil), "heatingschedule.RoomStatusRequest")
	proto.RegisterType((*DwellingsFlagsRequest)(nil), "heatingschedule.DwellingsFlagsRequest")
	proto.RegisterType((*ActuatorRequest)(nil), "heatingschedule.ActuatorRequest")
	proto.RegisterType((*IgnoreRequest)(nil), "heatingschedule.IgnoreRequest")
	proto.RegisterType((*UpdateRoomRequest)(nil), "heatingschedule.UpdateRoomRequest")
	proto.RegisterType((*TempOverrideResponse)(nil), "heatingschedule.TempOverrideResponse")
	proto.RegisterType((*WindowRequest)(nil), "heatingschedule.WindowRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HeatingScheduleService service

type HeatingScheduleServiceClient interface {
	// update a room
	UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*common.Void, error)
	// get the current slot
	CurrentSlot(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Slot, error)
	// get all slots
	GetSlots(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*SlotList, error)
	// sets the temperature for a room for the CURRENT slot
	SetRoomTemperature(ctx context.Context, in *SetTempRequest, opts ...grpc.CallOption) (*common.Void, error)
	// get the current configuration of dwellings
	GetConfig(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*DwellingList, error)
	// render an overview, suitable for display
	GetOverview(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Overview, error)
	// enable/disable frostmode for a room
	SetFrostMode(ctx context.Context, in *SetFrostModeRequest, opts ...grpc.CallOption) (*common.Void, error)
	// a temperature settings proto (helpful for rendering)
	GetSettings(ctx context.Context, in *SettingsRequest, opts ...grpc.CallOption) (*Settings, error)
	// set a temperatore for a given slot
	SetSetting(ctx context.Context, in *SetSettingsRequest, opts ...grpc.CallOption) (*common.Void, error)
	// should dwellings hetting system be on or off?
	GetDwellingDemand(ctx context.Context, in *DwellingDemandRequest, opts ...grpc.CallOption) (*DwellingDemandResponse, error)
	// Override to a specific setting until some slot comes active
	Override(ctx context.Context, in *OverrideRequest, opts ...grpc.CallOption) (*common.Void, error)
	// Cancel any Overrides
	CancelOverride(ctx context.Context, in *CancelOverrideRequest, opts ...grpc.CallOption) (*common.Void, error)
	// force the boiler off
	ForceOff(ctx context.Context, in *OffRequest, opts ...grpc.CallOption) (*common.Void, error)
	// override temperature for some time
	TempOverride(ctx context.Context, in *TempOverrideRequest, opts ...grpc.CallOption) (*TempOverrideResponse, error)
	// cancel temperature override
	CancelTempOverride(ctx context.Context, in *CancelTempOverrideRequest, opts ...grpc.CallOption) (*common.Void, error)
	// get some room details
	GetRoomStatus(ctx context.Context, in *RoomStatusRequest, opts ...grpc.CallOption) (*RoomStatus, error)
	SetDwellingFlags(ctx context.Context, in *DwellingsFlagsRequest, opts ...grpc.CallOption) (*common.Void, error)
	// override an actuator to be on, off or auto
	SetActuator(ctx context.Context, in *ActuatorRequest, opts ...grpc.CallOption) (*common.Void, error)
	// set ignore room status
	SetIgnoreStatus(ctx context.Context, in *IgnoreRequest, opts ...grpc.CallOption) (*common.Void, error)
	// set window/door status
	SetWindowStatus(ctx context.Context, in *WindowRequest, opts ...grpc.CallOption) (*common.Void, error)
}

type heatingScheduleServiceClient struct {
	cc *grpc.ClientConn
}

func NewHeatingScheduleServiceClient(cc *grpc.ClientConn) HeatingScheduleServiceClient {
	return &heatingScheduleServiceClient{cc}
}

func (c *heatingScheduleServiceClient) UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/heatingschedule.HeatingScheduleService/UpdateRoom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heatingScheduleServiceClient) CurrentSlot(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Slot, error) {
	out := new(Slot)
	err := grpc.Invoke(ctx, "/heatingschedule.HeatingScheduleService/CurrentSlot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heatingScheduleServiceClient) GetSlots(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*SlotList, error) {
	out := new(SlotList)
	err := grpc.Invoke(ctx, "/heatingschedule.HeatingScheduleService/GetSlots", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heatingScheduleServiceClient) SetRoomTemperature(ctx context.Context, in *SetTempRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/heatingschedule.HeatingScheduleService/SetRoomTemperature", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heatingScheduleServiceClient) GetConfig(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*DwellingList, error) {
	out := new(DwellingList)
	err := grpc.Invoke(ctx, "/heatingschedule.HeatingScheduleService/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heatingScheduleServiceClient) GetOverview(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Overview, error) {
	out := new(Overview)
	err := grpc.Invoke(ctx, "/heatingschedule.HeatingScheduleService/GetOverview", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heatingScheduleServiceClient) SetFrostMode(ctx context.Context, in *SetFrostModeRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/heatingschedule.HeatingScheduleService/SetFrostMode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heatingScheduleServiceClient) GetSettings(ctx context.Context, in *SettingsRequest, opts ...grpc.CallOption) (*Settings, error) {
	out := new(Settings)
	err := grpc.Invoke(ctx, "/heatingschedule.HeatingScheduleService/GetSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heatingScheduleServiceClient) SetSetting(ctx context.Context, in *SetSettingsRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/heatingschedule.HeatingScheduleService/SetSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heatingScheduleServiceClient) GetDwellingDemand(ctx context.Context, in *DwellingDemandRequest, opts ...grpc.CallOption) (*DwellingDemandResponse, error) {
	out := new(DwellingDemandResponse)
	err := grpc.Invoke(ctx, "/heatingschedule.HeatingScheduleService/GetDwellingDemand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heatingScheduleServiceClient) Override(ctx context.Context, in *OverrideRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/heatingschedule.HeatingScheduleService/Override", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heatingScheduleServiceClient) CancelOverride(ctx context.Context, in *CancelOverrideRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/heatingschedule.HeatingScheduleService/CancelOverride", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heatingScheduleServiceClient) ForceOff(ctx context.Context, in *OffRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/heatingschedule.HeatingScheduleService/ForceOff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heatingScheduleServiceClient) TempOverride(ctx context.Context, in *TempOverrideRequest, opts ...grpc.CallOption) (*TempOverrideResponse, error) {
	out := new(TempOverrideResponse)
	err := grpc.Invoke(ctx, "/heatingschedule.HeatingScheduleService/TempOverride", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heatingScheduleServiceClient) CancelTempOverride(ctx context.Context, in *CancelTempOverrideRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/heatingschedule.HeatingScheduleService/CancelTempOverride", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heatingScheduleServiceClient) GetRoomStatus(ctx context.Context, in *RoomStatusRequest, opts ...grpc.CallOption) (*RoomStatus, error) {
	out := new(RoomStatus)
	err := grpc.Invoke(ctx, "/heatingschedule.HeatingScheduleService/GetRoomStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heatingScheduleServiceClient) SetDwellingFlags(ctx context.Context, in *DwellingsFlagsRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/heatingschedule.HeatingScheduleService/SetDwellingFlags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heatingScheduleServiceClient) SetActuator(ctx context.Context, in *ActuatorRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/heatingschedule.HeatingScheduleService/SetActuator", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heatingScheduleServiceClient) SetIgnoreStatus(ctx context.Context, in *IgnoreRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/heatingschedule.HeatingScheduleService/SetIgnoreStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heatingScheduleServiceClient) SetWindowStatus(ctx context.Context, in *WindowRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/heatingschedule.HeatingScheduleService/SetWindowStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HeatingScheduleService service

type HeatingScheduleServiceServer interface {
	// update a room
	UpdateRoom(context.Context, *UpdateRoomRequest) (*common.Void, error)
	// get the current slot
	CurrentSlot(context.Context, *common.Void) (*Slot, error)
	// get all slots
	GetSlots(context.Context, *common.Void) (*SlotList, error)
	// sets the temperature for a room for the CURRENT slot
	SetRoomTemperature(context.Context, *SetTempRequest) (*common.Void, error)
	// get the current configuration of dwellings
	GetConfig(context.Context, *common.Void) (*DwellingList, error)
	// render an overview, suitable for display
	GetOverview(context.Context, *common.Void) (*Overview, error)
	// enable/disable frostmode for a room
	SetFrostMode(context.Context, *SetFrostModeRequest) (*common.Void, error)
	// a temperature settings proto (helpful for rendering)
	GetSettings(context.Context, *SettingsRequest) (*Settings, error)
	// set a temperatore for a given slot
	SetSetting(context.Context, *SetSettingsRequest) (*common.Void, error)
	// should dwellings hetting system be on or off?
	GetDwellingDemand(context.Context, *DwellingDemandRequest) (*DwellingDemandResponse, error)
	// Override to a specific setting until some slot comes active
	Override(context.Context, *OverrideRequest) (*common.Void, error)
	// Cancel any Overrides
	CancelOverride(context.Context, *CancelOverrideRequest) (*common.Void, error)
	// force the boiler off
	ForceOff(context.Context, *OffRequest) (*common.Void, error)
	// override temperature for some time
	TempOverride(context.Context, *TempOverrideRequest) (*TempOverrideResponse, error)
	// cancel temperature override
	CancelTempOverride(context.Context, *CancelTempOverrideRequest) (*common.Void, error)
	// get some room details
	GetRoomStatus(context.Context, *RoomStatusRequest) (*RoomStatus, error)
	SetDwellingFlags(context.Context, *DwellingsFlagsRequest) (*common.Void, error)
	// override an actuator to be on, off or auto
	SetActuator(context.Context, *ActuatorRequest) (*common.Void, error)
	// set ignore room status
	SetIgnoreStatus(context.Context, *IgnoreRequest) (*common.Void, error)
	// set window/door status
	SetWindowStatus(context.Context, *WindowRequest) (*common.Void, error)
}

func RegisterHeatingScheduleServiceServer(s *grpc.Server, srv HeatingScheduleServiceServer) {
	s.RegisterService(&_HeatingScheduleService_serviceDesc, srv)
}

func _HeatingScheduleService_UpdateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatingScheduleServiceServer).UpdateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatingschedule.HeatingScheduleService/UpdateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatingScheduleServiceServer).UpdateRoom(ctx, req.(*UpdateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeatingScheduleService_CurrentSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatingScheduleServiceServer).CurrentSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatingschedule.HeatingScheduleService/CurrentSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatingScheduleServiceServer).CurrentSlot(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeatingScheduleService_GetSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatingScheduleServiceServer).GetSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatingschedule.HeatingScheduleService/GetSlots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatingScheduleServiceServer).GetSlots(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeatingScheduleService_SetRoomTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTempRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatingScheduleServiceServer).SetRoomTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatingschedule.HeatingScheduleService/SetRoomTemperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatingScheduleServiceServer).SetRoomTemperature(ctx, req.(*SetTempRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeatingScheduleService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatingScheduleServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatingschedule.HeatingScheduleService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatingScheduleServiceServer).GetConfig(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeatingScheduleService_GetOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatingScheduleServiceServer).GetOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatingschedule.HeatingScheduleService/GetOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatingScheduleServiceServer).GetOverview(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeatingScheduleService_SetFrostMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFrostModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatingScheduleServiceServer).SetFrostMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatingschedule.HeatingScheduleService/SetFrostMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatingScheduleServiceServer).SetFrostMode(ctx, req.(*SetFrostModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeatingScheduleService_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatingScheduleServiceServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatingschedule.HeatingScheduleService/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatingScheduleServiceServer).GetSettings(ctx, req.(*SettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeatingScheduleService_SetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatingScheduleServiceServer).SetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatingschedule.HeatingScheduleService/SetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatingScheduleServiceServer).SetSetting(ctx, req.(*SetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeatingScheduleService_GetDwellingDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DwellingDemandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatingScheduleServiceServer).GetDwellingDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatingschedule.HeatingScheduleService/GetDwellingDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatingScheduleServiceServer).GetDwellingDemand(ctx, req.(*DwellingDemandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeatingScheduleService_Override_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatingScheduleServiceServer).Override(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatingschedule.HeatingScheduleService/Override",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatingScheduleServiceServer).Override(ctx, req.(*OverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeatingScheduleService_CancelOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatingScheduleServiceServer).CancelOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatingschedule.HeatingScheduleService/CancelOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatingScheduleServiceServer).CancelOverride(ctx, req.(*CancelOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeatingScheduleService_ForceOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatingScheduleServiceServer).ForceOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatingschedule.HeatingScheduleService/ForceOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatingScheduleServiceServer).ForceOff(ctx, req.(*OffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeatingScheduleService_TempOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatingScheduleServiceServer).TempOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatingschedule.HeatingScheduleService/TempOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatingScheduleServiceServer).TempOverride(ctx, req.(*TempOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeatingScheduleService_CancelTempOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTempOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatingScheduleServiceServer).CancelTempOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatingschedule.HeatingScheduleService/CancelTempOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatingScheduleServiceServer).CancelTempOverride(ctx, req.(*CancelTempOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeatingScheduleService_GetRoomStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatingScheduleServiceServer).GetRoomStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatingschedule.HeatingScheduleService/GetRoomStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatingScheduleServiceServer).GetRoomStatus(ctx, req.(*RoomStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeatingScheduleService_SetDwellingFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DwellingsFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatingScheduleServiceServer).SetDwellingFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatingschedule.HeatingScheduleService/SetDwellingFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatingScheduleServiceServer).SetDwellingFlags(ctx, req.(*DwellingsFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeatingScheduleService_SetActuator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActuatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatingScheduleServiceServer).SetActuator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatingschedule.HeatingScheduleService/SetActuator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatingScheduleServiceServer).SetActuator(ctx, req.(*ActuatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeatingScheduleService_SetIgnoreStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IgnoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatingScheduleServiceServer).SetIgnoreStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatingschedule.HeatingScheduleService/SetIgnoreStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatingScheduleServiceServer).SetIgnoreStatus(ctx, req.(*IgnoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeatingScheduleService_SetWindowStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WindowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatingScheduleServiceServer).SetWindowStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatingschedule.HeatingScheduleService/SetWindowStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatingScheduleServiceServer).SetWindowStatus(ctx, req.(*WindowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HeatingScheduleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heatingschedule.HeatingScheduleService",
	HandlerType: (*HeatingScheduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateRoom",
			Handler:    _HeatingScheduleService_UpdateRoom_Handler,
		},
		{
			MethodName: "CurrentSlot",
			Handler:    _HeatingScheduleService_CurrentSlot_Handler,
		},
		{
			MethodName: "GetSlots",
			Handler:    _HeatingScheduleService_GetSlots_Handler,
		},
		{
			MethodName: "SetRoomTemperature",
			Handler:    _HeatingScheduleService_SetRoomTemperature_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _HeatingScheduleService_GetConfig_Handler,
		},
		{
			MethodName: "GetOverview",
			Handler:    _HeatingScheduleService_GetOverview_Handler,
		},
		{
			MethodName: "SetFrostMode",
			Handler:    _HeatingScheduleService_SetFrostMode_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _HeatingScheduleService_GetSettings_Handler,
		},
		{
			MethodName: "SetSetting",
			Handler:    _HeatingScheduleService_SetSetting_Handler,
		},
		{
			MethodName: "GetDwellingDemand",
			Handler:    _HeatingScheduleService_GetDwellingDemand_Handler,
		},
		{
			MethodName: "Override",
			Handler:    _HeatingScheduleService_Override_Handler,
		},
		{
			MethodName: "CancelOverride",
			Handler:    _HeatingScheduleService_CancelOverride_Handler,
		},
		{
			MethodName: "ForceOff",
			Handler:    _HeatingScheduleService_ForceOff_Handler,
		},
		{
			MethodName: "TempOverride",
			Handler:    _HeatingScheduleService_TempOverride_Handler,
		},
		{
			MethodName: "CancelTempOverride",
			Handler:    _HeatingScheduleService_CancelTempOverride_Handler,
		},
		{
			MethodName: "GetRoomStatus",
			Handler:    _HeatingScheduleService_GetRoomStatus_Handler,
		},
		{
			MethodName: "SetDwellingFlags",
			Handler:    _HeatingScheduleService_SetDwellingFlags_Handler,
		},
		{
			MethodName: "SetActuator",
			Handler:    _HeatingScheduleService_SetActuator_Handler,
		},
		{
			MethodName: "SetIgnoreStatus",
			Handler:    _HeatingScheduleService_SetIgnoreStatus_Handler,
		},
		{
			MethodName: "SetWindowStatus",
			Handler:    _HeatingScheduleService_SetWindowStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/heatingschedule/heatingschedule.proto",
}

func init() {
	proto.RegisterFile("golang.conradwood.net/apis/heatingschedule/heatingschedule.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1738 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x58, 0x5f, 0x6e, 0xdb, 0xcc,
	0x11, 0x07, 0x65, 0x45, 0x96, 0xc6, 0x92, 0x1d, 0x6f, 0x12, 0x83, 0x51, 0x1a, 0x57, 0x65, 0x53,
	0xd7, 0x4d, 0x02, 0xbb, 0xb0, 0xd1, 0xba, 0x28, 0xd0, 0xa4, 0xb1, 0x14, 0xdb, 0x6a, 0x63, 0x2b,
	0xa0, 0x9c, 0xf4, 0xa1, 0x28, 0x0a, 0x46, 0x5c, 0x29, 0x04, 0xa8, 0x5d, 0x95, 0x5c, 0xd9, 0xf1,
	0x43, 0xf3, 0x52, 0xa0, 0xaf, 0x3d, 0x41, 0x6f, 0xd0, 0xf7, 0x1e, 0xa1, 0x17, 0xe8, 0x51, 0xbe,
	0x03, 0x7c, 0xd8, 0x7f, 0x24, 0x97, 0xa4, 0x2c, 0xe7, 0x7b, 0x12, 0x67, 0x76, 0x76, 0x76, 0x76,
	0xfe, 0xfd, 0x66, 0x05, 0xbf, 0x9f, 0xd0, 0xd0, 0x23, 0x93, 0xbd, 0x11, 0x25, 0x91, 0xe7, 0x5f,
	0x53, 0xea, 0xef, 0x11, 0xcc, 0xf6, 0xbd, 0x59, 0x10, 0xef, 0x7f, 0xc6, 0x1e, 0x0b, 0xc8, 0x24,
	0x1e, 0x7d, 0xc6, 0xfe, 0x3c, 0xc4, 0x79, 0x7a, 0x6f, 0x16, 0x51, 0x46, 0xd1, 0x46, 0x8e, 0xdd,
	0xde, 0xbb, 0x45, 0xe5, 0x88, 0x4e, 0xa7, 0x94, 0xa8, 0x1f, 0xa9, 0xa0, 0xdd, 0x99, 0x50, 0x3a,
	0x09, 0xf1, 0xbe, 0xa0, 0x3e, 0xcd, 0xc7, 0xfb, 0x3e, 0x8e, 0x47, 0x51, 0x30, 0x63, 0x34, 0x92,
	0x12, 0xce, 0x57, 0xa8, 0x0e, 0x43, 0xca, 0xd0, 0x3a, 0x54, 0xfa, 0x3d, 0xdb, 0xea, 0x58, 0xbb,
	0x55, 0xb7, 0xd2, 0xef, 0xa1, 0x1f, 0x41, 0x63, 0xc8, 0xbc, 0x88, 0x9d, 0xd1, 0x79, 0x64, 0x57,
	0x3a, 0xd6, 0x6e, 0xcb, 0x4d, 0x19, 0xa8, 0x03, 0x6b, 0x82, 0x38, 0x0f, 0xc8, 0x9c, 0x61, 0x7b,
	0x45, 0xac, 0x67, 0x59, 0x08, 0x41, 0xb5, 0xe7, 0xdd, 0xc4, 0x76, 0xb5, 0xb3, 0xb2, 0xdb, 0x72,
	0xc5, 0x37, 0xe7, 0x5d, 0x78, 0x53, 0x6c, 0xdf, 0xeb, 0x58, 0xbb, 0x0d, 0x57, 0x7c, 0x3b, 0x33,
	0xa8, 0xf3, 0xf3, 0x2f, 0xf1, 0x74, 0x56, 0xb0, 0x61, 0x0b, 0x6a, 0x7c, 0xad, 0xdf, 0x13, 0x06,
	0x54, 0x5d, 0x45, 0x71, 0xbe, 0x4b, 0xe9, 0xb4, 0xdf, 0x13, 0x07, 0x57, 0x5d, 0x45, 0xa1, 0x67,
	0xd0, 0x7a, 0x1f, 0xe1, 0x31, 0x8e, 0x22, 0xec, 0x73, 0x85, 0x76, 0xb5, 0x63, 0xed, 0x5a, 0xae,
	0xc9, 0x74, 0x8e, 0xe4, 0x89, 0xef, 0x82, 0x98, 0xa1, 0x17, 0x70, 0x8f, 0x7f, 0xc7, 0xb6, 0xd5,
	0x59, 0xd9, 0x5d, 0x3b, 0x78, 0xb4, 0x97, 0x8f, 0x03, 0x5f, 0x75, 0xa5, 0x8c, 0xf3, 0x6f, 0x0b,
	0xea, 0xbd, 0x6b, 0x1c, 0x86, 0x01, 0x99, 0x14, 0x6c, 0xd5, 0x77, 0xab, 0xa4, 0x77, 0xe3, 0xda,
	0xb9, 0x65, 0xb1, 0xbd, 0xb2, 0x40, 0x3b, 0x5f, 0x75, 0xa5, 0x0c, 0x72, 0xa0, 0x79, 0x4c, 0x83,
	0x10, 0x47, 0x3d, 0x3c, 0xf5, 0x88, 0x2f, 0x6c, 0xaf, 0xbb, 0x06, 0x8f, 0x07, 0xe5, 0x24, 0xa2,
	0x31, 0x3b, 0xa7, 0xbe, 0xf4, 0x62, 0xdd, 0x4d, 0x19, 0xce, 0x3f, 0x2a, 0x50, 0xe5, 0xba, 0xee,
	0x64, 0xdb, 0x73, 0xb8, 0x3f, 0x0c, 0xc8, 0x24, 0x20, 0x93, 0xae, 0xc7, 0x86, 0x98, 0xc4, 0x34,
	0x52, 0xde, 0x2c, 0xf0, 0x51, 0x1b, 0xea, 0xef, 0xbc, 0x58, 0xc4, 0x48, 0x9c, 0x6a, 0xb9, 0x09,
	0x8d, 0x8e, 0xa0, 0xf1, 0x66, 0xc4, 0xe6, 0x1e, 0xa3, 0x51, 0x6c, 0xd7, 0xc4, 0x3d, 0x1f, 0x17,
	0xee, 0xa9, 0x25, 0xdc, 0x54, 0xd6, 0xbc, 0xcb, 0x6a, 0xee, 0x2e, 0xc8, 0x86, 0xd5, 0xfe, 0x84,
	0xd0, 0x08, 0xfb, 0x76, 0x5d, 0xac, 0x69, 0x12, 0x6d, 0x03, 0xfc, 0x29, 0x20, 0x3e, 0xbd, 0x1e,
	0xcc, 0x30, 0xb1, 0x1b, 0x62, 0x31, 0xc3, 0x71, 0xfe, 0xb9, 0x02, 0x75, 0x7d, 0xca, 0x9d, 0x3c,
	0xb1, 0x05, 0xb5, 0x73, 0x1a, 0x8f, 0x31, 0x13, 0xf7, 0xaf, 0xbb, 0x8a, 0xe2, 0xb7, 0x96, 0x5f,
	0x84, 0x8a, 0x60, 0xb4, 0xdc, 0x84, 0x46, 0x0f, 0xe1, 0xde, 0xfb, 0x80, 0x10, 0x2a, 0xdc, 0xd1,
	0x72, 0x25, 0xc1, 0x43, 0x78, 0x41, 0xa3, 0xa9, 0x17, 0x86, 0x37, 0xc2, 0xb8, 0x9a, 0x0c, 0x61,
	0x96, 0x27, 0xb5, 0x72, 0xa7, 0xf4, 0x7b, 0xe2, 0xd6, 0x55, 0x37, 0xa1, 0xd1, 0x4b, 0xd8, 0x74,
	0x3d, 0x3f, 0x10, 0x9e, 0xc2, 0x7f, 0x9b, 0xe3, 0x98, 0x25, 0xd7, 0x2f, 0x2e, 0xa0, 0x1d, 0x58,
	0xd7, 0xcc, 0x13, 0x2f, 0x08, 0xb1, 0xaf, 0x9c, 0x91, 0xe3, 0x72, 0x87, 0x75, 0xe7, 0x31, 0xa3,
	0xd3, 0x0b, 0xee, 0x69, 0x90, 0x0e, 0x4b, 0x39, 0xdc, 0xea, 0x94, 0xea, 0xf7, 0xec, 0x35, 0x61,
	0x95, 0xc1, 0xe3, 0x3a, 0xfa, 0xf1, 0x9b, 0x39, 0xa3, 0x22, 0x5a, 0x4d, 0xa9, 0x23, 0xe5, 0x70,
	0xbf, 0xf6, 0xe3, 0x01, 0xb1, 0x5b, 0x62, 0x45, 0x7c, 0x3b, 0xc7, 0xb0, 0x3e, 0xc4, 0x22, 0x49,
	0x94, 0xcd, 0x99, 0xba, 0xb5, 0x8c, 0xba, 0xb5, 0x61, 0xf5, 0x02, 0x5f, 0x8b, 0xf4, 0xaa, 0x88,
	0xf4, 0xd2, 0xa4, 0xf3, 0x47, 0x78, 0x30, 0xc4, 0x2c, 0x49, 0x8b, 0x65, 0x8a, 0x8c, 0x9c, 0xaa,
	0xe4, 0xeb, 0xe3, 0x7f, 0x2b, 0xd0, 0x1c, 0x5c, 0xe1, 0xe8, 0x2a, 0xc0, 0xd7, 0xa2, 0x4e, 0x16,
	0xa9, 0x69, 0x43, 0x9d, 0x7f, 0x65, 0x32, 0x25, 0xa1, 0xd1, 0x1e, 0xa0, 0xee, 0x3c, 0x8a, 0x30,
	0x11, 0x37, 0xc3, 0x91, 0xc7, 0xe6, 0x91, 0x6c, 0x80, 0x0d, 0xb7, 0x64, 0x05, 0x1d, 0xc0, 0x43,
	0xa3, 0xfd, 0xe8, 0x1d, 0x55, 0xb1, 0xa3, 0x74, 0x8d, 0xdb, 0xa5, 0x9a, 0x80, 0xac, 0xf1, 0x5a,
	0x59, 0xf9, 0xd7, 0xf2, 0x25, 0xb3, 0x03, 0xeb, 0x97, 0xee, 0xc7, 0x0f, 0xc4, 0xbb, 0xf2, 0x82,
	0xd0, 0xfb, 0x14, 0xea, 0xaa, 0xca, 0x71, 0x79, 0xbc, 0x87, 0x9f, 0x69, 0xc4, 0xce, 0x71, 0x1c,
	0x7b, 0x13, 0x2c, 0x12, 0xac, 0xe1, 0x1a, 0x3c, 0xde, 0x49, 0x7b, 0x98, 0x79, 0x41, 0xa8, 0x85,
	0x1a, 0x42, 0xc8, 0x64, 0xf2, 0x7c, 0x95, 0x1d, 0x22, 0x7b, 0xa8, 0x4c, 0xb0, 0xe2, 0x02, 0xfa,
	0x85, 0xec, 0x4e, 0x22, 0xbf, 0x16, 0x36, 0x43, 0xd9, 0xc0, 0xcc, 0x1a, 0x6f, 0x16, 0x6a, 0xfc,
	0xbf, 0x15, 0xa8, 0xeb, 0x48, 0xa2, 0x43, 0xdd, 0x65, 0x65, 0x0f, 0x7f, 0x5a, 0x50, 0x9c, 0x8d,
	0xb9, 0xee, 0xb6, 0xbb, 0xb0, 0x71, 0x26, 0xc5, 0x86, 0x37, 0x31, 0xc3, 0xd3, 0x01, 0x51, 0xf9,
	0x92, 0x67, 0xf3, 0x64, 0xe0, 0xed, 0x5f, 0x24, 0x83, 0x0c, 0x73, 0x42, 0xf3, 0xb5, 0x5e, 0x10,
	0xf3, 0xdb, 0xe9, 0x7e, 0x9d, 0xd0, 0x3c, 0x51, 0x06, 0x73, 0xe6, 0x53, 0x1a, 0x65, 0xc3, 0x2e,
	0xdb, 0x67, 0xc9, 0xca, 0x92, 0xe0, 0x6e, 0x03, 0x48, 0x8b, 0x2e, 0x83, 0xa9, 0x0c, 0x6c, 0xcb,
	0xcd, 0x70, 0x78, 0xf0, 0x53, 0xea, 0x12, 0x7f, 0x61, 0x2a, 0xac, 0x39, 0xae, 0x73, 0x0a, 0x4d,
	0x0d, 0x61, 0x02, 0x00, 0x8f, 0xa0, 0xa1, 0x69, 0xed, 0xc0, 0x62, 0xfb, 0xd6, 0x12, 0x6e, 0x2a,
	0xeb, 0xfc, 0x15, 0x36, 0x86, 0x98, 0x09, 0x31, 0x5d, 0x95, 0xdb, 0x00, 0x7a, 0x3d, 0x29, 0xa9,
	0x0c, 0x87, 0xa7, 0x4b, 0x9f, 0x8c, 0xc2, 0xb9, 0x8f, 0x2f, 0x28, 0x51, 0xa5, 0xa2, 0xbc, 0x5e,
	0x5c, 0x70, 0xa6, 0xd0, 0x14, 0xe0, 0x4b, 0xe9, 0x54, 0x00, 0x8d, 0x4e, 0x1f, 0x6b, 0x79, 0xfa,
	0x2c, 0xaa, 0x39, 0xd9, 0x5c, 0x4a, 0xd7, 0x9c, 0xff, 0x58, 0x70, 0x5f, 0x0f, 0x22, 0x8a, 0x17,
	0xf3, 0x33, 0x39, 0x6f, 0xe1, 0x99, 0xc2, 0x40, 0x39, 0x3f, 0xf1, 0x54, 0xf0, 0x6e, 0x88, 0x37,
	0xc5, 0xb1, 0xee, 0x19, 0x9a, 0x4e, 0x66, 0x29, 0x11, 0x3b, 0x99, 0x43, 0x29, 0x23, 0xcd, 0xdf,
	0xea, 0x82, 0xfc, 0xcd, 0xba, 0x41, 0xe5, 0xaf, 0xf3, 0x15, 0xea, 0xda, 0xfd, 0xdf, 0x34, 0xc4,
	0xa0, 0xb7, 0xd0, 0xcc, 0x5e, 0xd1, 0xae, 0x88, 0x3d, 0x3f, 0x29, 0xdd, 0x93, 0x15, 0x74, 0x8d,
	0x6d, 0xce, 0x18, 0xd0, 0x10, 0xb3, 0x7c, 0x06, 0xa4, 0x03, 0x9b, 0xb5, 0x60, 0x60, 0xab, 0x18,
	0x8d, 0xb6, 0x03, 0x6b, 0xf9, 0x2e, 0x6a, 0xb9, 0x59, 0x96, 0x73, 0x04, 0x8f, 0x74, 0x06, 0xc9,
	0x26, 0x78, 0xc7, 0x64, 0x73, 0xce, 0x00, 0x06, 0xe3, 0xf1, 0x5d, 0x53, 0xb3, 0x0d, 0xf5, 0x13,
	0x1a, 0x8d, 0xf0, 0x60, 0x3c, 0x56, 0x19, 0x99, 0xd0, 0xce, 0x2f, 0x61, 0x2b, 0x6f, 0x42, 0x3c,
	0xa3, 0x24, 0xce, 0xf6, 0x69, 0x2b, 0xdb, 0xa7, 0x9d, 0x7f, 0x59, 0xb0, 0xc1, 0x9b, 0x4e, 0x14,
	0xa4, 0x90, 0x75, 0x07, 0x0b, 0x2e, 0xa9, 0x31, 0xed, 0x26, 0x34, 0x2f, 0xee, 0x2e, 0xbd, 0xc2,
	0x11, 0xf6, 0x25, 0x43, 0x0e, 0x94, 0x55, 0x37, 0xc7, 0xe5, 0x38, 0xfa, 0x96, 0xf8, 0x22, 0xcb,
	0xe4, 0xc0, 0xa2, 0x49, 0xee, 0xc6, 0xae, 0x47, 0x46, 0x38, 0xfc, 0x46, 0xb3, 0x9c, 0xbf, 0xc3,
	0x03, 0x1e, 0x8e, 0xfc, 0xb6, 0x45, 0xc8, 0x89, 0xa0, 0x9a, 0x81, 0x71, 0xf1, 0xcd, 0x65, 0xdf,
	0x7e, 0x99, 0x05, 0xd1, 0x8d, 0x7a, 0x26, 0x28, 0x8a, 0xe3, 0x90, 0x8b, 0x43, 0x8f, 0x05, 0x57,
	0x38, 0x19, 0xd6, 0xeb, 0xae, 0xc1, 0x73, 0x0e, 0xe1, 0xb1, 0xb4, 0xfb, 0x1b, 0x8c, 0x70, 0xfe,
	0x6f, 0x01, 0xf0, 0xcf, 0x21, 0xf3, 0xd8, 0x3c, 0x2e, 0xbe, 0x0a, 0x2a, 0x25, 0xaf, 0x82, 0x5b,
	0x70, 0xdd, 0x2a, 0xc5, 0xf5, 0xec, 0x8c, 0x50, 0xcd, 0xcd, 0x08, 0x3f, 0x0c, 0xbf, 0x4d, 0xd0,
	0x5b, 0x2d, 0x80, 0xde, 0x0b, 0xd8, 0x4c, 0x6f, 0xb5, 0xcc, 0x07, 0x1f, 0xd2, 0xba, 0x89, 0x4f,
	0x42, 0xef, 0xee, 0x4d, 0xfa, 0xf6, 0x11, 0xea, 0x2f, 0xb0, 0x91, 0xcc, 0xf2, 0xa9, 0x42, 0xcd,
	0x4a, 0x15, 0xa6, 0x1c, 0xee, 0xa8, 0x64, 0x70, 0x54, 0xa5, 0x95, 0x8c, 0x8d, 0xeb, 0x50, 0x19,
	0x10, 0x35, 0x76, 0x57, 0x06, 0xc4, 0x79, 0x0d, 0x2d, 0x39, 0xe6, 0x2f, 0xcb, 0xb3, 0x2d, 0xa8,
	0x49, 0x41, 0xa5, 0x52, 0x51, 0xce, 0x10, 0x36, 0x3f, 0xcc, 0x7c, 0x8f, 0x61, 0x81, 0x06, 0x4a,
	0xc9, 0x5d, 0x1e, 0x01, 0x1c, 0xe5, 0xc5, 0xc4, 0x92, 0x3c, 0x2a, 0x13, 0xda, 0x79, 0x05, 0x0f,
	0xcd, 0xf4, 0x53, 0xe5, 0xbf, 0x03, 0xeb, 0x6a, 0x4e, 0xd5, 0xe9, 0x62, 0x89, 0x74, 0xc9, 0x71,
	0x9d, 0x2e, 0xb4, 0x64, 0x18, 0x33, 0xb7, 0xea, 0xc7, 0x22, 0xca, 0xaa, 0x6f, 0x48, 0xca, 0x78,
	0x1b, 0x54, 0xcc, 0xb7, 0xc1, 0xc1, 0x77, 0x00, 0x5b, 0x7a, 0x34, 0x51, 0x3d, 0x7a, 0xc8, 0xc7,
	0x9a, 0x11, 0x46, 0xaf, 0x00, 0xd2, 0x4b, 0x23, 0xa7, 0xd0, 0xca, 0x0b, 0x1e, 0x69, 0x37, 0xf7,
	0xd4, 0xbf, 0x04, 0x1f, 0x69, 0xe0, 0xa3, 0x03, 0x58, 0x53, 0x09, 0x2e, 0x90, 0xcc, 0x58, 0x6c,
	0x97, 0xa3, 0x09, 0x3a, 0x84, 0xfa, 0x29, 0x66, 0x12, 0x52, 0xcc, 0x0d, 0x8f, 0x4b, 0x37, 0x88,
	0x61, 0xa3, 0x2b, 0x40, 0x43, 0x43, 0x99, 0xae, 0xa4, 0x1f, 0x17, 0x37, 0x18, 0xcf, 0x86, 0x9c,
	0xb5, 0xbf, 0x81, 0xc6, 0x29, 0x66, 0x5d, 0x4a, 0xc6, 0xc1, 0x24, 0x77, 0xf4, 0xd3, 0x85, 0x93,
	0x8b, 0x38, 0xfe, 0xd7, 0xb0, 0x76, 0x8a, 0x59, 0x32, 0x37, 0x2e, 0x33, 0x3b, 0x11, 0x3c, 0x86,
	0x66, 0xf6, 0x11, 0x82, 0x9e, 0x95, 0x19, 0x9c, 0x7f, 0xa3, 0xe4, 0xac, 0xfe, 0x83, 0x38, 0x3b,
	0x81, 0xec, 0x4e, 0x99, 0x8a, 0x2c, 0x94, 0x96, 0xb9, 0x51, 0x6f, 0x7e, 0x0d, 0x90, 0x62, 0x2f,
	0xfa, 0x69, 0x99, 0x60, 0x5e, 0x9b, 0x69, 0x8c, 0x0f, 0x9b, 0xa7, 0x98, 0x99, 0xa0, 0x86, 0x76,
	0x16, 0x3a, 0xcf, 0x00, 0xde, 0xf6, 0xcf, 0x97, 0xca, 0xa9, 0xf2, 0xf8, 0xad, 0x9c, 0xd1, 0x79,
	0xc9, 0x94, 0xdc, 0x37, 0xd7, 0xcc, 0x73, 0x16, 0x9e, 0xc0, 0xba, 0x89, 0x57, 0x25, 0xe6, 0x95,
	0x02, 0x5a, 0x4e, 0xcf, 0xaf, 0x52, 0x5c, 0x47, 0x4f, 0x8a, 0x36, 0x24, 0x03, 0x42, 0x6e, 0xdb,
	0x9f, 0xe5, 0x90, 0x94, 0x1c, 0x5e, 0x8c, 0x78, 0x09, 0x1e, 0xb5, 0x7f, 0xb6, 0x44, 0x4a, 0xf9,
	0xe5, 0x02, 0x50, 0x11, 0xd3, 0xd0, 0xf3, 0x05, 0xf7, 0x2b, 0x3b, 0xc8, 0x34, 0xf6, 0x3d, 0xb4,
	0x4e, 0x65, 0x55, 0x29, 0xc0, 0x73, 0x4a, 0x67, 0x63, 0x03, 0x37, 0xda, 0x4f, 0x6e, 0x91, 0x41,
	0x67, 0x70, 0x7f, 0x98, 0xe6, 0x87, 0x80, 0x8f, 0x5b, 0xd2, 0xc3, 0xc0, 0x97, 0x9c, 0x6d, 0xbf,
	0x83, 0xb5, 0x21, 0x66, 0xc9, 0xdf, 0x31, 0x9d, 0xc5, 0xff, 0x0c, 0x95, 0x6e, 0x7f, 0x2d, 0x1e,
	0x19, 0xb2, 0xb7, 0x2b, 0xdb, 0xb6, 0x0b, 0x2a, 0x0c, 0xc4, 0x28, 0x55, 0x20, 0xbb, 0xef, 0x42,
	0x05, 0x46, 0x73, 0x36, 0x15, 0x1c, 0xbf, 0x84, 0xe7, 0x04, 0xb3, 0xec, 0xff, 0xad, 0xea, 0x1f,
	0x58, 0x6f, 0x16, 0xc4, 0x79, 0x4d, 0x9f, 0x6a, 0xe2, 0x3f, 0xd5, 0xc3, 0xef, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x31, 0xde, 0x68, 0xe7, 0xfa, 0x15, 0x00, 0x00,
}
