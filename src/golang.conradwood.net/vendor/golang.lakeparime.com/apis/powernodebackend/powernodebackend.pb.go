// Code generated by protoc-gen-go.
// source: golang.lakeparime.com/apis/powernodebackend/powernodebackend.proto
// DO NOT EDIT!

/*
Package powernodebackend is a generated protocol buffer package.

It is generated from these files:
	golang.lakeparime.com/apis/powernodebackend/powernodebackend.proto

It has these top-level messages:
	PowerNodeID
*/
package powernodebackend

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import powernode "golang.lakeparime.com/apis/powernode"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// identifies an instance of powernode
type PowerNodeID struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *PowerNodeID) Reset()                    { *m = PowerNodeID{} }
func (m *PowerNodeID) String() string            { return proto.CompactTextString(m) }
func (*PowerNodeID) ProtoMessage()               {}
func (*PowerNodeID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PowerNodeID) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func init() {
	proto.RegisterType((*PowerNodeID)(nil), "powernodebackend.PowerNodeID")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PowerNodeBackEnd service

type PowerNodeBackEndClient interface {
	// proxies miner's state
	GetMinerStates(ctx context.Context, in *PowerNodeID, opts ...grpc.CallOption) (*powernode.MinerStates, error)
	// proxies powernode's state
	GetCurrentState(ctx context.Context, in *PowerNodeID, opts ...grpc.CallOption) (*powernode.CurrentState, error)
}

type powerNodeBackEndClient struct {
	cc *grpc.ClientConn
}

func NewPowerNodeBackEndClient(cc *grpc.ClientConn) PowerNodeBackEndClient {
	return &powerNodeBackEndClient{cc}
}

func (c *powerNodeBackEndClient) GetMinerStates(ctx context.Context, in *PowerNodeID, opts ...grpc.CallOption) (*powernode.MinerStates, error) {
	out := new(powernode.MinerStates)
	err := grpc.Invoke(ctx, "/powernodebackend.PowerNodeBackEnd/GetMinerStates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerNodeBackEndClient) GetCurrentState(ctx context.Context, in *PowerNodeID, opts ...grpc.CallOption) (*powernode.CurrentState, error) {
	out := new(powernode.CurrentState)
	err := grpc.Invoke(ctx, "/powernodebackend.PowerNodeBackEnd/GetCurrentState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PowerNodeBackEnd service

type PowerNodeBackEndServer interface {
	// proxies miner's state
	GetMinerStates(context.Context, *PowerNodeID) (*powernode.MinerStates, error)
	// proxies powernode's state
	GetCurrentState(context.Context, *PowerNodeID) (*powernode.CurrentState, error)
}

func RegisterPowerNodeBackEndServer(s *grpc.Server, srv PowerNodeBackEndServer) {
	s.RegisterService(&_PowerNodeBackEnd_serviceDesc, srv)
}

func _PowerNodeBackEnd_GetMinerStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerNodeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerNodeBackEndServer).GetMinerStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powernodebackend.PowerNodeBackEnd/GetMinerStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerNodeBackEndServer).GetMinerStates(ctx, req.(*PowerNodeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerNodeBackEnd_GetCurrentState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerNodeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerNodeBackEndServer).GetCurrentState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/powernodebackend.PowerNodeBackEnd/GetCurrentState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerNodeBackEndServer).GetCurrentState(ctx, req.(*PowerNodeID))
	}
	return interceptor(ctx, in, info, handler)
}

var _PowerNodeBackEnd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "powernodebackend.PowerNodeBackEnd",
	HandlerType: (*PowerNodeBackEndServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMinerStates",
			Handler:    _PowerNodeBackEnd_GetMinerStates_Handler,
		},
		{
			MethodName: "GetCurrentState",
			Handler:    _PowerNodeBackEnd_GetCurrentState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.lakeparime.com/apis/powernodebackend/powernodebackend.proto",
}

func init() {
	proto.RegisterFile("golang.lakeparime.com/apis/powernodebackend/powernodebackend.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x72, 0x4a, 0xcf, 0xcf, 0x49,
	0xcc, 0x4b, 0xd7, 0xcb, 0x49, 0xcc, 0x4e, 0x2d, 0x48, 0x2c, 0xca, 0xcc, 0x4d, 0xd5, 0x4b, 0xce,
	0xcf, 0xd5, 0x4f, 0x2c, 0xc8, 0x2c, 0xd6, 0x2f, 0xc8, 0x2f, 0x4f, 0x2d, 0xca, 0xcb, 0x4f, 0x49,
	0x4d, 0x4a, 0x4c, 0xce, 0x4e, 0xcd, 0x4b, 0xc1, 0x10, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x12, 0x40, 0x17, 0x97, 0x32, 0x21, 0xc6, 0x54, 0x04, 0x0b, 0x62, 0x8e, 0x92, 0x2c, 0x17, 0x77,
	0x00, 0x48, 0xc8, 0x2f, 0x3f, 0x25, 0xd5, 0xd3, 0x45, 0x88, 0x8f, 0x8b, 0xc9, 0xd3, 0x45, 0x82,
	0x51, 0x81, 0x51, 0x83, 0x33, 0x88, 0xc9, 0xd3, 0xc5, 0x68, 0x19, 0x23, 0x97, 0x00, 0x5c, 0xde,
	0x29, 0x31, 0x39, 0xdb, 0x35, 0x2f, 0x45, 0xc8, 0x9d, 0x8b, 0xcf, 0x3d, 0xb5, 0xc4, 0x37, 0x33,
	0x2f, 0xb5, 0x28, 0xb8, 0x24, 0xb1, 0x24, 0xb5, 0x58, 0x48, 0x56, 0x0f, 0xc3, 0x99, 0x48, 0xa6,
	0x4a, 0x89, 0x21, 0xa4, 0xf5, 0x90, 0xb5, 0x79, 0x72, 0xf1, 0xbb, 0xa7, 0x96, 0x38, 0x97, 0x16,
	0x15, 0xa5, 0xe6, 0x95, 0x80, 0xc5, 0x08, 0x99, 0x24, 0x8e, 0x64, 0x12, 0xb2, 0x3e, 0x27, 0x35,
	0x2e, 0x95, 0xe4, 0xfc, 0x5c, 0x64, 0xcf, 0x83, 0x3c, 0x8e, 0x61, 0x58, 0x12, 0x1b, 0xd8, 0xdb,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x39, 0xa2, 0xd5, 0x5c, 0x84, 0x01, 0x00, 0x00,
}
