// Code generated by protoc-gen-go.
// source: golang.lakeparime.info/apis/csvfileserver/csvfileserver.proto
// DO NOT EDIT!

/*
Package csvfileserver is a generated protocol buffer package.

It is generated from these files:
	golang.lakeparime.info/apis/csvfileserver/csvfileserver.proto

It has these top-level messages:
*/
package csvfileserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import h2gproxy "golang.conradwood.net/apis/h2gproxy"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CSVFileServer service

type CSVFileServerClient interface {
	// download a csv file
	StreamHTTP(ctx context.Context, in *h2gproxy.StreamRequest, opts ...grpc.CallOption) (CSVFileServer_StreamHTTPClient, error)
}

type cSVFileServerClient struct {
	cc *grpc.ClientConn
}

func NewCSVFileServerClient(cc *grpc.ClientConn) CSVFileServerClient {
	return &cSVFileServerClient{cc}
}

func (c *cSVFileServerClient) StreamHTTP(ctx context.Context, in *h2gproxy.StreamRequest, opts ...grpc.CallOption) (CSVFileServer_StreamHTTPClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CSVFileServer_serviceDesc.Streams[0], c.cc, "/csvfileserver.CSVFileServer/StreamHTTP", opts...)
	if err != nil {
		return nil, err
	}
	x := &cSVFileServerStreamHTTPClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CSVFileServer_StreamHTTPClient interface {
	Recv() (*h2gproxy.StreamDataResponse, error)
	grpc.ClientStream
}

type cSVFileServerStreamHTTPClient struct {
	grpc.ClientStream
}

func (x *cSVFileServerStreamHTTPClient) Recv() (*h2gproxy.StreamDataResponse, error) {
	m := new(h2gproxy.StreamDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CSVFileServer service

type CSVFileServerServer interface {
	// download a csv file
	StreamHTTP(*h2gproxy.StreamRequest, CSVFileServer_StreamHTTPServer) error
}

func RegisterCSVFileServerServer(s *grpc.Server, srv CSVFileServerServer) {
	s.RegisterService(&_CSVFileServer_serviceDesc, srv)
}

func _CSVFileServer_StreamHTTP_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(h2gproxy.StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CSVFileServerServer).StreamHTTP(m, &cSVFileServerStreamHTTPServer{stream})
}

type CSVFileServer_StreamHTTPServer interface {
	Send(*h2gproxy.StreamDataResponse) error
	grpc.ServerStream
}

type cSVFileServerStreamHTTPServer struct {
	grpc.ServerStream
}

func (x *cSVFileServerStreamHTTPServer) Send(m *h2gproxy.StreamDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _CSVFileServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "csvfileserver.CSVFileServer",
	HandlerType: (*CSVFileServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamHTTP",
			Handler:       _CSVFileServer_StreamHTTP_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "golang.lakeparime.info/apis/csvfileserver/csvfileserver.proto",
}

func init() {
	proto.RegisterFile("golang.lakeparime.info/apis/csvfileserver/csvfileserver.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x8f, 0xbf, 0x8f, 0x82, 0x40,
	0x10, 0x85, 0x73, 0xcd, 0x15, 0x9b, 0xd0, 0xd0, 0x5c, 0x42, 0xae, 0xb9, 0x5c, 0xbf, 0x18, 0xac,
	0x6d, 0xfc, 0x15, 0x4b, 0x03, 0x84, 0x7e, 0x84, 0x01, 0x37, 0x2e, 0x3b, 0xeb, 0xec, 0x8a, 0xfa,
	0xdf, 0x1b, 0xc1, 0x10, 0xb1, 0x9b, 0x79, 0x33, 0xf9, 0xf2, 0x3d, 0xb1, 0x68, 0x48, 0x83, 0x69,
	0xa4, 0x86, 0x13, 0x5a, 0x60, 0xd5, 0xa2, 0x54, 0xa6, 0xa6, 0x18, 0xac, 0x72, 0x71, 0xe9, 0xba,
	0x5a, 0x69, 0x74, 0xc8, 0x1d, 0xf2, 0x74, 0x93, 0x96, 0xc9, 0x53, 0x18, 0x4c, 0xc2, 0x28, 0x79,
	0xd1, 0x4a, 0x32, 0x0c, 0xd5, 0x95, 0xa8, 0x92, 0x06, 0xfd, 0x00, 0x3b, 0x26, 0x8d, 0x65, 0xba,
	0xdd, 0xc7, 0x61, 0x40, 0x24, 0x85, 0x08, 0x56, 0x59, 0xb1, 0x55, 0x1a, 0xb3, 0x1e, 0x12, 0x6e,
	0x84, 0xc8, 0x3c, 0x23, 0xb4, 0xbb, 0x3c, 0xdf, 0x87, 0x3f, 0x72, 0xfc, 0x1f, 0xd2, 0x14, 0xcf,
	0x17, 0x74, 0x3e, 0xfa, 0xfd, 0x3c, 0xac, 0xc1, 0x43, 0x8a, 0xce, 0x92, 0x71, 0x38, 0xfb, 0x5a,
	0xfe, 0x8b, 0xbf, 0x92, 0xda, 0xf7, 0x62, 0x4f, 0x0d, 0x39, 0x11, 0x3e, 0x7c, 0xf7, 0x0e, 0xf3,
	0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0x37, 0x23, 0xd0, 0x4f, 0x07, 0x01, 0x00, 0x00,
}
