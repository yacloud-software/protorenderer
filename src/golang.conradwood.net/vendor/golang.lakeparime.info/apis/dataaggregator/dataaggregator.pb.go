// Code generated by protoc-gen-go.
// source: golang.lakeparime.info/apis/dataaggregator/dataaggregator.proto
// DO NOT EDIT!

/*
Package dataaggregator is a generated protocol buffer package.

It is generated from these files:
	golang.lakeparime.info/apis/dataaggregator/dataaggregator.proto

It has these top-level messages:
	TimeRange
	OpsTimeseries
	OpstimeSeries
*/
package dataaggregator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// would like to use that - but has syntax errors
// import "golang.lakeparime.info/apis/stdprotos";
type TimeRange struct {
	Start uint32 `protobuf:"varint,1,opt,name=Start" json:"Start,omitempty"`
	End   uint32 `protobuf:"varint,2,opt,name=End" json:"End,omitempty"`
}

func (m *TimeRange) Reset()                    { *m = TimeRange{} }
func (m *TimeRange) String() string            { return proto.CompactTextString(m) }
func (*TimeRange) ProtoMessage()               {}
func (*TimeRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TimeRange) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *TimeRange) GetEnd() uint32 {
	if m != nil {
		return m.End
	}
	return 0
}

// this is streamed, so it is a single proto reflecting a single timeestamp
// which forms this timeseries: https://docs.google.com/document/d/1lDAe952n-3Hqkcu9C8Bb6qLgxV5iMdRxKEJF_nfsLfY/edit#
type OpsTimeseries struct {
	Timestamp                 uint32  `protobuf:"varint,1,opt,name=Timestamp" json:"Timestamp,omitempty"`
	PowerTargetInWwatts       float64 `protobuf:"fixed64,2,opt,name=PowerTargetInWwatts" json:"PowerTargetInWwatts,omitempty"`
	M1CurrentSummationInWatts float64 `protobuf:"fixed64,3,opt,name=M1CurrentSummationInWatts" json:"M1CurrentSummationInWatts,omitempty"`
	MaxExportInWatts          float64 `protobuf:"fixed64,4,opt,name=MaxExportInWatts" json:"MaxExportInWatts,omitempty"`
	AvailablePowerInWatts     float64 `protobuf:"fixed64,5,opt,name=AvailablePowerInWatts" json:"AvailablePowerInWatts,omitempty"`
	M2CurrentSummationInWatts float64 `protobuf:"fixed64,6,opt,name=M2CurrentSummationInWatts" json:"M2CurrentSummationInWatts,omitempty"`
	ImportInWatts             float64 `protobuf:"fixed64,7,opt,name=ImportInWatts" json:"ImportInWatts,omitempty"`
	CLCStatus                 int64   `protobuf:"varint,8,opt,name=CLCStatus" json:"CLCStatus,omitempty"`
}

func (m *OpsTimeseries) Reset()                    { *m = OpsTimeseries{} }
func (m *OpsTimeseries) String() string            { return proto.CompactTextString(m) }
func (*OpsTimeseries) ProtoMessage()               {}
func (*OpsTimeseries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OpsTimeseries) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *OpsTimeseries) GetPowerTargetInWwatts() float64 {
	if m != nil {
		return m.PowerTargetInWwatts
	}
	return 0
}

func (m *OpsTimeseries) GetM1CurrentSummationInWatts() float64 {
	if m != nil {
		return m.M1CurrentSummationInWatts
	}
	return 0
}

func (m *OpsTimeseries) GetMaxExportInWatts() float64 {
	if m != nil {
		return m.MaxExportInWatts
	}
	return 0
}

func (m *OpsTimeseries) GetAvailablePowerInWatts() float64 {
	if m != nil {
		return m.AvailablePowerInWatts
	}
	return 0
}

func (m *OpsTimeseries) GetM2CurrentSummationInWatts() float64 {
	if m != nil {
		return m.M2CurrentSummationInWatts
	}
	return 0
}

func (m *OpsTimeseries) GetImportInWatts() float64 {
	if m != nil {
		return m.ImportInWatts
	}
	return 0
}

func (m *OpsTimeseries) GetCLCStatus() int64 {
	if m != nil {
		return m.CLCStatus
	}
	return 0
}

type OpstimeSeries struct {
}

func (m *OpstimeSeries) Reset()                    { *m = OpstimeSeries{} }
func (m *OpstimeSeries) String() string            { return proto.CompactTextString(m) }
func (*OpstimeSeries) ProtoMessage()               {}
func (*OpstimeSeries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*TimeRange)(nil), "dataaggregator.TimeRange")
	proto.RegisterType((*OpsTimeseries)(nil), "dataaggregator.OpsTimeseries")
	proto.RegisterType((*OpstimeSeries)(nil), "dataaggregator.OpstimeSeries")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DataAggregator service

type DataAggregatorClient interface {
	// this is operational data as defined here: https://docs.google.com/document/d/1lDAe952n-3Hqkcu9C8Bb6qLgxV5iMdRxKEJF_nfsLfY/edit#
	GetOpsData(ctx context.Context, in *TimeRange, opts ...grpc.CallOption) (DataAggregator_GetOpsDataClient, error)
}

type dataAggregatorClient struct {
	cc *grpc.ClientConn
}

func NewDataAggregatorClient(cc *grpc.ClientConn) DataAggregatorClient {
	return &dataAggregatorClient{cc}
}

func (c *dataAggregatorClient) GetOpsData(ctx context.Context, in *TimeRange, opts ...grpc.CallOption) (DataAggregator_GetOpsDataClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DataAggregator_serviceDesc.Streams[0], c.cc, "/dataaggregator.DataAggregator/GetOpsData", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataAggregatorGetOpsDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataAggregator_GetOpsDataClient interface {
	Recv() (*OpsTimeseries, error)
	grpc.ClientStream
}

type dataAggregatorGetOpsDataClient struct {
	grpc.ClientStream
}

func (x *dataAggregatorGetOpsDataClient) Recv() (*OpsTimeseries, error) {
	m := new(OpsTimeseries)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DataAggregator service

type DataAggregatorServer interface {
	// this is operational data as defined here: https://docs.google.com/document/d/1lDAe952n-3Hqkcu9C8Bb6qLgxV5iMdRxKEJF_nfsLfY/edit#
	GetOpsData(*TimeRange, DataAggregator_GetOpsDataServer) error
}

func RegisterDataAggregatorServer(s *grpc.Server, srv DataAggregatorServer) {
	s.RegisterService(&_DataAggregator_serviceDesc, srv)
}

func _DataAggregator_GetOpsData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TimeRange)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataAggregatorServer).GetOpsData(m, &dataAggregatorGetOpsDataServer{stream})
}

type DataAggregator_GetOpsDataServer interface {
	Send(*OpsTimeseries) error
	grpc.ServerStream
}

type dataAggregatorGetOpsDataServer struct {
	grpc.ServerStream
}

func (x *dataAggregatorGetOpsDataServer) Send(m *OpsTimeseries) error {
	return x.ServerStream.SendMsg(m)
}

var _DataAggregator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dataaggregator.DataAggregator",
	HandlerType: (*DataAggregatorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOpsData",
			Handler:       _DataAggregator_GetOpsData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "golang.lakeparime.info/apis/dataaggregator/dataaggregator.proto",
}

func init() {
	proto.RegisterFile("golang.lakeparime.info/apis/dataaggregator/dataaggregator.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x92, 0x5f, 0x8b, 0xda, 0x40,
	0x14, 0xc5, 0x49, 0x53, 0x6d, 0x3b, 0xa0, 0x95, 0x69, 0x0b, 0x2a, 0x2d, 0x48, 0xf0, 0x41, 0xfa,
	0x10, 0xad, 0xf6, 0xb1, 0x50, 0xac, 0x95, 0x56, 0xa8, 0x58, 0x12, 0x41, 0xd8, 0xb7, 0xab, 0x99,
	0x0d, 0xc3, 0x66, 0x66, 0xc2, 0xcc, 0x75, 0xf5, 0x75, 0xbf, 0xf9, 0x92, 0x49, 0xfc, 0x97, 0xd5,
	0xa7, 0x64, 0xce, 0x9d, 0xdf, 0xe5, 0x30, 0xe7, 0x90, 0x9f, 0xb1, 0x4a, 0x40, 0xc6, 0x7e, 0x02,
	0x0f, 0x2c, 0x05, 0xcd, 0x05, 0xf3, 0xb9, 0xbc, 0x57, 0x7d, 0x48, 0xb9, 0xe9, 0x47, 0x80, 0x00,
	0x71, 0xac, 0x59, 0x0c, 0xa8, 0x74, 0xe9, 0xe8, 0xa7, 0x5a, 0xa1, 0xa2, 0xf5, 0x4b, 0xb5, 0xed,
	0x17, 0x0b, 0x37, 0x4a, 0x6a, 0x88, 0x76, 0x4a, 0x45, 0xbe, 0x64, 0x98, 0xef, 0xdb, 0x28, 0x21,
	0x94, 0x2c, 0x3e, 0x39, 0xef, 0x8d, 0xc8, 0xbb, 0x25, 0x17, 0x2c, 0x00, 0x19, 0x33, 0xfa, 0x91,
	0x54, 0x42, 0x04, 0x8d, 0x4d, 0xa7, 0xe3, 0xf4, 0x6a, 0x41, 0x7e, 0xa0, 0x0d, 0xe2, 0x4e, 0x65,
	0xd4, 0x7c, 0x65, 0xb5, 0xec, 0xd7, 0x7b, 0x72, 0x49, 0x6d, 0x91, 0x9a, 0x0c, 0x34, 0x4c, 0x73,
	0x66, 0xe8, 0xe7, 0x7c, 0x8d, 0x41, 0x10, 0x69, 0x41, 0x9f, 0x04, 0x3a, 0x20, 0x1f, 0xfe, 0xab,
	0x1d, 0xd3, 0x4b, 0xd0, 0x31, 0xc3, 0x99, 0x5c, 0xed, 0x00, 0xd1, 0xd8, 0x8d, 0x4e, 0x70, 0x6d,
	0x44, 0x7f, 0x90, 0xd6, 0xfc, 0xdb, 0x64, 0xab, 0x35, 0x93, 0x18, 0x6e, 0x85, 0x00, 0xe4, 0x4a,
	0xce, 0xe4, 0xca, 0x72, 0xae, 0xe5, 0x6e, 0x5f, 0xa0, 0x5f, 0x49, 0x63, 0x0e, 0xfb, 0xe9, 0x3e,
	0x55, 0x1a, 0x0f, 0xd0, 0x6b, 0x0b, 0xbd, 0xd0, 0xe9, 0x77, 0xf2, 0x69, 0xfc, 0x08, 0x3c, 0x81,
	0x75, 0xc2, 0xac, 0x93, 0x03, 0x50, 0xb1, 0xc0, 0xf5, 0xa1, 0xf5, 0x37, 0xbc, 0xe5, 0xaf, 0x5a,
	0xf8, 0xbb, 0x75, 0x81, 0x76, 0x49, 0x6d, 0x26, 0xce, 0xcd, 0xbd, 0xb1, 0xc4, 0xa5, 0x98, 0xbd,
	0xe9, 0xe4, 0xdf, 0x24, 0x44, 0xc0, 0xad, 0x69, 0xbe, 0xed, 0x38, 0x3d, 0x37, 0x38, 0x09, 0xde,
	0x7b, 0x1b, 0x01, 0x72, 0xc1, 0x42, 0x1b, 0xc1, 0xf0, 0x8e, 0xd4, 0x7f, 0x03, 0xc2, 0xf8, 0xd8,
	0x05, 0xfa, 0x97, 0x90, 0x3f, 0x0c, 0x17, 0xa9, 0xc9, 0x74, 0xda, 0xf2, 0x4b, 0x05, 0x3a, 0xe6,
	0xde, 0xfe, 0x52, 0x1e, 0x5d, 0x84, 0x3b, 0x70, 0x7e, 0x75, 0x89, 0xb7, 0x51, 0xe2, 0xbc, 0xa5,
	0x59, 0xa1, 0x4a, 0xd4, 0xba, 0x6a, 0x2b, 0x35, 0x7a, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xdd, 0xd6,
	0xd1, 0xa6, 0xd5, 0x02, 0x00, 0x00,
}
