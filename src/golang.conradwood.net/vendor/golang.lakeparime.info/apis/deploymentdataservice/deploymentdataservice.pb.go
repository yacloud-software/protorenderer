// Code generated by protoc-gen-go.
// source: golang.lakeparime.info/apis/deploymentdataservice/deploymentdataservice.proto
// DO NOT EDIT!

/*
Package deploymentdataservice is a generated protocol buffer package.

It is generated from these files:
	golang.lakeparime.info/apis/deploymentdataservice/deploymentdataservice.proto

It has these top-level messages:
	PingResponse
	Deployment
	Deployments
	PowerMeter
	PowerMeters
	PowerMeterReading
	PowerMeterReadings
	PowerSource
	PowerSources
	AvailablePowerReading
	AvailablePowerReadings
	PowerGeneratedReading
	PowerGeneratedReadings
	ExportToGridLimit
	ExportToGridLimits
	WindDirectionReading
	WindDirectionReadings
	CLCStatusReading
	CLCStatusReadings
	WindSpeedReading
	WindSpeedReadings
	ImportFromGrid
	ImportFromGrids
	DeploymentPowerTarget
	DeploymentPowerTargets
	TempSensor
	TempSensors
	BMSDevice
	BMSDevices
	TempSensorReading
	TempSensorReadings
	DamperDevice
	DamperDevices
	DamperDeviceReading
	DamperDeviceReadings
	MinersOnlineReading
	MinersOnlineReadings
*/
package deploymentdataservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import stdprotos "golang.lakeparime.info/apis/stdprotos"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MeterPosition int32

const (
	MeterPosition_UNKNOWNPOSITION   MeterPosition = 0
	MeterPosition_POWERBOX          MeterPosition = 1
	MeterPosition_POWERSOURCE       MeterPosition = 2
	MeterPosition_POINTOFCONNECTION MeterPosition = 3
)

var MeterPosition_name = map[int32]string{
	0: "UNKNOWNPOSITION",
	1: "POWERBOX",
	2: "POWERSOURCE",
	3: "POINTOFCONNECTION",
}
var MeterPosition_value = map[string]int32{
	"UNKNOWNPOSITION":   0,
	"POWERBOX":          1,
	"POWERSOURCE":       2,
	"POINTOFCONNECTION": 3,
}

func (x MeterPosition) String() string {
	return proto.EnumName(MeterPosition_name, int32(x))
}
func (MeterPosition) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PowerSourceType int32

const (
	PowerSourceType_UNKNOWNSOURCE PowerSourceType = 0
	PowerSourceType_WIND          PowerSourceType = 1
	PowerSourceType_SOLAR         PowerSourceType = 2
)

var PowerSourceType_name = map[int32]string{
	0: "UNKNOWNSOURCE",
	1: "WIND",
	2: "SOLAR",
}
var PowerSourceType_value = map[string]int32{
	"UNKNOWNSOURCE": 0,
	"WIND":          1,
	"SOLAR":         2,
}

func (x PowerSourceType) String() string {
	return proto.EnumName(PowerSourceType_name, int32(x))
}
func (PowerSourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type InternalLocation int32

const (
	InternalLocation_UNKNOWNLOCATION InternalLocation = 0
	InternalLocation_HOTISLE         InternalLocation = 1
	InternalLocation_COLDISLE        InternalLocation = 2
)

var InternalLocation_name = map[int32]string{
	0: "UNKNOWNLOCATION",
	1: "HOTISLE",
	2: "COLDISLE",
}
var InternalLocation_value = map[string]int32{
	"UNKNOWNLOCATION": 0,
	"HOTISLE":         1,
	"COLDISLE":        2,
}

func (x InternalLocation) String() string {
	return proto.EnumName(InternalLocation_name, int32(x))
}
func (InternalLocation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// comment: message pingresponse
type PingResponse struct {
	// comment: field pingresponse.response
	Response string `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type Deployment struct {
	// Display friendly deployment name
	DeploymentName string `protobuf:"bytes,1,opt,name=DeploymentName" json:"DeploymentName,omitempty"`
	// Map coordinates
	Longitude float64 `protobuf:"fixed64,2,opt,name=Longitude" json:"Longitude,omitempty"`
	Latitude  float64 `protobuf:"fixed64,3,opt,name=Latitude" json:"Latitude,omitempty"`
	// The date the deployment was deployed
	DeploymentUnixTimestamp uint64 `protobuf:"varint,4,opt,name=DeploymentUnixTimestamp" json:"DeploymentUnixTimestamp,omitempty"`
	// Required by the mkdb - will be ignored for add requests
	ID uint64 `protobuf:"varint,6,opt,name=ID" json:"ID,omitempty"`
	// The timestamp of when the record was recorded in the service - will be ignored for add requests
	DBUnixTimestamp uint64 `protobuf:"varint,7,opt,name=DBUnixTimestamp" json:"DBUnixTimestamp,omitempty"`
}

func (m *Deployment) Reset()                    { *m = Deployment{} }
func (m *Deployment) String() string            { return proto.CompactTextString(m) }
func (*Deployment) ProtoMessage()               {}
func (*Deployment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Deployment) GetDeploymentName() string {
	if m != nil {
		return m.DeploymentName
	}
	return ""
}

func (m *Deployment) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Deployment) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Deployment) GetDeploymentUnixTimestamp() uint64 {
	if m != nil {
		return m.DeploymentUnixTimestamp
	}
	return 0
}

func (m *Deployment) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Deployment) GetDBUnixTimestamp() uint64 {
	if m != nil {
		return m.DBUnixTimestamp
	}
	return 0
}

type Deployments struct {
	// A list of deployment records
	Deployments []*Deployment `protobuf:"bytes,1,rep,name=Deployments" json:"Deployments,omitempty"`
}

func (m *Deployments) Reset()                    { *m = Deployments{} }
func (m *Deployments) String() string            { return proto.CompactTextString(m) }
func (*Deployments) ProtoMessage()               {}
func (*Deployments) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Deployments) GetDeployments() []*Deployment {
	if m != nil {
		return m.Deployments
	}
	return nil
}

type PowerMeter struct {
	// The deployment this meter is tied to
	DeploymentID uint64 `protobuf:"varint,1,opt,name=DeploymentID" json:"DeploymentID,omitempty"`
	// Location of the meter
	MeterPosition MeterPosition `protobuf:"varint,2,opt,name=MeterPosition,enum=deploymentdataservice.MeterPosition" json:"MeterPosition,omitempty"`
	// Display friendly name
	Name string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	// Display Friendly description
	Description string `protobuf:"bytes,4,opt,name=Description" json:"Description,omitempty"`
	// The date the deployment was deployed
	DeployedUnixTimestamp uint64 `protobuf:"varint,5,opt,name=DeployedUnixTimestamp" json:"DeployedUnixTimestamp,omitempty"`
	// Required by the mkdb - will be ignored for add requests
	ID uint64 `protobuf:"varint,6,opt,name=ID" json:"ID,omitempty"`
	// The timestamp of when the record was recorded in the service - will be ignored for add requests
	DBUnixTimestamp uint64 `protobuf:"varint,7,opt,name=DBUnixTimestamp" json:"DBUnixTimestamp,omitempty"`
	// the ipV4 address of this meter
	IP4 string `protobuf:"bytes,8,opt,name=IP4" json:"IP4,omitempty"`
	// the ip port to poll
	Port uint32 `protobuf:"varint,9,opt,name=Port" json:"Port,omitempty"`
	// the register to poll for currentsummation
	Register uint32 `protobuf:"varint,10,opt,name=Register" json:"Register,omitempty"`
}

func (m *PowerMeter) Reset()                    { *m = PowerMeter{} }
func (m *PowerMeter) String() string            { return proto.CompactTextString(m) }
func (*PowerMeter) ProtoMessage()               {}
func (*PowerMeter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PowerMeter) GetDeploymentID() uint64 {
	if m != nil {
		return m.DeploymentID
	}
	return 0
}

func (m *PowerMeter) GetMeterPosition() MeterPosition {
	if m != nil {
		return m.MeterPosition
	}
	return MeterPosition_UNKNOWNPOSITION
}

func (m *PowerMeter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PowerMeter) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PowerMeter) GetDeployedUnixTimestamp() uint64 {
	if m != nil {
		return m.DeployedUnixTimestamp
	}
	return 0
}

func (m *PowerMeter) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PowerMeter) GetDBUnixTimestamp() uint64 {
	if m != nil {
		return m.DBUnixTimestamp
	}
	return 0
}

func (m *PowerMeter) GetIP4() string {
	if m != nil {
		return m.IP4
	}
	return ""
}

func (m *PowerMeter) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PowerMeter) GetRegister() uint32 {
	if m != nil {
		return m.Register
	}
	return 0
}

type PowerMeters struct {
	// A list of PowerMeters
	PowerMeters []*PowerMeter `protobuf:"bytes,1,rep,name=PowerMeters" json:"PowerMeters,omitempty"`
}

func (m *PowerMeters) Reset()                    { *m = PowerMeters{} }
func (m *PowerMeters) String() string            { return proto.CompactTextString(m) }
func (*PowerMeters) ProtoMessage()               {}
func (*PowerMeters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PowerMeters) GetPowerMeters() []*PowerMeter {
	if m != nil {
		return m.PowerMeters
	}
	return nil
}

type PowerMeterReading struct {
	// The powermeter this reading is tied to
	PowerMeterID uint64 `protobuf:"varint,1,opt,name=PowerMeterID" json:"PowerMeterID,omitempty"`
	// Ever increasing counter value inside each power meter, measured in watts
	CurrentSummationInWattHours float64 `protobuf:"fixed64,2,opt,name=CurrentSummationInWattHours" json:"CurrentSummationInWattHours,omitempty"`
	// The date the reading was Recorded
	ReadingUnixTimestamp uint64 `protobuf:"varint,3,opt,name=ReadingUnixTimestamp" json:"ReadingUnixTimestamp,omitempty"`
	// Required by the mkdb - will be ignored for add requests
	ID uint64 `protobuf:"varint,4,opt,name=ID" json:"ID,omitempty"`
	// The timestamp of when the record was recorded in the service - will be ignored for add requests
	DBUnixTimestamp uint64 `protobuf:"varint,5,opt,name=DBUnixTimestamp" json:"DBUnixTimestamp,omitempty"`
}

func (m *PowerMeterReading) Reset()                    { *m = PowerMeterReading{} }
func (m *PowerMeterReading) String() string            { return proto.CompactTextString(m) }
func (*PowerMeterReading) ProtoMessage()               {}
func (*PowerMeterReading) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PowerMeterReading) GetPowerMeterID() uint64 {
	if m != nil {
		return m.PowerMeterID
	}
	return 0
}

func (m *PowerMeterReading) GetCurrentSummationInWattHours() float64 {
	if m != nil {
		return m.CurrentSummationInWattHours
	}
	return 0
}

func (m *PowerMeterReading) GetReadingUnixTimestamp() uint64 {
	if m != nil {
		return m.ReadingUnixTimestamp
	}
	return 0
}

func (m *PowerMeterReading) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PowerMeterReading) GetDBUnixTimestamp() uint64 {
	if m != nil {
		return m.DBUnixTimestamp
	}
	return 0
}

type PowerMeterReadings struct {
	// A list of power meter reading records
	PowerMeterReadings []*PowerMeterReading `protobuf:"bytes,1,rep,name=PowerMeterReadings" json:"PowerMeterReadings,omitempty"`
}

func (m *PowerMeterReadings) Reset()                    { *m = PowerMeterReadings{} }
func (m *PowerMeterReadings) String() string            { return proto.CompactTextString(m) }
func (*PowerMeterReadings) ProtoMessage()               {}
func (*PowerMeterReadings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PowerMeterReadings) GetPowerMeterReadings() []*PowerMeterReading {
	if m != nil {
		return m.PowerMeterReadings
	}
	return nil
}

type PowerSource struct {
	// The deployment this source is tied to
	DeploymentID uint64 `protobuf:"varint,1,opt,name=DeploymentID" json:"DeploymentID,omitempty"`
	// Details the type of power source this is
	PowerSourceType PowerSourceType `protobuf:"varint,2,opt,name=PowerSourceType,enum=deploymentdataservice.PowerSourceType" json:"PowerSourceType,omitempty"`
	// Display friendly name
	Name string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	// Display Friendly description
	Description string `protobuf:"bytes,4,opt,name=Description" json:"Description,omitempty"`
	// The date the powersource was deployed
	DeployedUnixTimestamp uint64 `protobuf:"varint,5,opt,name=DeployedUnixTimestamp" json:"DeployedUnixTimestamp,omitempty"`
	// Required by the mkdb - will be ignored for add requests
	ID uint64 `protobuf:"varint,6,opt,name=ID" json:"ID,omitempty"`
	// The timestamp of when the record was recorded in the service - will be ignored for add requests
	DBUnixTimestamp uint64 `protobuf:"varint,7,opt,name=DBUnixTimestamp" json:"DBUnixTimestamp,omitempty"`
	// the ipV4 address of this meter
	IP4 string `protobuf:"bytes,8,opt,name=IP4" json:"IP4,omitempty"`
	// the ip port to poll
	Port uint32 `protobuf:"varint,9,opt,name=Port" json:"Port,omitempty"`
	// the register start address
	Register uint32 `protobuf:"varint,10,opt,name=Register" json:"Register,omitempty"`
}

func (m *PowerSource) Reset()                    { *m = PowerSource{} }
func (m *PowerSource) String() string            { return proto.CompactTextString(m) }
func (*PowerSource) ProtoMessage()               {}
func (*PowerSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PowerSource) GetDeploymentID() uint64 {
	if m != nil {
		return m.DeploymentID
	}
	return 0
}

func (m *PowerSource) GetPowerSourceType() PowerSourceType {
	if m != nil {
		return m.PowerSourceType
	}
	return PowerSourceType_UNKNOWNSOURCE
}

func (m *PowerSource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PowerSource) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PowerSource) GetDeployedUnixTimestamp() uint64 {
	if m != nil {
		return m.DeployedUnixTimestamp
	}
	return 0
}

func (m *PowerSource) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PowerSource) GetDBUnixTimestamp() uint64 {
	if m != nil {
		return m.DBUnixTimestamp
	}
	return 0
}

func (m *PowerSource) GetIP4() string {
	if m != nil {
		return m.IP4
	}
	return ""
}

func (m *PowerSource) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PowerSource) GetRegister() uint32 {
	if m != nil {
		return m.Register
	}
	return 0
}

type PowerSources struct {
	// A list of power sources
	PowerSources []*PowerSource `protobuf:"bytes,1,rep,name=PowerSources" json:"PowerSources,omitempty"`
}

func (m *PowerSources) Reset()                    { *m = PowerSources{} }
func (m *PowerSources) String() string            { return proto.CompactTextString(m) }
func (*PowerSources) ProtoMessage()               {}
func (*PowerSources) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PowerSources) GetPowerSources() []*PowerSource {
	if m != nil {
		return m.PowerSources
	}
	return nil
}

type AvailablePowerReading struct {
	// The Power Source this AP Reading is tied to
	PowerSourceID uint64 `protobuf:"varint,1,opt,name=PowerSourceID" json:"PowerSourceID,omitempty"`
	// Reading value in watts from the power source
	AvailablePowerInWatts float64 `protobuf:"fixed64,2,opt,name=AvailablePowerInWatts" json:"AvailablePowerInWatts,omitempty"`
	// The date the AvailablePowerReading was taken
	ReadingUnixTimestamp uint64 `protobuf:"varint,3,opt,name=ReadingUnixTimestamp" json:"ReadingUnixTimestamp,omitempty"`
	// Required by the mkdb - will be ignored for add requests
	ID uint64 `protobuf:"varint,4,opt,name=ID" json:"ID,omitempty"`
	// The timestamp of when the record was recorded in the service - will be ignored for add requests
	DBUnixTimestamp uint64 `protobuf:"varint,5,opt,name=DBUnixTimestamp" json:"DBUnixTimestamp,omitempty"`
}

func (m *AvailablePowerReading) Reset()                    { *m = AvailablePowerReading{} }
func (m *AvailablePowerReading) String() string            { return proto.CompactTextString(m) }
func (*AvailablePowerReading) ProtoMessage()               {}
func (*AvailablePowerReading) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AvailablePowerReading) GetPowerSourceID() uint64 {
	if m != nil {
		return m.PowerSourceID
	}
	return 0
}

func (m *AvailablePowerReading) GetAvailablePowerInWatts() float64 {
	if m != nil {
		return m.AvailablePowerInWatts
	}
	return 0
}

func (m *AvailablePowerReading) GetReadingUnixTimestamp() uint64 {
	if m != nil {
		return m.ReadingUnixTimestamp
	}
	return 0
}

func (m *AvailablePowerReading) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AvailablePowerReading) GetDBUnixTimestamp() uint64 {
	if m != nil {
		return m.DBUnixTimestamp
	}
	return 0
}

type AvailablePowerReadings struct {
	// A list of power sources
	AvailablePowerReadings []*AvailablePowerReading `protobuf:"bytes,1,rep,name=AvailablePowerReadings" json:"AvailablePowerReadings,omitempty"`
}

func (m *AvailablePowerReadings) Reset()                    { *m = AvailablePowerReadings{} }
func (m *AvailablePowerReadings) String() string            { return proto.CompactTextString(m) }
func (*AvailablePowerReadings) ProtoMessage()               {}
func (*AvailablePowerReadings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *AvailablePowerReadings) GetAvailablePowerReadings() []*AvailablePowerReading {
	if m != nil {
		return m.AvailablePowerReadings
	}
	return nil
}

type PowerGeneratedReading struct {
	// The Power Source this PG Reading is tied to
	PowerSourceID uint64 `protobuf:"varint,1,opt,name=PowerSourceID" json:"PowerSourceID,omitempty"`
	// Reading value in watts from the power source
	PowerGeneratedInWatts float64 `protobuf:"fixed64,2,opt,name=PowerGeneratedInWatts" json:"PowerGeneratedInWatts,omitempty"`
	// The date the Power Generation reading was taken
	ReadingUnixTimestamp uint64 `protobuf:"varint,3,opt,name=ReadingUnixTimestamp" json:"ReadingUnixTimestamp,omitempty"`
	// Required by the mkdb - will be ignored for add requests
	ID uint64 `protobuf:"varint,4,opt,name=ID" json:"ID,omitempty"`
	// The timestamp of when the record was recorded in the service - will be ignored for add requests
	DBUnixTimestamp uint64 `protobuf:"varint,5,opt,name=DBUnixTimestamp" json:"DBUnixTimestamp,omitempty"`
}

func (m *PowerGeneratedReading) Reset()                    { *m = PowerGeneratedReading{} }
func (m *PowerGeneratedReading) String() string            { return proto.CompactTextString(m) }
func (*PowerGeneratedReading) ProtoMessage()               {}
func (*PowerGeneratedReading) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PowerGeneratedReading) GetPowerSourceID() uint64 {
	if m != nil {
		return m.PowerSourceID
	}
	return 0
}

func (m *PowerGeneratedReading) GetPowerGeneratedInWatts() float64 {
	if m != nil {
		return m.PowerGeneratedInWatts
	}
	return 0
}

func (m *PowerGeneratedReading) GetReadingUnixTimestamp() uint64 {
	if m != nil {
		return m.ReadingUnixTimestamp
	}
	return 0
}

func (m *PowerGeneratedReading) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PowerGeneratedReading) GetDBUnixTimestamp() uint64 {
	if m != nil {
		return m.DBUnixTimestamp
	}
	return 0
}

type PowerGeneratedReadings struct {
	// A list of Power Generation readings
	PowerGeneratedReadings []*PowerGeneratedReading `protobuf:"bytes,1,rep,name=PowerGeneratedReadings" json:"PowerGeneratedReadings,omitempty"`
}

func (m *PowerGeneratedReadings) Reset()                    { *m = PowerGeneratedReadings{} }
func (m *PowerGeneratedReadings) String() string            { return proto.CompactTextString(m) }
func (*PowerGeneratedReadings) ProtoMessage()               {}
func (*PowerGeneratedReadings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PowerGeneratedReadings) GetPowerGeneratedReadings() []*PowerGeneratedReading {
	if m != nil {
		return m.PowerGeneratedReadings
	}
	return nil
}

type ExportToGridLimit struct {
	// The Power Source this limit is applied to
	PowerSourceID uint64 `protobuf:"varint,1,opt,name=PowerSourceID" json:"PowerSourceID,omitempty"`
	// The max allowed of power in Watts allowed to be exported from a power source
	MaxExportInWatts float64 `protobuf:"fixed64,2,opt,name=MaxExportInWatts" json:"MaxExportInWatts,omitempty"`
	// The date the ExportToGridLimit was set
	ReadingUnixTimestamp uint64 `protobuf:"varint,3,opt,name=ReadingUnixTimestamp" json:"ReadingUnixTimestamp,omitempty"`
	// Required by the mkdb - will be ignored for add requests
	ID uint64 `protobuf:"varint,4,opt,name=ID" json:"ID,omitempty"`
	// The timestamp of when the record was recorded in the service - will be ignored for add requests
	DBUnixTimestamp uint64 `protobuf:"varint,5,opt,name=DBUnixTimestamp" json:"DBUnixTimestamp,omitempty"`
}

func (m *ExportToGridLimit) Reset()                    { *m = ExportToGridLimit{} }
func (m *ExportToGridLimit) String() string            { return proto.CompactTextString(m) }
func (*ExportToGridLimit) ProtoMessage()               {}
func (*ExportToGridLimit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ExportToGridLimit) GetPowerSourceID() uint64 {
	if m != nil {
		return m.PowerSourceID
	}
	return 0
}

func (m *ExportToGridLimit) GetMaxExportInWatts() float64 {
	if m != nil {
		return m.MaxExportInWatts
	}
	return 0
}

func (m *ExportToGridLimit) GetReadingUnixTimestamp() uint64 {
	if m != nil {
		return m.ReadingUnixTimestamp
	}
	return 0
}

func (m *ExportToGridLimit) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ExportToGridLimit) GetDBUnixTimestamp() uint64 {
	if m != nil {
		return m.DBUnixTimestamp
	}
	return 0
}

type ExportToGridLimits struct {
	// A list of ExportToGridLimit's
	ExportToGridLimits []*ExportToGridLimit `protobuf:"bytes,1,rep,name=ExportToGridLimits" json:"ExportToGridLimits,omitempty"`
}

func (m *ExportToGridLimits) Reset()                    { *m = ExportToGridLimits{} }
func (m *ExportToGridLimits) String() string            { return proto.CompactTextString(m) }
func (*ExportToGridLimits) ProtoMessage()               {}
func (*ExportToGridLimits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ExportToGridLimits) GetExportToGridLimits() []*ExportToGridLimit {
	if m != nil {
		return m.ExportToGridLimits
	}
	return nil
}

type WindDirectionReading struct {
	// The Power Source this Wind Direction Reading is tied to
	PowerSourceID uint64 `protobuf:"varint,1,opt,name=PowerSourceID" json:"PowerSourceID,omitempty"`
	// Reading value in degrees from the power source
	WindDirectionInDegrees float64 `protobuf:"fixed64,2,opt,name=WindDirectionInDegrees" json:"WindDirectionInDegrees,omitempty"`
	// The date the WindDirectionReading reading was taken
	ReadingUnixTimestamp uint64 `protobuf:"varint,3,opt,name=ReadingUnixTimestamp" json:"ReadingUnixTimestamp,omitempty"`
	// Required by the mkdb - will be ignored for add requests
	ID uint64 `protobuf:"varint,4,opt,name=ID" json:"ID,omitempty"`
	// The timestamp of when the record was recorded in the service - will be ignored for add requests
	DBUnixTimestamp uint64 `protobuf:"varint,5,opt,name=DBUnixTimestamp" json:"DBUnixTimestamp,omitempty"`
}

func (m *WindDirectionReading) Reset()                    { *m = WindDirectionReading{} }
func (m *WindDirectionReading) String() string            { return proto.CompactTextString(m) }
func (*WindDirectionReading) ProtoMessage()               {}
func (*WindDirectionReading) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *WindDirectionReading) GetPowerSourceID() uint64 {
	if m != nil {
		return m.PowerSourceID
	}
	return 0
}

func (m *WindDirectionReading) GetWindDirectionInDegrees() float64 {
	if m != nil {
		return m.WindDirectionInDegrees
	}
	return 0
}

func (m *WindDirectionReading) GetReadingUnixTimestamp() uint64 {
	if m != nil {
		return m.ReadingUnixTimestamp
	}
	return 0
}

func (m *WindDirectionReading) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *WindDirectionReading) GetDBUnixTimestamp() uint64 {
	if m != nil {
		return m.DBUnixTimestamp
	}
	return 0
}

type WindDirectionReadings struct {
	// A list of WindDirectionReadings
	WindDirectionReadings []*WindDirectionReading `protobuf:"bytes,1,rep,name=WindDirectionReadings" json:"WindDirectionReadings,omitempty"`
}

func (m *WindDirectionReadings) Reset()                    { *m = WindDirectionReadings{} }
func (m *WindDirectionReadings) String() string            { return proto.CompactTextString(m) }
func (*WindDirectionReadings) ProtoMessage()               {}
func (*WindDirectionReadings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *WindDirectionReadings) GetWindDirectionReadings() []*WindDirectionReading {
	if m != nil {
		return m.WindDirectionReadings
	}
	return nil
}

type CLCStatusReading struct {
	// The Power Source this clc status code Reading is tied to
	PowerSourceID uint64 `protobuf:"varint,1,opt,name=PowerSourceID" json:"PowerSourceID,omitempty"`
	// Reading value in int error code from the power source
	CLCStatusCode uint64 `protobuf:"varint,2,opt,name=CLCStatusCode" json:"CLCStatusCode,omitempty"`
	// The date the CLCStatusReading reading was taken
	ReadingUnixTimestamp uint64 `protobuf:"varint,3,opt,name=ReadingUnixTimestamp" json:"ReadingUnixTimestamp,omitempty"`
	// Required by the mkdb - will be ignored for add requests
	ID uint64 `protobuf:"varint,4,opt,name=ID" json:"ID,omitempty"`
	// The timestamp of when the record was recorded in the service - will be ignored for add requests
	DBUnixTimestamp uint64 `protobuf:"varint,5,opt,name=DBUnixTimestamp" json:"DBUnixTimestamp,omitempty"`
}

func (m *CLCStatusReading) Reset()                    { *m = CLCStatusReading{} }
func (m *CLCStatusReading) String() string            { return proto.CompactTextString(m) }
func (*CLCStatusReading) ProtoMessage()               {}
func (*CLCStatusReading) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CLCStatusReading) GetPowerSourceID() uint64 {
	if m != nil {
		return m.PowerSourceID
	}
	return 0
}

func (m *CLCStatusReading) GetCLCStatusCode() uint64 {
	if m != nil {
		return m.CLCStatusCode
	}
	return 0
}

func (m *CLCStatusReading) GetReadingUnixTimestamp() uint64 {
	if m != nil {
		return m.ReadingUnixTimestamp
	}
	return 0
}

func (m *CLCStatusReading) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CLCStatusReading) GetDBUnixTimestamp() uint64 {
	if m != nil {
		return m.DBUnixTimestamp
	}
	return 0
}

type CLCStatusReadings struct {
	// A list of CLCStatusReadings
	CLCStatusReadings []*CLCStatusReading `protobuf:"bytes,1,rep,name=CLCStatusReadings" json:"CLCStatusReadings,omitempty"`
}

func (m *CLCStatusReadings) Reset()                    { *m = CLCStatusReadings{} }
func (m *CLCStatusReadings) String() string            { return proto.CompactTextString(m) }
func (*CLCStatusReadings) ProtoMessage()               {}
func (*CLCStatusReadings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CLCStatusReadings) GetCLCStatusReadings() []*CLCStatusReading {
	if m != nil {
		return m.CLCStatusReadings
	}
	return nil
}

type WindSpeedReading struct {
	// The Power Source this Wind Speed Reading is tied to
	PowerSourceID uint64 `protobuf:"varint,1,opt,name=PowerSourceID" json:"PowerSourceID,omitempty"`
	// Reading value in mps from the power source
	WindSpeedInMetersPerSecond float64 `protobuf:"fixed64,2,opt,name=WindSpeedInMetersPerSecond" json:"WindSpeedInMetersPerSecond,omitempty"`
	// The date the WindSpeedReading reading was taken
	ReadingUnixTimestamp uint64 `protobuf:"varint,3,opt,name=ReadingUnixTimestamp" json:"ReadingUnixTimestamp,omitempty"`
	// Required by the mkdb - will be ignored for add requests
	ID uint64 `protobuf:"varint,4,opt,name=ID" json:"ID,omitempty"`
	// The timestamp of when the record was recorded in the service - will be ignored for add requests
	DBUnixTimestamp uint64 `protobuf:"varint,5,opt,name=DBUnixTimestamp" json:"DBUnixTimestamp,omitempty"`
}

func (m *WindSpeedReading) Reset()                    { *m = WindSpeedReading{} }
func (m *WindSpeedReading) String() string            { return proto.CompactTextString(m) }
func (*WindSpeedReading) ProtoMessage()               {}
func (*WindSpeedReading) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *WindSpeedReading) GetPowerSourceID() uint64 {
	if m != nil {
		return m.PowerSourceID
	}
	return 0
}

func (m *WindSpeedReading) GetWindSpeedInMetersPerSecond() float64 {
	if m != nil {
		return m.WindSpeedInMetersPerSecond
	}
	return 0
}

func (m *WindSpeedReading) GetReadingUnixTimestamp() uint64 {
	if m != nil {
		return m.ReadingUnixTimestamp
	}
	return 0
}

func (m *WindSpeedReading) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *WindSpeedReading) GetDBUnixTimestamp() uint64 {
	if m != nil {
		return m.DBUnixTimestamp
	}
	return 0
}

type WindSpeedReadings struct {
	// A list of WindSpeedReadings
	WindSpeedReadings []*WindSpeedReading `protobuf:"bytes,1,rep,name=WindSpeedReadings" json:"WindSpeedReadings,omitempty"`
}

func (m *WindSpeedReadings) Reset()                    { *m = WindSpeedReadings{} }
func (m *WindSpeedReadings) String() string            { return proto.CompactTextString(m) }
func (*WindSpeedReadings) ProtoMessage()               {}
func (*WindSpeedReadings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *WindSpeedReadings) GetWindSpeedReadings() []*WindSpeedReading {
	if m != nil {
		return m.WindSpeedReadings
	}
	return nil
}

type ImportFromGrid struct {
	// The deployment this import is tied to
	DeploymentID uint64 `protobuf:"varint,1,opt,name=DeploymentID" json:"DeploymentID,omitempty"`
	// The imported power from the grid measured in watts
	ImportInWatts float64 `protobuf:"fixed64,2,opt,name=ImportInWatts" json:"ImportInWatts,omitempty"`
	// The date the ImportFromGrid was set
	ReadingUnixTimestamp uint64 `protobuf:"varint,3,opt,name=ReadingUnixTimestamp" json:"ReadingUnixTimestamp,omitempty"`
	// Required by the mkdb - will be ignored for add requests
	ID uint64 `protobuf:"varint,4,opt,name=ID" json:"ID,omitempty"`
	// The timestamp of when the record was recorded in the service - will be ignored for add requests
	DBUnixTimestamp uint64 `protobuf:"varint,5,opt,name=DBUnixTimestamp" json:"DBUnixTimestamp,omitempty"`
}

func (m *ImportFromGrid) Reset()                    { *m = ImportFromGrid{} }
func (m *ImportFromGrid) String() string            { return proto.CompactTextString(m) }
func (*ImportFromGrid) ProtoMessage()               {}
func (*ImportFromGrid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ImportFromGrid) GetDeploymentID() uint64 {
	if m != nil {
		return m.DeploymentID
	}
	return 0
}

func (m *ImportFromGrid) GetImportInWatts() float64 {
	if m != nil {
		return m.ImportInWatts
	}
	return 0
}

func (m *ImportFromGrid) GetReadingUnixTimestamp() uint64 {
	if m != nil {
		return m.ReadingUnixTimestamp
	}
	return 0
}

func (m *ImportFromGrid) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ImportFromGrid) GetDBUnixTimestamp() uint64 {
	if m != nil {
		return m.DBUnixTimestamp
	}
	return 0
}

type ImportFromGrids struct {
	// A list of imports from the grid
	ImportFromGrids []*ImportFromGrid `protobuf:"bytes,1,rep,name=ImportFromGrids" json:"ImportFromGrids,omitempty"`
}

func (m *ImportFromGrids) Reset()                    { *m = ImportFromGrids{} }
func (m *ImportFromGrids) String() string            { return proto.CompactTextString(m) }
func (*ImportFromGrids) ProtoMessage()               {}
func (*ImportFromGrids) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ImportFromGrids) GetImportFromGrids() []*ImportFromGrid {
	if m != nil {
		return m.ImportFromGrids
	}
	return nil
}

type DeploymentPowerTarget struct {
	// The deployment this power target is tied to
	DeploymentID uint64 `protobuf:"varint,1,opt,name=DeploymentID" json:"DeploymentID,omitempty"`
	// The power target set in watts
	PowerTargetInWatts float64 `protobuf:"fixed64,2,opt,name=PowerTargetInWatts" json:"PowerTargetInWatts,omitempty"`
	// The date the DeploymentPowerTarget was set
	ReadingUnixTimestamp uint64 `protobuf:"varint,3,opt,name=ReadingUnixTimestamp" json:"ReadingUnixTimestamp,omitempty"`
	// Required by the mkdb - will be ignored for add requests
	ID uint64 `protobuf:"varint,4,opt,name=ID" json:"ID,omitempty"`
	// The timestamp of when the record was recorded in the service - will be ignored for add requests
	DBUnixTimestamp uint64 `protobuf:"varint,5,opt,name=DBUnixTimestamp" json:"DBUnixTimestamp,omitempty"`
}

func (m *DeploymentPowerTarget) Reset()                    { *m = DeploymentPowerTarget{} }
func (m *DeploymentPowerTarget) String() string            { return proto.CompactTextString(m) }
func (*DeploymentPowerTarget) ProtoMessage()               {}
func (*DeploymentPowerTarget) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *DeploymentPowerTarget) GetDeploymentID() uint64 {
	if m != nil {
		return m.DeploymentID
	}
	return 0
}

func (m *DeploymentPowerTarget) GetPowerTargetInWatts() float64 {
	if m != nil {
		return m.PowerTargetInWatts
	}
	return 0
}

func (m *DeploymentPowerTarget) GetReadingUnixTimestamp() uint64 {
	if m != nil {
		return m.ReadingUnixTimestamp
	}
	return 0
}

func (m *DeploymentPowerTarget) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *DeploymentPowerTarget) GetDBUnixTimestamp() uint64 {
	if m != nil {
		return m.DBUnixTimestamp
	}
	return 0
}

type DeploymentPowerTargets struct {
	// A list of deployment power targets
	DeploymentPowerTargets []*DeploymentPowerTarget `protobuf:"bytes,1,rep,name=DeploymentPowerTargets" json:"DeploymentPowerTargets,omitempty"`
}

func (m *DeploymentPowerTargets) Reset()                    { *m = DeploymentPowerTargets{} }
func (m *DeploymentPowerTargets) String() string            { return proto.CompactTextString(m) }
func (*DeploymentPowerTargets) ProtoMessage()               {}
func (*DeploymentPowerTargets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *DeploymentPowerTargets) GetDeploymentPowerTargets() []*DeploymentPowerTarget {
	if m != nil {
		return m.DeploymentPowerTargets
	}
	return nil
}

type TempSensor struct {
	// The deployment this temp sensor is tied to
	BMSId uint64 `protobuf:"varint,1,opt,name=BMSId" json:"BMSId,omitempty"`
	// Details the location of the temp sensor
	TempSensorLocation InternalLocation `protobuf:"varint,2,opt,name=TempSensorLocation,enum=deploymentdataservice.InternalLocation" json:"TempSensorLocation,omitempty"`
	// Display friendly name
	Name string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	// Display Friendly description
	Description string `protobuf:"bytes,4,opt,name=Description" json:"Description,omitempty"`
	// The date the powersource was deployed
	DeployedUnixTimestamp uint64 `protobuf:"varint,5,opt,name=DeployedUnixTimestamp" json:"DeployedUnixTimestamp,omitempty"`
	// Required by the mkdb - will be ignored for add requests
	ID uint64 `protobuf:"varint,6,opt,name=ID" json:"ID,omitempty"`
	// The timestamp of when the record was recorded in the service - will be ignored for add requests
	DBUnixTimestamp uint64 `protobuf:"varint,7,opt,name=DBUnixTimestamp" json:"DBUnixTimestamp,omitempty"`
	// Register
	Register uint32 `protobuf:"varint,8,opt,name=Register" json:"Register,omitempty"`
}

func (m *TempSensor) Reset()                    { *m = TempSensor{} }
func (m *TempSensor) String() string            { return proto.CompactTextString(m) }
func (*TempSensor) ProtoMessage()               {}
func (*TempSensor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *TempSensor) GetBMSId() uint64 {
	if m != nil {
		return m.BMSId
	}
	return 0
}

func (m *TempSensor) GetTempSensorLocation() InternalLocation {
	if m != nil {
		return m.TempSensorLocation
	}
	return InternalLocation_UNKNOWNLOCATION
}

func (m *TempSensor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TempSensor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TempSensor) GetDeployedUnixTimestamp() uint64 {
	if m != nil {
		return m.DeployedUnixTimestamp
	}
	return 0
}

func (m *TempSensor) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TempSensor) GetDBUnixTimestamp() uint64 {
	if m != nil {
		return m.DBUnixTimestamp
	}
	return 0
}

func (m *TempSensor) GetRegister() uint32 {
	if m != nil {
		return m.Register
	}
	return 0
}

type TempSensors struct {
	// A list of Temp Sensors
	TempSensors []*TempSensor `protobuf:"bytes,1,rep,name=TempSensors" json:"TempSensors,omitempty"`
}

func (m *TempSensors) Reset()                    { *m = TempSensors{} }
func (m *TempSensors) String() string            { return proto.CompactTextString(m) }
func (*TempSensors) ProtoMessage()               {}
func (*TempSensors) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *TempSensors) GetTempSensors() []*TempSensor {
	if m != nil {
		return m.TempSensors
	}
	return nil
}

type BMSDevice struct {
	// Deployment ID where this BMS is
	DeploymentID uint64 `protobuf:"varint,1,opt,name=DeploymentID" json:"DeploymentID,omitempty"`
	// Display friendly name
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	// Display Friendly description
	Description string `protobuf:"bytes,3,opt,name=Description" json:"Description,omitempty"`
	// The date the deployment was deployed
	DeployedUnixTimestamp uint64 `protobuf:"varint,4,opt,name=DeployedUnixTimestamp" json:"DeployedUnixTimestamp,omitempty"`
	// Required by the mkdb - will be ignored for add requests
	ID uint64 `protobuf:"varint,5,opt,name=ID" json:"ID,omitempty"`
	// The timestamp of when the record was recorded in the service - will be ignored for add requests
	DBUnixTimestamp uint64 `protobuf:"varint,6,opt,name=DBUnixTimestamp" json:"DBUnixTimestamp,omitempty"`
	// the ipV4 address of this meter
	IP4 string `protobuf:"bytes,7,opt,name=IP4" json:"IP4,omitempty"`
	// the ip port to poll
	Port uint32 `protobuf:"varint,8,opt,name=Port" json:"Port,omitempty"`
}

func (m *BMSDevice) Reset()                    { *m = BMSDevice{} }
func (m *BMSDevice) String() string            { return proto.CompactTextString(m) }
func (*BMSDevice) ProtoMessage()               {}
func (*BMSDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *BMSDevice) GetDeploymentID() uint64 {
	if m != nil {
		return m.DeploymentID
	}
	return 0
}

func (m *BMSDevice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BMSDevice) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BMSDevice) GetDeployedUnixTimestamp() uint64 {
	if m != nil {
		return m.DeployedUnixTimestamp
	}
	return 0
}

func (m *BMSDevice) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *BMSDevice) GetDBUnixTimestamp() uint64 {
	if m != nil {
		return m.DBUnixTimestamp
	}
	return 0
}

func (m *BMSDevice) GetIP4() string {
	if m != nil {
		return m.IP4
	}
	return ""
}

func (m *BMSDevice) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type BMSDevices struct {
	// A list of BMS Devices
	BMSDevices []*BMSDevice `protobuf:"bytes,1,rep,name=BMSDevices" json:"BMSDevices,omitempty"`
}

func (m *BMSDevices) Reset()                    { *m = BMSDevices{} }
func (m *BMSDevices) String() string            { return proto.CompactTextString(m) }
func (*BMSDevices) ProtoMessage()               {}
func (*BMSDevices) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *BMSDevices) GetBMSDevices() []*BMSDevice {
	if m != nil {
		return m.BMSDevices
	}
	return nil
}

type TempSensorReading struct {
	// The temp sensor this power target is tied to
	TempSensorID uint64 `protobuf:"varint,1,opt,name=TempSensorID" json:"TempSensorID,omitempty"`
	// The temp value read in celsius
	TempInCelsius float64 `protobuf:"fixed64,2,opt,name=TempInCelsius" json:"TempInCelsius,omitempty"`
	// The date the TempSensorReading was read
	ReadingUnixTimestamp uint64 `protobuf:"varint,3,opt,name=ReadingUnixTimestamp" json:"ReadingUnixTimestamp,omitempty"`
	// Required by the mkdb - will be ignored for add requests
	ID uint64 `protobuf:"varint,4,opt,name=ID" json:"ID,omitempty"`
	// The timestamp of when the record was recorded in the service - will be ignored for add requests
	DBUnixTimestamp uint64 `protobuf:"varint,5,opt,name=DBUnixTimestamp" json:"DBUnixTimestamp,omitempty"`
}

func (m *TempSensorReading) Reset()                    { *m = TempSensorReading{} }
func (m *TempSensorReading) String() string            { return proto.CompactTextString(m) }
func (*TempSensorReading) ProtoMessage()               {}
func (*TempSensorReading) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *TempSensorReading) GetTempSensorID() uint64 {
	if m != nil {
		return m.TempSensorID
	}
	return 0
}

func (m *TempSensorReading) GetTempInCelsius() float64 {
	if m != nil {
		return m.TempInCelsius
	}
	return 0
}

func (m *TempSensorReading) GetReadingUnixTimestamp() uint64 {
	if m != nil {
		return m.ReadingUnixTimestamp
	}
	return 0
}

func (m *TempSensorReading) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TempSensorReading) GetDBUnixTimestamp() uint64 {
	if m != nil {
		return m.DBUnixTimestamp
	}
	return 0
}

type TempSensorReadings struct {
	// A list of TempSensorReadings
	TempSensorReadings []*TempSensorReading `protobuf:"bytes,1,rep,name=TempSensorReadings" json:"TempSensorReadings,omitempty"`
}

func (m *TempSensorReadings) Reset()                    { *m = TempSensorReadings{} }
func (m *TempSensorReadings) String() string            { return proto.CompactTextString(m) }
func (*TempSensorReadings) ProtoMessage()               {}
func (*TempSensorReadings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *TempSensorReadings) GetTempSensorReadings() []*TempSensorReading {
	if m != nil {
		return m.TempSensorReadings
	}
	return nil
}

type DamperDevice struct {
	// The deployment this damper is tied to
	DeploymentID uint64 `protobuf:"varint,1,opt,name=DeploymentID" json:"DeploymentID,omitempty"`
	// The position of the damper device
	DamperLocation InternalLocation `protobuf:"varint,2,opt,name=DamperLocation,enum=deploymentdataservice.InternalLocation" json:"DamperLocation,omitempty"`
	// Display friendly name
	Name string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	// Display Friendly description
	Description string `protobuf:"bytes,4,opt,name=Description" json:"Description,omitempty"`
	// The date the damper device was deployed
	DeployedUnixTimestamp uint64 `protobuf:"varint,5,opt,name=DeployedUnixTimestamp" json:"DeployedUnixTimestamp,omitempty"`
	// Required by the mkdb - will be ignored for add requests
	ID uint64 `protobuf:"varint,6,opt,name=ID" json:"ID,omitempty"`
	// The timestamp of when the record was recorded in the service - will be ignored for add requests
	DBUnixTimestamp uint64 `protobuf:"varint,7,opt,name=DBUnixTimestamp" json:"DBUnixTimestamp,omitempty"`
}

func (m *DamperDevice) Reset()                    { *m = DamperDevice{} }
func (m *DamperDevice) String() string            { return proto.CompactTextString(m) }
func (*DamperDevice) ProtoMessage()               {}
func (*DamperDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *DamperDevice) GetDeploymentID() uint64 {
	if m != nil {
		return m.DeploymentID
	}
	return 0
}

func (m *DamperDevice) GetDamperLocation() InternalLocation {
	if m != nil {
		return m.DamperLocation
	}
	return InternalLocation_UNKNOWNLOCATION
}

func (m *DamperDevice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DamperDevice) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DamperDevice) GetDeployedUnixTimestamp() uint64 {
	if m != nil {
		return m.DeployedUnixTimestamp
	}
	return 0
}

func (m *DamperDevice) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *DamperDevice) GetDBUnixTimestamp() uint64 {
	if m != nil {
		return m.DBUnixTimestamp
	}
	return 0
}

type DamperDevices struct {
	// A list of DamperDevices
	DamperDevices []*DamperDevice `protobuf:"bytes,1,rep,name=DamperDevices" json:"DamperDevices,omitempty"`
}

func (m *DamperDevices) Reset()                    { *m = DamperDevices{} }
func (m *DamperDevices) String() string            { return proto.CompactTextString(m) }
func (*DamperDevices) ProtoMessage()               {}
func (*DamperDevices) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *DamperDevices) GetDamperDevices() []*DamperDevice {
	if m != nil {
		return m.DamperDevices
	}
	return nil
}

type DamperDeviceReading struct {
	// The damper device this reading is linked to
	DamperDeviceID uint64 `protobuf:"varint,1,opt,name=DamperDeviceID" json:"DamperDeviceID,omitempty"`
	// The value the damper uses to determine airflow
	DamperDemand float64 `protobuf:"fixed64,2,opt,name=DamperDemand" json:"DamperDemand,omitempty"`
	// The date the DamperDeviceReading was set
	ReadingUnixTimestamp uint64 `protobuf:"varint,3,opt,name=ReadingUnixTimestamp" json:"ReadingUnixTimestamp,omitempty"`
	// Required by the mkdb - will be ignored for add requests
	ID uint64 `protobuf:"varint,4,opt,name=ID" json:"ID,omitempty"`
	// The timestamp of when the record was recorded in the service - will be ignored for add requests
	DBUnixTimestamp uint64 `protobuf:"varint,5,opt,name=DBUnixTimestamp" json:"DBUnixTimestamp,omitempty"`
}

func (m *DamperDeviceReading) Reset()                    { *m = DamperDeviceReading{} }
func (m *DamperDeviceReading) String() string            { return proto.CompactTextString(m) }
func (*DamperDeviceReading) ProtoMessage()               {}
func (*DamperDeviceReading) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *DamperDeviceReading) GetDamperDeviceID() uint64 {
	if m != nil {
		return m.DamperDeviceID
	}
	return 0
}

func (m *DamperDeviceReading) GetDamperDemand() float64 {
	if m != nil {
		return m.DamperDemand
	}
	return 0
}

func (m *DamperDeviceReading) GetReadingUnixTimestamp() uint64 {
	if m != nil {
		return m.ReadingUnixTimestamp
	}
	return 0
}

func (m *DamperDeviceReading) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *DamperDeviceReading) GetDBUnixTimestamp() uint64 {
	if m != nil {
		return m.DBUnixTimestamp
	}
	return 0
}

type DamperDeviceReadings struct {
	// A list of DamperDeviceReadings
	DamperDeviceReadings []*DamperDeviceReading `protobuf:"bytes,1,rep,name=DamperDeviceReadings" json:"DamperDeviceReadings,omitempty"`
}

func (m *DamperDeviceReadings) Reset()                    { *m = DamperDeviceReadings{} }
func (m *DamperDeviceReadings) String() string            { return proto.CompactTextString(m) }
func (*DamperDeviceReadings) ProtoMessage()               {}
func (*DamperDeviceReadings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *DamperDeviceReadings) GetDamperDeviceReadings() []*DamperDeviceReading {
	if m != nil {
		return m.DamperDeviceReadings
	}
	return nil
}

type MinersOnlineReading struct {
	// The deployment this reading is linked to
	DeploymentID uint64 `protobuf:"varint,1,opt,name=DeploymentID" json:"DeploymentID,omitempty"`
	// The number of hashing miners
	MinersOnline float64 `protobuf:"fixed64,2,opt,name=MinersOnline" json:"MinersOnline,omitempty"`
	// The date the reading was taken
	ReadingUnixTimestamp uint64 `protobuf:"varint,3,opt,name=ReadingUnixTimestamp" json:"ReadingUnixTimestamp,omitempty"`
	// Required by the mkdb - will be ignored for add requests
	ID uint64 `protobuf:"varint,4,opt,name=ID" json:"ID,omitempty"`
	// The timestamp of when the record was recorded in the service - will be ignored for add requests
	DBUnixTimestamp uint64 `protobuf:"varint,5,opt,name=DBUnixTimestamp" json:"DBUnixTimestamp,omitempty"`
}

func (m *MinersOnlineReading) Reset()                    { *m = MinersOnlineReading{} }
func (m *MinersOnlineReading) String() string            { return proto.CompactTextString(m) }
func (*MinersOnlineReading) ProtoMessage()               {}
func (*MinersOnlineReading) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *MinersOnlineReading) GetDeploymentID() uint64 {
	if m != nil {
		return m.DeploymentID
	}
	return 0
}

func (m *MinersOnlineReading) GetMinersOnline() float64 {
	if m != nil {
		return m.MinersOnline
	}
	return 0
}

func (m *MinersOnlineReading) GetReadingUnixTimestamp() uint64 {
	if m != nil {
		return m.ReadingUnixTimestamp
	}
	return 0
}

func (m *MinersOnlineReading) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *MinersOnlineReading) GetDBUnixTimestamp() uint64 {
	if m != nil {
		return m.DBUnixTimestamp
	}
	return 0
}

type MinersOnlineReadings struct {
	// A list of DamperDeviceReadings
	MinersOnlineReadings []*MinersOnlineReading `protobuf:"bytes,1,rep,name=MinersOnlineReadings" json:"MinersOnlineReadings,omitempty"`
}

func (m *MinersOnlineReadings) Reset()                    { *m = MinersOnlineReadings{} }
func (m *MinersOnlineReadings) String() string            { return proto.CompactTextString(m) }
func (*MinersOnlineReadings) ProtoMessage()               {}
func (*MinersOnlineReadings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *MinersOnlineReadings) GetMinersOnlineReadings() []*MinersOnlineReading {
	if m != nil {
		return m.MinersOnlineReadings
	}
	return nil
}

func init() {
	proto.RegisterType((*PingResponse)(nil), "deploymentdataservice.PingResponse")
	proto.RegisterType((*Deployment)(nil), "deploymentdataservice.Deployment")
	proto.RegisterType((*Deployments)(nil), "deploymentdataservice.Deployments")
	proto.RegisterType((*PowerMeter)(nil), "deploymentdataservice.PowerMeter")
	proto.RegisterType((*PowerMeters)(nil), "deploymentdataservice.PowerMeters")
	proto.RegisterType((*PowerMeterReading)(nil), "deploymentdataservice.PowerMeterReading")
	proto.RegisterType((*PowerMeterReadings)(nil), "deploymentdataservice.PowerMeterReadings")
	proto.RegisterType((*PowerSource)(nil), "deploymentdataservice.PowerSource")
	proto.RegisterType((*PowerSources)(nil), "deploymentdataservice.PowerSources")
	proto.RegisterType((*AvailablePowerReading)(nil), "deploymentdataservice.AvailablePowerReading")
	proto.RegisterType((*AvailablePowerReadings)(nil), "deploymentdataservice.AvailablePowerReadings")
	proto.RegisterType((*PowerGeneratedReading)(nil), "deploymentdataservice.PowerGeneratedReading")
	proto.RegisterType((*PowerGeneratedReadings)(nil), "deploymentdataservice.PowerGeneratedReadings")
	proto.RegisterType((*ExportToGridLimit)(nil), "deploymentdataservice.ExportToGridLimit")
	proto.RegisterType((*ExportToGridLimits)(nil), "deploymentdataservice.ExportToGridLimits")
	proto.RegisterType((*WindDirectionReading)(nil), "deploymentdataservice.WindDirectionReading")
	proto.RegisterType((*WindDirectionReadings)(nil), "deploymentdataservice.WindDirectionReadings")
	proto.RegisterType((*CLCStatusReading)(nil), "deploymentdataservice.CLCStatusReading")
	proto.RegisterType((*CLCStatusReadings)(nil), "deploymentdataservice.CLCStatusReadings")
	proto.RegisterType((*WindSpeedReading)(nil), "deploymentdataservice.WindSpeedReading")
	proto.RegisterType((*WindSpeedReadings)(nil), "deploymentdataservice.WindSpeedReadings")
	proto.RegisterType((*ImportFromGrid)(nil), "deploymentdataservice.ImportFromGrid")
	proto.RegisterType((*ImportFromGrids)(nil), "deploymentdataservice.ImportFromGrids")
	proto.RegisterType((*DeploymentPowerTarget)(nil), "deploymentdataservice.DeploymentPowerTarget")
	proto.RegisterType((*DeploymentPowerTargets)(nil), "deploymentdataservice.DeploymentPowerTargets")
	proto.RegisterType((*TempSensor)(nil), "deploymentdataservice.TempSensor")
	proto.RegisterType((*TempSensors)(nil), "deploymentdataservice.TempSensors")
	proto.RegisterType((*BMSDevice)(nil), "deploymentdataservice.BMSDevice")
	proto.RegisterType((*BMSDevices)(nil), "deploymentdataservice.BMSDevices")
	proto.RegisterType((*TempSensorReading)(nil), "deploymentdataservice.TempSensorReading")
	proto.RegisterType((*TempSensorReadings)(nil), "deploymentdataservice.TempSensorReadings")
	proto.RegisterType((*DamperDevice)(nil), "deploymentdataservice.DamperDevice")
	proto.RegisterType((*DamperDevices)(nil), "deploymentdataservice.DamperDevices")
	proto.RegisterType((*DamperDeviceReading)(nil), "deploymentdataservice.DamperDeviceReading")
	proto.RegisterType((*DamperDeviceReadings)(nil), "deploymentdataservice.DamperDeviceReadings")
	proto.RegisterType((*MinersOnlineReading)(nil), "deploymentdataservice.MinersOnlineReading")
	proto.RegisterType((*MinersOnlineReadings)(nil), "deploymentdataservice.MinersOnlineReadings")
	proto.RegisterEnum("deploymentdataservice.MeterPosition", MeterPosition_name, MeterPosition_value)
	proto.RegisterEnum("deploymentdataservice.PowerSourceType", PowerSourceType_name, PowerSourceType_value)
	proto.RegisterEnum("deploymentdataservice.InternalLocation", InternalLocation_name, InternalLocation_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeploymentData service

type DeploymentDataClient interface {
	// example rpc
	Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error)
	// Gets all the deployment records in the db
	GetAllDeployments(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Deployments, error)
	// Gets the deployment record when given a deployment record ID
	GetDeployment(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*Deployment, error)
	// Adds a deployment to the service
	AddDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*common.Void, error)
	// Gets a list of all power meters associated with a deployment
	GetAllPowerMetersByDeploymentID(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*PowerMeters, error)
	// Gets the power meter when given a power meter record ID
	GetPowerMeter(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*PowerMeter, error)
	// Adds a power meter to the service
	AddPowerMeter(ctx context.Context, in *PowerMeter, opts ...grpc.CallOption) (*common.Void, error)
	// Gets a list of power meter readings when provided with a time range and an ID for a power meter
	GetPowerMeterReadings(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*PowerMeterReadings, error)
	// Adds a new meter reading to the service
	AddPowerMeterReading(ctx context.Context, in *PowerMeterReading, opts ...grpc.CallOption) (*common.Void, error)
	// Gets a list of all power sources at a deployment
	GetAllPowerSourcesByDeploymentID(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*PowerSources, error)
	// Returns a single power source record when provided a power source ID
	GetPowerSource(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*PowerSource, error)
	// Adds a power source to the service
	AddPowerSource(ctx context.Context, in *PowerSource, opts ...grpc.CallOption) (*common.Void, error)
	// Gets a list of available power readings when provided a time range and an ID for a power source
	GetAvailablePowerReadings(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*AvailablePowerReadings, error)
	// Adds a AP reading to the service
	AddAvailablePowerReading(ctx context.Context, in *AvailablePowerReading, opts ...grpc.CallOption) (*common.Void, error)
	// Gets a list of PowerGenerated readings when provided a time range and an ID for a power source
	GetPowerGeneratedReadings(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*PowerGeneratedReadings, error)
	// Adds a AP reading to the service
	AddPowerGeneratedReading(ctx context.Context, in *PowerGeneratedReading, opts ...grpc.CallOption) (*common.Void, error)
	// Returns a list of historic grid export limits when given a time range and a power source id
	GetHistoricExportToGridLimits(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*ExportToGridLimits, error)
	// Returns the current agreed export grid limit when given a power source id
	GetLatestExportToGridLimit(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*ExportToGridLimit, error)
	// Sets a new grid export limit for a power source
	SetExportToGridLimit(ctx context.Context, in *ExportToGridLimit, opts ...grpc.CallOption) (*common.Void, error)
	// Gets a list of Wind Direction readings when provided a time range and an ID for a power source
	GetWindDirectionReadings(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*WindDirectionReadings, error)
	// Adds a Wind Direction reading to the service
	AddWindDirectionReading(ctx context.Context, in *WindDirectionReading, opts ...grpc.CallOption) (*common.Void, error)
	// Gets a list of clc status readings when provided a time range and an ID for a powersource
	GetCLCStatusReadings(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*CLCStatusReadings, error)
	// Adds a clc status reading to the service
	AddCLCStatusReading(ctx context.Context, in *CLCStatusReading, opts ...grpc.CallOption) (*common.Void, error)
	// Gets a list of windspeed readings when provided a time range and an ID for a powersource
	GetWindSpeedReadings(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*WindSpeedReadings, error)
	// Adds a windspeed reading to the service
	AddWindSpeedReading(ctx context.Context, in *WindSpeedReading, opts ...grpc.CallOption) (*common.Void, error)
	// Gets a list of grid import readings when provided a time range and an ID for a powersource
	GetImportFromGrid(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*ImportFromGrids, error)
	// Adds a grid import reading to the service
	AddImportFromGrid(ctx context.Context, in *ImportFromGrid, opts ...grpc.CallOption) (*common.Void, error)
	// Returns a list of power targets when provided a time range and an ID for a deployment
	GetDeploymentPowerTargets(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*DeploymentPowerTargets, error)
	// Adds a new deployment power target when provided a deployment ID
	AddDeploymentPowerTarget(ctx context.Context, in *DeploymentPowerTarget, opts ...grpc.CallOption) (*common.Void, error)
	// Gets a list of all Temp Sensors on a BMS
	GetAllTempSensorsByBMSDeviceID(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*TempSensors, error)
	// Returns a single TempSensor record when provided a temp sensor id
	GetTempSensor(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*TempSensor, error)
	// Adds a Temp Sensor to the service
	AddTempSensor(ctx context.Context, in *TempSensor, opts ...grpc.CallOption) (*common.Void, error)
	// Returns a list of temp sensor reads when provided a time range and a temp sensor ID
	GetTempSensorReadings(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*TempSensorReadings, error)
	// Adds a temp sensor reading to the service
	AddTempSensorReading(ctx context.Context, in *TempSensorReading, opts ...grpc.CallOption) (*common.Void, error)
	// Gets a list of all damper devices at a deployment
	GetAllDamperDevicesByDeploymentID(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*DamperDevices, error)
	// Returns a single damper device record when provided a damper ID
	GetDamperDevice(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*DamperDevice, error)
	// Adds a Damper Device to the service
	AddDamperDevice(ctx context.Context, in *DamperDevice, opts ...grpc.CallOption) (*common.Void, error)
	// Returns a list of damper device reads when provided a time range and a damper device ID
	GetDamperDeviceReadings(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*DamperDeviceReadings, error)
	// Adds a damper device reading to the service
	AddDamperDeviceReading(ctx context.Context, in *DamperDeviceReading, opts ...grpc.CallOption) (*common.Void, error)
	// Gets a list of all BMS devices associated with a deployment
	GetAllBMSDevicesByDeploymentID(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*BMSDevices, error)
	// Gets the BMS device when given a BMSDevice record ID
	GetBMSDevice(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*BMSDevice, error)
	// Adds a power meter to the service
	AddBMSDevice(ctx context.Context, in *BMSDevice, opts ...grpc.CallOption) (*common.Void, error)
	// Returns a list of machine online readings when provided a time range and a deployment ID
	GetMinersOnlineReadings(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*MinersOnlineReadings, error)
	// Adds a miners online reading to the service
	AddMinersOnlineReading(ctx context.Context, in *MinersOnlineReading, opts ...grpc.CallOption) (*common.Void, error)
}

type deploymentDataClient struct {
	cc *grpc.ClientConn
}

func NewDeploymentDataClient(cc *grpc.ClientConn) DeploymentDataClient {
	return &deploymentDataClient{cc}
}

func (c *deploymentDataClient) Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetAllDeployments(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Deployments, error) {
	out := new(Deployments)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetAllDeployments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetDeployment(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetDeployment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) AddDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/AddDeployment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetAllPowerMetersByDeploymentID(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*PowerMeters, error) {
	out := new(PowerMeters)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetAllPowerMetersByDeploymentID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetPowerMeter(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*PowerMeter, error) {
	out := new(PowerMeter)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetPowerMeter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) AddPowerMeter(ctx context.Context, in *PowerMeter, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/AddPowerMeter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetPowerMeterReadings(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*PowerMeterReadings, error) {
	out := new(PowerMeterReadings)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetPowerMeterReadings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) AddPowerMeterReading(ctx context.Context, in *PowerMeterReading, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/AddPowerMeterReading", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetAllPowerSourcesByDeploymentID(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*PowerSources, error) {
	out := new(PowerSources)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetAllPowerSourcesByDeploymentID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetPowerSource(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*PowerSource, error) {
	out := new(PowerSource)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetPowerSource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) AddPowerSource(ctx context.Context, in *PowerSource, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/AddPowerSource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetAvailablePowerReadings(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*AvailablePowerReadings, error) {
	out := new(AvailablePowerReadings)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetAvailablePowerReadings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) AddAvailablePowerReading(ctx context.Context, in *AvailablePowerReading, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/AddAvailablePowerReading", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetPowerGeneratedReadings(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*PowerGeneratedReadings, error) {
	out := new(PowerGeneratedReadings)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetPowerGeneratedReadings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) AddPowerGeneratedReading(ctx context.Context, in *PowerGeneratedReading, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/AddPowerGeneratedReading", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetHistoricExportToGridLimits(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*ExportToGridLimits, error) {
	out := new(ExportToGridLimits)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetHistoricExportToGridLimits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetLatestExportToGridLimit(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*ExportToGridLimit, error) {
	out := new(ExportToGridLimit)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetLatestExportToGridLimit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) SetExportToGridLimit(ctx context.Context, in *ExportToGridLimit, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/SetExportToGridLimit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetWindDirectionReadings(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*WindDirectionReadings, error) {
	out := new(WindDirectionReadings)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetWindDirectionReadings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) AddWindDirectionReading(ctx context.Context, in *WindDirectionReading, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/AddWindDirectionReading", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetCLCStatusReadings(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*CLCStatusReadings, error) {
	out := new(CLCStatusReadings)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetCLCStatusReadings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) AddCLCStatusReading(ctx context.Context, in *CLCStatusReading, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/AddCLCStatusReading", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetWindSpeedReadings(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*WindSpeedReadings, error) {
	out := new(WindSpeedReadings)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetWindSpeedReadings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) AddWindSpeedReading(ctx context.Context, in *WindSpeedReading, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/AddWindSpeedReading", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetImportFromGrid(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*ImportFromGrids, error) {
	out := new(ImportFromGrids)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetImportFromGrid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) AddImportFromGrid(ctx context.Context, in *ImportFromGrid, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/AddImportFromGrid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetDeploymentPowerTargets(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*DeploymentPowerTargets, error) {
	out := new(DeploymentPowerTargets)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetDeploymentPowerTargets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) AddDeploymentPowerTarget(ctx context.Context, in *DeploymentPowerTarget, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/AddDeploymentPowerTarget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetAllTempSensorsByBMSDeviceID(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*TempSensors, error) {
	out := new(TempSensors)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetAllTempSensorsByBMSDeviceID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetTempSensor(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*TempSensor, error) {
	out := new(TempSensor)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetTempSensor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) AddTempSensor(ctx context.Context, in *TempSensor, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/AddTempSensor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetTempSensorReadings(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*TempSensorReadings, error) {
	out := new(TempSensorReadings)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetTempSensorReadings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) AddTempSensorReading(ctx context.Context, in *TempSensorReading, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/AddTempSensorReading", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetAllDamperDevicesByDeploymentID(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*DamperDevices, error) {
	out := new(DamperDevices)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetAllDamperDevicesByDeploymentID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetDamperDevice(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*DamperDevice, error) {
	out := new(DamperDevice)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetDamperDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) AddDamperDevice(ctx context.Context, in *DamperDevice, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/AddDamperDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetDamperDeviceReadings(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*DamperDeviceReadings, error) {
	out := new(DamperDeviceReadings)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetDamperDeviceReadings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) AddDamperDeviceReading(ctx context.Context, in *DamperDeviceReading, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/AddDamperDeviceReading", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetAllBMSDevicesByDeploymentID(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*BMSDevices, error) {
	out := new(BMSDevices)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetAllBMSDevicesByDeploymentID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetBMSDevice(ctx context.Context, in *stdprotos.UniqueID, opts ...grpc.CallOption) (*BMSDevice, error) {
	out := new(BMSDevice)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetBMSDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) AddBMSDevice(ctx context.Context, in *BMSDevice, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/AddBMSDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) GetMinersOnlineReadings(ctx context.Context, in *stdprotos.TimeRangeWithUniqueID, opts ...grpc.CallOption) (*MinersOnlineReadings, error) {
	out := new(MinersOnlineReadings)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/GetMinersOnlineReadings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentDataClient) AddMinersOnlineReading(ctx context.Context, in *MinersOnlineReading, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/deploymentdataservice.DeploymentData/AddMinersOnlineReading", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeploymentData service

type DeploymentDataServer interface {
	// example rpc
	Ping(context.Context, *common.Void) (*PingResponse, error)
	// Gets all the deployment records in the db
	GetAllDeployments(context.Context, *common.Void) (*Deployments, error)
	// Gets the deployment record when given a deployment record ID
	GetDeployment(context.Context, *stdprotos.UniqueID) (*Deployment, error)
	// Adds a deployment to the service
	AddDeployment(context.Context, *Deployment) (*common.Void, error)
	// Gets a list of all power meters associated with a deployment
	GetAllPowerMetersByDeploymentID(context.Context, *stdprotos.UniqueID) (*PowerMeters, error)
	// Gets the power meter when given a power meter record ID
	GetPowerMeter(context.Context, *stdprotos.UniqueID) (*PowerMeter, error)
	// Adds a power meter to the service
	AddPowerMeter(context.Context, *PowerMeter) (*common.Void, error)
	// Gets a list of power meter readings when provided with a time range and an ID for a power meter
	GetPowerMeterReadings(context.Context, *stdprotos.TimeRangeWithUniqueID) (*PowerMeterReadings, error)
	// Adds a new meter reading to the service
	AddPowerMeterReading(context.Context, *PowerMeterReading) (*common.Void, error)
	// Gets a list of all power sources at a deployment
	GetAllPowerSourcesByDeploymentID(context.Context, *stdprotos.UniqueID) (*PowerSources, error)
	// Returns a single power source record when provided a power source ID
	GetPowerSource(context.Context, *stdprotos.UniqueID) (*PowerSource, error)
	// Adds a power source to the service
	AddPowerSource(context.Context, *PowerSource) (*common.Void, error)
	// Gets a list of available power readings when provided a time range and an ID for a power source
	GetAvailablePowerReadings(context.Context, *stdprotos.TimeRangeWithUniqueID) (*AvailablePowerReadings, error)
	// Adds a AP reading to the service
	AddAvailablePowerReading(context.Context, *AvailablePowerReading) (*common.Void, error)
	// Gets a list of PowerGenerated readings when provided a time range and an ID for a power source
	GetPowerGeneratedReadings(context.Context, *stdprotos.TimeRangeWithUniqueID) (*PowerGeneratedReadings, error)
	// Adds a AP reading to the service
	AddPowerGeneratedReading(context.Context, *PowerGeneratedReading) (*common.Void, error)
	// Returns a list of historic grid export limits when given a time range and a power source id
	GetHistoricExportToGridLimits(context.Context, *stdprotos.TimeRangeWithUniqueID) (*ExportToGridLimits, error)
	// Returns the current agreed export grid limit when given a power source id
	GetLatestExportToGridLimit(context.Context, *stdprotos.UniqueID) (*ExportToGridLimit, error)
	// Sets a new grid export limit for a power source
	SetExportToGridLimit(context.Context, *ExportToGridLimit) (*common.Void, error)
	// Gets a list of Wind Direction readings when provided a time range and an ID for a power source
	GetWindDirectionReadings(context.Context, *stdprotos.TimeRangeWithUniqueID) (*WindDirectionReadings, error)
	// Adds a Wind Direction reading to the service
	AddWindDirectionReading(context.Context, *WindDirectionReading) (*common.Void, error)
	// Gets a list of clc status readings when provided a time range and an ID for a powersource
	GetCLCStatusReadings(context.Context, *stdprotos.TimeRangeWithUniqueID) (*CLCStatusReadings, error)
	// Adds a clc status reading to the service
	AddCLCStatusReading(context.Context, *CLCStatusReading) (*common.Void, error)
	// Gets a list of windspeed readings when provided a time range and an ID for a powersource
	GetWindSpeedReadings(context.Context, *stdprotos.TimeRangeWithUniqueID) (*WindSpeedReadings, error)
	// Adds a windspeed reading to the service
	AddWindSpeedReading(context.Context, *WindSpeedReading) (*common.Void, error)
	// Gets a list of grid import readings when provided a time range and an ID for a powersource
	GetImportFromGrid(context.Context, *stdprotos.TimeRangeWithUniqueID) (*ImportFromGrids, error)
	// Adds a grid import reading to the service
	AddImportFromGrid(context.Context, *ImportFromGrid) (*common.Void, error)
	// Returns a list of power targets when provided a time range and an ID for a deployment
	GetDeploymentPowerTargets(context.Context, *stdprotos.TimeRangeWithUniqueID) (*DeploymentPowerTargets, error)
	// Adds a new deployment power target when provided a deployment ID
	AddDeploymentPowerTarget(context.Context, *DeploymentPowerTarget) (*common.Void, error)
	// Gets a list of all Temp Sensors on a BMS
	GetAllTempSensorsByBMSDeviceID(context.Context, *stdprotos.UniqueID) (*TempSensors, error)
	// Returns a single TempSensor record when provided a temp sensor id
	GetTempSensor(context.Context, *stdprotos.UniqueID) (*TempSensor, error)
	// Adds a Temp Sensor to the service
	AddTempSensor(context.Context, *TempSensor) (*common.Void, error)
	// Returns a list of temp sensor reads when provided a time range and a temp sensor ID
	GetTempSensorReadings(context.Context, *stdprotos.TimeRangeWithUniqueID) (*TempSensorReadings, error)
	// Adds a temp sensor reading to the service
	AddTempSensorReading(context.Context, *TempSensorReading) (*common.Void, error)
	// Gets a list of all damper devices at a deployment
	GetAllDamperDevicesByDeploymentID(context.Context, *stdprotos.UniqueID) (*DamperDevices, error)
	// Returns a single damper device record when provided a damper ID
	GetDamperDevice(context.Context, *stdprotos.UniqueID) (*DamperDevice, error)
	// Adds a Damper Device to the service
	AddDamperDevice(context.Context, *DamperDevice) (*common.Void, error)
	// Returns a list of damper device reads when provided a time range and a damper device ID
	GetDamperDeviceReadings(context.Context, *stdprotos.TimeRangeWithUniqueID) (*DamperDeviceReadings, error)
	// Adds a damper device reading to the service
	AddDamperDeviceReading(context.Context, *DamperDeviceReading) (*common.Void, error)
	// Gets a list of all BMS devices associated with a deployment
	GetAllBMSDevicesByDeploymentID(context.Context, *stdprotos.UniqueID) (*BMSDevices, error)
	// Gets the BMS device when given a BMSDevice record ID
	GetBMSDevice(context.Context, *stdprotos.UniqueID) (*BMSDevice, error)
	// Adds a power meter to the service
	AddBMSDevice(context.Context, *BMSDevice) (*common.Void, error)
	// Returns a list of machine online readings when provided a time range and a deployment ID
	GetMinersOnlineReadings(context.Context, *stdprotos.TimeRangeWithUniqueID) (*MinersOnlineReadings, error)
	// Adds a miners online reading to the service
	AddMinersOnlineReading(context.Context, *MinersOnlineReading) (*common.Void, error)
}

func RegisterDeploymentDataServer(s *grpc.Server, srv DeploymentDataServer) {
	s.RegisterService(&_DeploymentData_serviceDesc, srv)
}

func _DeploymentData_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).Ping(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetAllDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetAllDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetAllDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetAllDeployments(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.UniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetDeployment(ctx, req.(*stdprotos.UniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_AddDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).AddDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/AddDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).AddDeployment(ctx, req.(*Deployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetAllPowerMetersByDeploymentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.UniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetAllPowerMetersByDeploymentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetAllPowerMetersByDeploymentID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetAllPowerMetersByDeploymentID(ctx, req.(*stdprotos.UniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetPowerMeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.UniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetPowerMeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetPowerMeter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetPowerMeter(ctx, req.(*stdprotos.UniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_AddPowerMeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerMeter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).AddPowerMeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/AddPowerMeter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).AddPowerMeter(ctx, req.(*PowerMeter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetPowerMeterReadings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.TimeRangeWithUniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetPowerMeterReadings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetPowerMeterReadings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetPowerMeterReadings(ctx, req.(*stdprotos.TimeRangeWithUniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_AddPowerMeterReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerMeterReading)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).AddPowerMeterReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/AddPowerMeterReading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).AddPowerMeterReading(ctx, req.(*PowerMeterReading))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetAllPowerSourcesByDeploymentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.UniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetAllPowerSourcesByDeploymentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetAllPowerSourcesByDeploymentID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetAllPowerSourcesByDeploymentID(ctx, req.(*stdprotos.UniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetPowerSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.UniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetPowerSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetPowerSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetPowerSource(ctx, req.(*stdprotos.UniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_AddPowerSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerSource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).AddPowerSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/AddPowerSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).AddPowerSource(ctx, req.(*PowerSource))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetAvailablePowerReadings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.TimeRangeWithUniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetAvailablePowerReadings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetAvailablePowerReadings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetAvailablePowerReadings(ctx, req.(*stdprotos.TimeRangeWithUniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_AddAvailablePowerReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailablePowerReading)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).AddAvailablePowerReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/AddAvailablePowerReading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).AddAvailablePowerReading(ctx, req.(*AvailablePowerReading))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetPowerGeneratedReadings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.TimeRangeWithUniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetPowerGeneratedReadings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetPowerGeneratedReadings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetPowerGeneratedReadings(ctx, req.(*stdprotos.TimeRangeWithUniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_AddPowerGeneratedReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerGeneratedReading)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).AddPowerGeneratedReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/AddPowerGeneratedReading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).AddPowerGeneratedReading(ctx, req.(*PowerGeneratedReading))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetHistoricExportToGridLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.TimeRangeWithUniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetHistoricExportToGridLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetHistoricExportToGridLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetHistoricExportToGridLimits(ctx, req.(*stdprotos.TimeRangeWithUniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetLatestExportToGridLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.UniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetLatestExportToGridLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetLatestExportToGridLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetLatestExportToGridLimit(ctx, req.(*stdprotos.UniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_SetExportToGridLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportToGridLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).SetExportToGridLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/SetExportToGridLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).SetExportToGridLimit(ctx, req.(*ExportToGridLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetWindDirectionReadings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.TimeRangeWithUniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetWindDirectionReadings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetWindDirectionReadings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetWindDirectionReadings(ctx, req.(*stdprotos.TimeRangeWithUniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_AddWindDirectionReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WindDirectionReading)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).AddWindDirectionReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/AddWindDirectionReading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).AddWindDirectionReading(ctx, req.(*WindDirectionReading))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetCLCStatusReadings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.TimeRangeWithUniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetCLCStatusReadings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetCLCStatusReadings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetCLCStatusReadings(ctx, req.(*stdprotos.TimeRangeWithUniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_AddCLCStatusReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLCStatusReading)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).AddCLCStatusReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/AddCLCStatusReading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).AddCLCStatusReading(ctx, req.(*CLCStatusReading))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetWindSpeedReadings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.TimeRangeWithUniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetWindSpeedReadings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetWindSpeedReadings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetWindSpeedReadings(ctx, req.(*stdprotos.TimeRangeWithUniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_AddWindSpeedReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WindSpeedReading)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).AddWindSpeedReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/AddWindSpeedReading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).AddWindSpeedReading(ctx, req.(*WindSpeedReading))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetImportFromGrid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.TimeRangeWithUniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetImportFromGrid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetImportFromGrid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetImportFromGrid(ctx, req.(*stdprotos.TimeRangeWithUniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_AddImportFromGrid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportFromGrid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).AddImportFromGrid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/AddImportFromGrid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).AddImportFromGrid(ctx, req.(*ImportFromGrid))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetDeploymentPowerTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.TimeRangeWithUniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetDeploymentPowerTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetDeploymentPowerTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetDeploymentPowerTargets(ctx, req.(*stdprotos.TimeRangeWithUniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_AddDeploymentPowerTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentPowerTarget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).AddDeploymentPowerTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/AddDeploymentPowerTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).AddDeploymentPowerTarget(ctx, req.(*DeploymentPowerTarget))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetAllTempSensorsByBMSDeviceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.UniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetAllTempSensorsByBMSDeviceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetAllTempSensorsByBMSDeviceID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetAllTempSensorsByBMSDeviceID(ctx, req.(*stdprotos.UniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetTempSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.UniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetTempSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetTempSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetTempSensor(ctx, req.(*stdprotos.UniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_AddTempSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempSensor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).AddTempSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/AddTempSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).AddTempSensor(ctx, req.(*TempSensor))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetTempSensorReadings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.TimeRangeWithUniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetTempSensorReadings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetTempSensorReadings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetTempSensorReadings(ctx, req.(*stdprotos.TimeRangeWithUniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_AddTempSensorReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempSensorReading)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).AddTempSensorReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/AddTempSensorReading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).AddTempSensorReading(ctx, req.(*TempSensorReading))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetAllDamperDevicesByDeploymentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.UniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetAllDamperDevicesByDeploymentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetAllDamperDevicesByDeploymentID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetAllDamperDevicesByDeploymentID(ctx, req.(*stdprotos.UniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetDamperDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.UniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetDamperDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetDamperDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetDamperDevice(ctx, req.(*stdprotos.UniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_AddDamperDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DamperDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).AddDamperDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/AddDamperDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).AddDamperDevice(ctx, req.(*DamperDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetDamperDeviceReadings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.TimeRangeWithUniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetDamperDeviceReadings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetDamperDeviceReadings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetDamperDeviceReadings(ctx, req.(*stdprotos.TimeRangeWithUniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_AddDamperDeviceReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DamperDeviceReading)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).AddDamperDeviceReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/AddDamperDeviceReading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).AddDamperDeviceReading(ctx, req.(*DamperDeviceReading))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetAllBMSDevicesByDeploymentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.UniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetAllBMSDevicesByDeploymentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetAllBMSDevicesByDeploymentID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetAllBMSDevicesByDeploymentID(ctx, req.(*stdprotos.UniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetBMSDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.UniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetBMSDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetBMSDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetBMSDevice(ctx, req.(*stdprotos.UniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_AddBMSDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BMSDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).AddBMSDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/AddBMSDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).AddBMSDevice(ctx, req.(*BMSDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_GetMinersOnlineReadings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(stdprotos.TimeRangeWithUniqueID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).GetMinersOnlineReadings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/GetMinersOnlineReadings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).GetMinersOnlineReadings(ctx, req.(*stdprotos.TimeRangeWithUniqueID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentData_AddMinersOnlineReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinersOnlineReading)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentDataServer).AddMinersOnlineReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploymentdataservice.DeploymentData/AddMinersOnlineReading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentDataServer).AddMinersOnlineReading(ctx, req.(*MinersOnlineReading))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeploymentData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deploymentdataservice.DeploymentData",
	HandlerType: (*DeploymentDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _DeploymentData_Ping_Handler,
		},
		{
			MethodName: "GetAllDeployments",
			Handler:    _DeploymentData_GetAllDeployments_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _DeploymentData_GetDeployment_Handler,
		},
		{
			MethodName: "AddDeployment",
			Handler:    _DeploymentData_AddDeployment_Handler,
		},
		{
			MethodName: "GetAllPowerMetersByDeploymentID",
			Handler:    _DeploymentData_GetAllPowerMetersByDeploymentID_Handler,
		},
		{
			MethodName: "GetPowerMeter",
			Handler:    _DeploymentData_GetPowerMeter_Handler,
		},
		{
			MethodName: "AddPowerMeter",
			Handler:    _DeploymentData_AddPowerMeter_Handler,
		},
		{
			MethodName: "GetPowerMeterReadings",
			Handler:    _DeploymentData_GetPowerMeterReadings_Handler,
		},
		{
			MethodName: "AddPowerMeterReading",
			Handler:    _DeploymentData_AddPowerMeterReading_Handler,
		},
		{
			MethodName: "GetAllPowerSourcesByDeploymentID",
			Handler:    _DeploymentData_GetAllPowerSourcesByDeploymentID_Handler,
		},
		{
			MethodName: "GetPowerSource",
			Handler:    _DeploymentData_GetPowerSource_Handler,
		},
		{
			MethodName: "AddPowerSource",
			Handler:    _DeploymentData_AddPowerSource_Handler,
		},
		{
			MethodName: "GetAvailablePowerReadings",
			Handler:    _DeploymentData_GetAvailablePowerReadings_Handler,
		},
		{
			MethodName: "AddAvailablePowerReading",
			Handler:    _DeploymentData_AddAvailablePowerReading_Handler,
		},
		{
			MethodName: "GetPowerGeneratedReadings",
			Handler:    _DeploymentData_GetPowerGeneratedReadings_Handler,
		},
		{
			MethodName: "AddPowerGeneratedReading",
			Handler:    _DeploymentData_AddPowerGeneratedReading_Handler,
		},
		{
			MethodName: "GetHistoricExportToGridLimits",
			Handler:    _DeploymentData_GetHistoricExportToGridLimits_Handler,
		},
		{
			MethodName: "GetLatestExportToGridLimit",
			Handler:    _DeploymentData_GetLatestExportToGridLimit_Handler,
		},
		{
			MethodName: "SetExportToGridLimit",
			Handler:    _DeploymentData_SetExportToGridLimit_Handler,
		},
		{
			MethodName: "GetWindDirectionReadings",
			Handler:    _DeploymentData_GetWindDirectionReadings_Handler,
		},
		{
			MethodName: "AddWindDirectionReading",
			Handler:    _DeploymentData_AddWindDirectionReading_Handler,
		},
		{
			MethodName: "GetCLCStatusReadings",
			Handler:    _DeploymentData_GetCLCStatusReadings_Handler,
		},
		{
			MethodName: "AddCLCStatusReading",
			Handler:    _DeploymentData_AddCLCStatusReading_Handler,
		},
		{
			MethodName: "GetWindSpeedReadings",
			Handler:    _DeploymentData_GetWindSpeedReadings_Handler,
		},
		{
			MethodName: "AddWindSpeedReading",
			Handler:    _DeploymentData_AddWindSpeedReading_Handler,
		},
		{
			MethodName: "GetImportFromGrid",
			Handler:    _DeploymentData_GetImportFromGrid_Handler,
		},
		{
			MethodName: "AddImportFromGrid",
			Handler:    _DeploymentData_AddImportFromGrid_Handler,
		},
		{
			MethodName: "GetDeploymentPowerTargets",
			Handler:    _DeploymentData_GetDeploymentPowerTargets_Handler,
		},
		{
			MethodName: "AddDeploymentPowerTarget",
			Handler:    _DeploymentData_AddDeploymentPowerTarget_Handler,
		},
		{
			MethodName: "GetAllTempSensorsByBMSDeviceID",
			Handler:    _DeploymentData_GetAllTempSensorsByBMSDeviceID_Handler,
		},
		{
			MethodName: "GetTempSensor",
			Handler:    _DeploymentData_GetTempSensor_Handler,
		},
		{
			MethodName: "AddTempSensor",
			Handler:    _DeploymentData_AddTempSensor_Handler,
		},
		{
			MethodName: "GetTempSensorReadings",
			Handler:    _DeploymentData_GetTempSensorReadings_Handler,
		},
		{
			MethodName: "AddTempSensorReading",
			Handler:    _DeploymentData_AddTempSensorReading_Handler,
		},
		{
			MethodName: "GetAllDamperDevicesByDeploymentID",
			Handler:    _DeploymentData_GetAllDamperDevicesByDeploymentID_Handler,
		},
		{
			MethodName: "GetDamperDevice",
			Handler:    _DeploymentData_GetDamperDevice_Handler,
		},
		{
			MethodName: "AddDamperDevice",
			Handler:    _DeploymentData_AddDamperDevice_Handler,
		},
		{
			MethodName: "GetDamperDeviceReadings",
			Handler:    _DeploymentData_GetDamperDeviceReadings_Handler,
		},
		{
			MethodName: "AddDamperDeviceReading",
			Handler:    _DeploymentData_AddDamperDeviceReading_Handler,
		},
		{
			MethodName: "GetAllBMSDevicesByDeploymentID",
			Handler:    _DeploymentData_GetAllBMSDevicesByDeploymentID_Handler,
		},
		{
			MethodName: "GetBMSDevice",
			Handler:    _DeploymentData_GetBMSDevice_Handler,
		},
		{
			MethodName: "AddBMSDevice",
			Handler:    _DeploymentData_AddBMSDevice_Handler,
		},
		{
			MethodName: "GetMinersOnlineReadings",
			Handler:    _DeploymentData_GetMinersOnlineReadings_Handler,
		},
		{
			MethodName: "AddMinersOnlineReading",
			Handler:    _DeploymentData_AddMinersOnlineReading_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.lakeparime.info/apis/deploymentdataservice/deploymentdataservice.proto",
}

func init() {
	proto.RegisterFile("golang.lakeparime.info/apis/deploymentdataservice/deploymentdataservice.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 2053 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x5a, 0x4f, 0x93, 0xdb, 0x48,
	0x15, 0x5f, 0xcb, 0x33, 0xc9, 0xcc, 0xcb, 0x78, 0xc6, 0xd3, 0x33, 0x93, 0x78, 0x0d, 0x0b, 0x8e,
	0x36, 0x84, 0xd9, 0xc9, 0xe2, 0xdd, 0x0a, 0x61, 0xab, 0xf6, 0x92, 0x8a, 0xff, 0x4c, 0x1c, 0xb1,
	0x1e, 0xdb, 0x25, 0x7b, 0x32, 0x21, 0xc0, 0x56, 0x29, 0x56, 0xe3, 0xd5, 0x62, 0x49, 0x46, 0xdd,
	0xce, 0x26, 0x1c, 0x38, 0x40, 0x15, 0x05, 0x47, 0x28, 0x0a, 0xaa, 0xe0, 0x23, 0xf0, 0x61, 0x38,
	0xf3, 0x21, 0xb8, 0x53, 0xc5, 0x01, 0x4a, 0xff, 0xac, 0x6e, 0xa9, 0x15, 0x49, 0x5e, 0x0e, 0xae,
	0xad, 0x3d, 0x8d, 0xfb, 0xf5, 0x7b, 0x4f, 0xaf, 0x7f, 0x3f, 0xbd, 0x56, 0xf7, 0x7b, 0x03, 0x17,
	0x33, 0x7b, 0xae, 0x59, 0xb3, 0xe6, 0x5c, 0xfb, 0x39, 0x5e, 0x68, 0x8e, 0x61, 0xe2, 0xa6, 0x61,
	0xfd, 0xcc, 0xfe, 0x40, 0x5b, 0x18, 0xe4, 0x03, 0x1d, 0x2f, 0xe6, 0xf6, 0x6b, 0x13, 0x5b, 0x54,
	0xd7, 0xa8, 0x46, 0xb0, 0xf3, 0xd2, 0x98, 0x62, 0xb1, 0xb4, 0xb9, 0x70, 0x6c, 0x6a, 0xa3, 0x13,
	0xe1, 0x64, 0xbd, 0x19, 0x3c, 0x65, 0x6a, 0x5b, 0x8e, 0xa6, 0x7f, 0x61, 0xdb, 0x7a, 0xd3, 0xc2,
	0xd4, 0x7f, 0xc8, 0xd4, 0x36, 0x4d, 0xdb, 0x0a, 0xfe, 0xf8, 0x6e, 0xea, 0x3f, 0x78, 0x53, 0x54,
	0x84, 0xea, 0x9e, 0x16, 0xf3, 0xcb, 0x37, 0x93, 0xcf, 0x60, 0x6f, 0x64, 0x58, 0x33, 0x15, 0x93,
	0x85, 0x6d, 0x11, 0x8c, 0xea, 0xb0, 0x13, 0xfe, 0xae, 0x95, 0x1a, 0xa5, 0xd3, 0x5d, 0x75, 0x35,
	0x96, 0x7f, 0x2b, 0x01, 0x74, 0x57, 0xc1, 0xa2, 0xbb, 0xb0, 0x1f, 0x8d, 0x06, 0x9a, 0x19, 0x1a,
	0xc4, 0xa4, 0xe8, 0x9b, 0xb0, 0xdb, 0xb7, 0xad, 0x99, 0x41, 0x97, 0x3a, 0xae, 0x49, 0x8d, 0xd2,
	0x69, 0x49, 0x8d, 0x04, 0xee, 0x03, 0xfb, 0x1a, 0xf5, 0x27, 0xcb, 0xde, 0xe4, 0x6a, 0x8c, 0xba,
	0x70, 0x2b, 0xf2, 0x75, 0x69, 0x19, 0xaf, 0x26, 0x86, 0x89, 0x09, 0xd5, 0xcc, 0x45, 0x6d, 0xab,
	0x51, 0x3a, 0xdd, 0x6a, 0xc3, 0x5f, 0x7f, 0xfd, 0xf6, 0xb5, 0xa5, 0x61, 0xd1, 0x8f, 0x1e, 0xa8,
	0x69, 0xaa, 0xa8, 0x0e, 0x92, 0xd2, 0xad, 0x5d, 0x4b, 0x18, 0x48, 0x4a, 0x17, 0x3d, 0x80, 0x83,
	0x6e, 0x9b, 0xf7, 0x7c, 0x3d, 0xa1, 0x18, 0x57, 0x91, 0x55, 0xb8, 0x11, 0x3d, 0x8c, 0xa0, 0x0e,
	0x37, 0xac, 0x95, 0x1a, 0xe5, 0xd3, 0x1b, 0xf7, 0x6f, 0x37, 0xc5, 0xa4, 0x47, 0x9a, 0x2a, 0x6b,
	0x25, 0xff, 0xa9, 0x0c, 0x30, 0xb2, 0xbf, 0xc0, 0xce, 0x05, 0xa6, 0xd8, 0x41, 0x4d, 0xd8, 0x8b,
	0x66, 0x95, 0xae, 0x07, 0x2d, 0x1f, 0x15, 0x37, 0x8f, 0x7e, 0x08, 0x15, 0xcf, 0x70, 0x64, 0x13,
	0x83, 0x1a, 0xb6, 0xe5, 0x01, 0xbd, 0x7f, 0xff, 0x4e, 0x4a, 0x14, 0x9c, 0xae, 0xca, 0x9b, 0x22,
	0x04, 0x5b, 0x1e, 0x9d, 0x65, 0x8f, 0x4e, 0xef, 0x37, 0x6a, 0xb8, 0x6b, 0x24, 0x53, 0xc7, 0x58,
	0x78, 0xde, 0xb7, 0xbc, 0x29, 0x56, 0x84, 0x1e, 0xc1, 0x89, 0x1f, 0x11, 0xd6, 0x79, 0x40, 0xb7,
	0x13, 0xa1, 0x8b, 0x15, 0xff, 0xff, 0x44, 0xa1, 0x2a, 0x94, 0x95, 0xd1, 0x83, 0xda, 0x8e, 0x17,
	0xad, 0xfb, 0xd3, 0x5d, 0xdb, 0xc8, 0x76, 0x68, 0x6d, 0xb7, 0x51, 0x3a, 0xad, 0xa8, 0xde, 0x6f,
	0xff, 0x9d, 0x9f, 0x19, 0x84, 0x62, 0xa7, 0x06, 0x9e, 0x7c, 0x35, 0x76, 0xa9, 0x8e, 0x58, 0xf1,
	0xa8, 0x66, 0x86, 0x19, 0x54, 0x47, 0x9a, 0x2a, 0x6b, 0x25, 0xff, 0x45, 0x82, 0x43, 0x66, 0x0e,
	0x6b, 0xba, 0x61, 0xcd, 0x5c, 0xc6, 0x23, 0xa1, 0x98, 0x71, 0x76, 0x1e, 0x3d, 0x82, 0x6f, 0x74,
	0x96, 0x8e, 0x83, 0x2d, 0x3a, 0x5e, 0x9a, 0xa6, 0xe6, 0x72, 0xa0, 0x58, 0x57, 0x1a, 0xa5, 0x4f,
	0xec, 0xa5, 0x43, 0x82, 0x44, 0x7b, 0x93, 0x0a, 0x7a, 0x08, 0xc7, 0xc1, 0xc3, 0x79, 0x60, 0xcb,
	0x89, 0x27, 0x0b, 0xf5, 0x02, 0xbe, 0xb6, 0xf2, 0xf2, 0xb5, 0x9d, 0x9d, 0x58, 0x16, 0xa0, 0x04,
	0x30, 0x04, 0x3d, 0x13, 0x49, 0x03, 0xec, 0x4f, 0xb3, 0xb1, 0xf7, 0x0d, 0x54, 0x81, 0x0f, 0xf9,
	0x6f, 0xe5, 0x80, 0xcf, 0xb1, 0xbd, 0x74, 0xa6, 0xb8, 0x70, 0xd6, 0x8d, 0xe0, 0x80, 0x31, 0x9f,
	0xbc, 0x5e, 0xe0, 0x20, 0xef, 0xee, 0xbe, 0x29, 0xac, 0x48, 0x5b, 0x8d, 0x9b, 0x7f, 0x9d, 0x7b,
	0x4c, 0xee, 0x3d, 0x0d, 0x32, 0xc2, 0x87, 0x87, 0xa0, 0xc7, 0xfc, 0x38, 0x78, 0x03, 0xe4, 0x6c,
	0xa8, 0x55, 0xce, 0x4e, 0xfe, 0x83, 0x04, 0x27, 0xad, 0x97, 0x9a, 0x31, 0xd7, 0x5e, 0xcc, 0xb1,
	0x37, 0x13, 0xe6, 0xe0, 0x87, 0x50, 0x61, 0x34, 0x85, 0x2f, 0x00, 0xaf, 0x80, 0x1e, 0xc4, 0x5d,
	0xf9, 0x09, 0x16, 0xe6, 0x9f, 0x78, 0x72, 0x03, 0x33, 0xef, 0x57, 0x70, 0x53, 0x08, 0x09, 0x41,
	0x7a, 0xda, 0x4c, 0x80, 0xff, 0xfb, 0x29, 0xf8, 0x0b, 0x8d, 0xd4, 0x14, 0x5f, 0x1e, 0x27, 0x9e,
	0xa4, 0x87, 0x2d, 0xec, 0x68, 0x14, 0xeb, 0x5f, 0x8a, 0x13, 0xde, 0x55, 0x8c, 0x13, 0xe1, 0xe4,
	0x66, 0x72, 0x22, 0x84, 0xc4, 0xe3, 0x44, 0x3c, 0x93, 0xc1, 0x89, 0xd0, 0x48, 0x4d, 0xf1, 0x25,
	0xff, 0x46, 0x82, 0xc3, 0xf3, 0x57, 0x0b, 0xdb, 0xa1, 0x13, 0xbb, 0xe7, 0x18, 0x7a, 0xdf, 0x30,
	0x0d, 0xba, 0x06, 0x1f, 0x67, 0x50, 0xbd, 0xd0, 0x5e, 0xf9, 0x9e, 0x78, 0x2a, 0x12, 0xf2, 0xcd,
	0xfc, 0x26, 0x25, 0x40, 0xf0, 0xbe, 0x49, 0x49, 0x69, 0xc6, 0x37, 0x29, 0x61, 0xa0, 0x0a, 0x7c,
	0xc8, 0x7f, 0x94, 0xe0, 0xf8, 0xca, 0xb0, 0xf4, 0xae, 0xe1, 0xe0, 0xa9, 0x77, 0x3c, 0x5b, 0x3b,
	0x11, 0x3e, 0x82, 0x9b, 0x9c, 0x27, 0xc5, 0xea, 0xe2, 0x99, 0x83, 0x71, 0x08, 0x7f, 0xca, 0xec,
	0x06, 0x92, 0xf0, 0x4b, 0x38, 0x11, 0x61, 0x42, 0x90, 0x96, 0x32, 0x11, 0x50, 0x71, 0x2f, 0x85,
	0x0a, 0x91, 0x8d, 0x2a, 0xf6, 0x24, 0xff, 0x4e, 0x82, 0x6a, 0xa7, 0xdf, 0x19, 0x53, 0x8d, 0x2e,
	0xc9, 0xfa, 0x64, 0x7c, 0x08, 0x95, 0x95, 0x97, 0x8e, 0x1d, 0x5c, 0x85, 0x62, 0x16, 0x9c, 0xc2,
	0x06, 0xd2, 0xf0, 0x39, 0x1c, 0xc6, 0x91, 0x20, 0xe8, 0x52, 0x20, 0x0c, 0xe0, 0xff, 0x6e, 0x0a,
	0xfc, 0x71, 0x7d, 0x35, 0xe9, 0x41, 0xfe, 0xb3, 0x04, 0x55, 0x97, 0x90, 0xf1, 0x02, 0x7f, 0x99,
	0x8f, 0xc1, 0x43, 0xa8, 0xaf, 0xbc, 0x28, 0x96, 0x7f, 0x02, 0x1f, 0x61, 0x67, 0x8c, 0xa7, 0xb6,
	0xa5, 0x07, 0x79, 0xf0, 0x06, 0x8d, 0xcd, 0x24, 0x21, 0x8e, 0x8b, 0x47, 0x42, 0x42, 0x98, 0x41,
	0x42, 0x5c, 0x5f, 0x4d, 0x7a, 0x90, 0xff, 0x5d, 0x82, 0x7d, 0xc5, 0x74, 0xf7, 0xa8, 0xc7, 0x8e,
	0x6d, 0xba, 0xbb, 0x54, 0xe1, 0x33, 0xf2, 0x1d, 0xa8, 0xf8, 0x1e, 0xf8, 0xad, 0x9f, 0x17, 0x6e,
	0x20, 0xcc, 0x2f, 0xe0, 0x80, 0x5f, 0x39, 0x41, 0xc3, 0x84, 0x28, 0x80, 0xf8, 0x3b, 0x29, 0x10,
	0xf3, 0xda, 0x6a, 0xdc, 0x5a, 0xfe, 0xbd, 0x14, 0x1e, 0xdc, 0x5d, 0x4b, 0xef, 0xc5, 0x9d, 0x68,
	0xce, 0x0c, 0xd3, 0xc2, 0x28, 0x37, 0x83, 0x3b, 0x92, 0x6f, 0xce, 0x43, 0x2d, 0x98, 0xd9, 0xcc,
	0xd3, 0x8e, 0x10, 0x0a, 0xef, 0xb4, 0x23, 0x9e, 0xc9, 0x38, 0xed, 0x08, 0x8d, 0xd4, 0x14, 0x5f,
	0xf2, 0xbf, 0x24, 0x80, 0x09, 0x36, 0x17, 0x63, 0x6c, 0x11, 0xdb, 0x41, 0x0d, 0xd8, 0x6e, 0x5f,
	0x8c, 0x15, 0x5d, 0x80, 0xbc, 0x3f, 0x81, 0xae, 0x00, 0x45, 0xfa, 0x7d, 0x7b, 0xaa, 0x31, 0x75,
	0x97, 0xb4, 0x9c, 0x53, 0x2c, 0x8a, 0x1d, 0x4b, 0x9b, 0x87, 0xea, 0xaa, 0xc0, 0xc5, 0x57, 0xe8,
	0x0e, 0xc8, 0xde, 0xee, 0x76, 0x92, 0x95, 0x95, 0x68, 0xed, 0x5e, 0x65, 0x85, 0x19, 0x66, 0x54,
	0x56, 0x22, 0x4d, 0x95, 0xb5, 0x92, 0xff, 0x2e, 0xc1, 0x6e, 0xfb, 0x62, 0xdc, 0xc5, 0xae, 0x56,
	0xe1, 0x1c, 0x0a, 0x71, 0x97, 0xd2, 0x71, 0x2f, 0x17, 0xc0, 0x7d, 0xab, 0x18, 0xee, 0xdb, 0x79,
	0x71, 0xbf, 0x96, 0xfb, 0xee, 0x7d, 0x3d, 0x79, 0xf7, 0xde, 0x89, 0xee, 0xde, 0xf2, 0x00, 0x60,
	0x05, 0x16, 0x41, 0x8f, 0xd8, 0x51, 0x80, 0x7f, 0x23, 0x05, 0xff, 0x95, 0xa2, 0xca, 0xd8, 0xc8,
	0xff, 0x29, 0xc1, 0x21, 0xc3, 0x4c, 0x54, 0xd7, 0x8a, 0x84, 0x62, 0x16, 0xd8, 0x79, 0xf7, 0x7b,
	0xe1, 0x8e, 0x15, 0xab, 0x83, 0xe7, 0xc4, 0x58, 0xae, 0xbe, 0x17, 0x9c, 0x70, 0x33, 0xef, 0x09,
	0x89, 0xc5, 0x7b, 0xf7, 0x84, 0xa4, 0x34, 0xe3, 0x9e, 0x90, 0x30, 0x50, 0x05, 0x3e, 0xe4, 0x7f,
	0x4a, 0xb0, 0xd7, 0xd5, 0xcc, 0x05, 0x76, 0xd6, 0x7c, 0xdd, 0x87, 0xb0, 0xef, 0xdb, 0xaf, 0xbb,
	0x77, 0xc5, 0xcc, 0xbf, 0x3a, 0xfb, 0x96, 0xfc, 0x1c, 0x2a, 0x2c, 0xb4, 0x04, 0x29, 0x31, 0x41,
	0xc0, 0xe0, 0xbb, 0x69, 0x5f, 0x1e, 0x46, 0x57, 0xe5, 0x2d, 0xe5, 0xff, 0x96, 0xe0, 0x88, 0x9b,
	0x0f, 0xf2, 0xe4, 0x7e, 0x48, 0x87, 0x2f, 0x16, 0x12, 0x18, 0xd3, 0x40, 0x72, 0xf4, 0x0a, 0x98,
	0xda, 0xea, 0x38, 0xcb, 0xc9, 0x36, 0x30, 0x53, 0x5e, 0xc2, 0xb1, 0x00, 0x00, 0x82, 0x3e, 0x15,
	0xcb, 0x03, 0xac, 0xcf, 0xf2, 0x60, 0x1d, 0xe4, 0x8b, 0xd0, 0x8f, 0xbb, 0x3f, 0x1d, 0x5d, 0x18,
	0x16, 0x76, 0xc8, 0xd0, 0x9a, 0x1b, 0x16, 0x66, 0x76, 0xa8, 0x42, 0x89, 0x23, 0xc3, 0x1e, 0xeb,
	0x26, 0x44, 0x9d, 0x95, 0x6d, 0x26, 0xea, 0x82, 0xc5, 0x7b, 0xa8, 0x8b, 0xe4, 0x19, 0xa8, 0x0b,
	0x4c, 0x54, 0xa1, 0x9f, 0xb3, 0xe7, 0xb1, 0xce, 0x14, 0x3a, 0x82, 0x83, 0xcb, 0xc1, 0x27, 0x83,
	0xe1, 0xd5, 0x60, 0x34, 0x1c, 0x2b, 0x13, 0x65, 0x38, 0xa8, 0xbe, 0x85, 0xf6, 0x60, 0x67, 0x34,
	0xbc, 0x3a, 0x57, 0xdb, 0xc3, 0x67, 0xd5, 0x12, 0x3a, 0x80, 0x1b, 0xde, 0x68, 0x3c, 0xbc, 0x54,
	0x3b, 0xe7, 0x55, 0x09, 0x9d, 0xc0, 0xe1, 0x68, 0xa8, 0x0c, 0x26, 0xc3, 0xc7, 0x9d, 0xe1, 0x60,
	0x70, 0xde, 0xf1, 0xac, 0xca, 0x67, 0x1f, 0x27, 0xea, 0xef, 0xe8, 0x10, 0x2a, 0x81, 0xf7, 0xc0,
	0xf8, 0x2d, 0xb4, 0x03, 0x5b, 0x57, 0xca, 0xa0, 0x5b, 0x2d, 0xa1, 0x5d, 0xd8, 0x1e, 0x0f, 0xfb,
	0x2d, 0xb5, 0x2a, 0x9d, 0xb5, 0xa1, 0x1a, 0xdf, 0xd0, 0x98, 0xc8, 0xfa, 0xc3, 0x4e, 0x2b, 0x88,
	0xec, 0x06, 0x5c, 0x7f, 0x32, 0x9c, 0x28, 0xe3, 0xfe, 0x79, 0xb5, 0xe4, 0x86, 0xd9, 0x19, 0xf6,
	0xbb, 0xde, 0x48, 0xba, 0xff, 0x8f, 0x77, 0xd8, 0x16, 0x68, 0x57, 0xa3, 0x1a, 0xfa, 0x18, 0xb6,
	0x46, 0xee, 0x3b, 0xb5, 0xd7, 0x0c, 0xba, 0xb3, 0x4f, 0x6d, 0x43, 0xaf, 0xa7, 0xed, 0x13, 0x5c,
	0xeb, 0xf5, 0x1c, 0x0e, 0x7b, 0x98, 0xb6, 0xe6, 0x73, 0xb6, 0xb7, 0xc8, 0xfb, 0x91, 0x33, 0x4f,
	0xba, 0x04, 0xf5, 0xa0, 0xd2, 0xc3, 0x94, 0xe9, 0xd3, 0x1e, 0x35, 0xa3, 0xa6, 0xef, 0xa5, 0x65,
	0xfc, 0x62, 0x89, 0x95, 0x6e, 0x3d, 0xbb, 0x3d, 0x89, 0x1e, 0x41, 0xa5, 0xa5, 0xeb, 0x8c, 0x20,
	0xdb, 0xa6, 0xce, 0x85, 0x8b, 0x9e, 0xc3, 0xb7, 0xfd, 0x15, 0x31, 0xdd, 0xaf, 0xf6, 0x6b, 0x2e,
	0x97, 0x84, 0xc1, 0xc9, 0x99, 0x4d, 0x9d, 0x70, 0x99, 0x4c, 0xc7, 0xb4, 0xd0, 0x32, 0x19, 0x3b,
	0x7f, 0x99, 0x8c, 0x20, 0xdb, 0x26, 0xb6, 0x4c, 0x1d, 0x4e, 0xb8, 0x50, 0x56, 0xa9, 0xd5, 0x60,
	0x42, 0x72, 0x13, 0x51, 0xd5, 0xac, 0x19, 0xbe, 0x32, 0xe8, 0x67, 0xab, 0xf8, 0xde, 0xcb, 0xdb,
	0xbe, 0x22, 0x68, 0x00, 0xc7, 0x5c, 0x9c, 0xe1, 0xee, 0x95, 0xbb, 0x03, 0x16, 0x8b, 0xfa, 0x27,
	0xd0, 0x60, 0xc8, 0x09, 0x7a, 0x23, 0x79, 0xd8, 0x79, 0x37, 0xbb, 0xe1, 0xe2, 0x7e, 0x30, 0xf7,
	0x43, 0x4c, 0x82, 0xde, 0x5a, 0x71, 0xa6, 0x03, 0xc3, 0x36, 0xec, 0x87, 0x0b, 0x0f, 0x24, 0x39,
	0xac, 0x62, 0x8b, 0x9d, 0xc3, 0xdb, 0xee, 0x62, 0xc5, 0x1d, 0x8e, 0x6c, 0x9a, 0xbe, 0x57, 0xa4,
	0xc7, 0x41, 0xd0, 0x53, 0xa8, 0xb5, 0x74, 0x5d, 0xdc, 0x62, 0x2a, 0xd4, 0x2e, 0x11, 0xae, 0x22,
	0xa5, 0x27, 0xb0, 0xfe, 0x2a, 0x52, 0x1c, 0xfa, 0xab, 0x10, 0x37, 0x65, 0x0a, 0x35, 0x18, 0x12,
	0xab, 0x78, 0xa7, 0x87, 0xe9, 0x13, 0x83, 0x50, 0xdb, 0x31, 0xa6, 0x82, 0xda, 0xfa, 0xfa, 0x69,
	0x23, 0x70, 0xf6, 0x63, 0xa8, 0xf7, 0x30, 0xed, 0x6b, 0x14, 0x13, 0x9a, 0x6c, 0x66, 0x08, 0x5f,
	0xca, 0xdc, 0xf5, 0x7b, 0x37, 0x27, 0xc7, 0x58, 0xe0, 0x36, 0xb7, 0x87, 0x18, 0x34, 0x9f, 0x43,
	0xad, 0x87, 0xa9, 0xb8, 0xd2, 0x9d, 0x8d, 0xca, 0xfb, 0x05, 0x8a, 0xdd, 0x04, 0x4d, 0xe0, 0x56,
	0x4b, 0xd7, 0x85, 0x9d, 0x86, 0x22, 0x55, 0xf3, 0xd8, 0x0a, 0x5e, 0xc0, 0x71, 0x0f, 0xd3, 0x64,
	0x91, 0x38, 0x3b, 0xfa, 0xd3, 0x9c, 0xb5, 0x62, 0x82, 0xfa, 0x70, 0xd4, 0xd2, 0xf5, 0x44, 0x49,
	0x3e, 0x6f, 0xb1, 0x59, 0x18, 0x71, 0xb2, 0xa2, 0xba, 0x7e, 0xc4, 0x49, 0x5f, 0x7e, 0xc4, 0x89,
	0x6a, 0x76, 0xde, 0xca, 0x6c, 0x2c, 0xe2, 0x9f, 0x7a, 0x07, 0x85, 0x58, 0x59, 0x36, 0x3b, 0xdc,
	0xbb, 0xb9, 0x8a, 0x94, 0x04, 0x3d, 0x81, 0xc3, 0x96, 0xae, 0xc7, 0xdc, 0xe7, 0xab, 0x70, 0x0a,
	0xf7, 0xab, 0x94, 0xaa, 0xde, 0xfa, 0xfb, 0x55, 0x8a, 0x43, 0x7f, 0xbf, 0x12, 0x97, 0x53, 0x0b,
	0x95, 0x08, 0x63, 0xab, 0xf8, 0x11, 0x7c, 0xcb, 0xff, 0x50, 0x32, 0x95, 0xa6, 0xf6, 0xeb, 0x55,
	0xdd, 0xa3, 0xe8, 0x21, 0x86, 0x2d, 0x7a, 0xf9, 0x87, 0x18, 0xa6, 0xea, 0x58, 0xe8, 0x10, 0xc3,
	0xd8, 0xf9, 0x87, 0x18, 0x46, 0x90, 0x6d, 0x23, 0x3c, 0xc4, 0x08, 0x2a, 0x18, 0xeb, 0xef, 0xc6,
	0x02, 0x67, 0xfe, 0x21, 0x26, 0x59, 0x24, 0xca, 0x5d, 0x0a, 0x89, 0x45, 0xfd, 0x29, 0xdc, 0x0e,
	0xce, 0xcc, 0xec, 0x1d, 0x3b, 0xcf, 0x29, 0xe6, 0x4e, 0x8e, 0xeb, 0x24, 0x41, 0x9f, 0xc0, 0x81,
	0xfb, 0x06, 0xb3, 0x65, 0x96, 0x42, 0x67, 0x22, 0xce, 0xb2, 0x0b, 0x07, 0xee, 0x0b, 0xca, 0x8a,
	0xf2, 0xd8, 0xc5, 0x96, 0xfc, 0x19, 0xdc, 0x8a, 0x85, 0x54, 0x80, 0xaa, 0x7b, 0xf9, 0x2f, 0xd1,
	0x04, 0xa9, 0x70, 0x33, 0x16, 0x6f, 0x48, 0x57, 0x81, 0xbb, 0x78, 0x2c, 0xfa, 0x67, 0x61, 0x32,
	0x45, 0x75, 0xc3, 0x3c, 0x6c, 0xdd, 0xce, 0x2a, 0x44, 0x12, 0x74, 0x0e, 0x7b, 0x3d, 0x4c, 0xa3,
	0xea, 0xaf, 0xd0, 0x4f, 0x66, 0x41, 0x13, 0x3d, 0x84, 0xbd, 0x96, 0xae, 0x47, 0xe3, 0x4c, 0x0b,
	0x21, 0x3d, 0xc2, 0x9b, 0xf6, 0xfa, 0xf4, 0x08, 0xdd, 0xf9, 0xf4, 0x88, 0x0a, 0x1a, 0x05, 0x2e,
	0xed, 0x7c, 0xf4, 0xed, 0x7b, 0xf0, 0xde, 0xd4, 0x36, 0xd9, 0x7f, 0x22, 0xd6, 0x16, 0x06, 0x11,
	0xbb, 0x7b, 0x71, 0xcd, 0x5b, 0xcb, 0xf7, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x79, 0xf5, 0xd8,
	0x8c, 0x11, 0x2d, 0x00, 0x00,
}
