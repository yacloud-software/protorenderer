// Code generated by protoc-gen-go.
// source: golang.lakeparime.info/apis/stdprotos/stdprotos.proto
// DO NOT EDIT!

/*
Package stdprotos is a generated protocol buffer package.

It is generated from these files:
	golang.lakeparime.info/apis/stdprotos/stdprotos.proto

It has these top-level messages:
	UnixTimestamp
	UniqueID
	TimeRange
	TimeRangeWithUniqueID
*/
package stdprotos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UnixTimestamp struct {
	// A unix timestamp
	Timestamp uint64 `protobuf:"varint,1,opt,name=Timestamp" json:"Timestamp,omitempty"`
}

func (m *UnixTimestamp) Reset()                    { *m = UnixTimestamp{} }
func (m *UnixTimestamp) String() string            { return proto.CompactTextString(m) }
func (*UnixTimestamp) ProtoMessage()               {}
func (*UnixTimestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UnixTimestamp) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type UniqueID struct {
	// Named uint32 to represent an unique id on a db
	ID uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *UniqueID) Reset()                    { *m = UniqueID{} }
func (m *UniqueID) String() string            { return proto.CompactTextString(m) }
func (*UniqueID) ProtoMessage()               {}
func (*UniqueID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UniqueID) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type TimeRange struct {
	// A time Range, used by queries on a time series db
	StartTime *UnixTimestamp `protobuf:"bytes,1,opt,name=StartTime" json:"StartTime,omitempty"`
	EndTime   *UnixTimestamp `protobuf:"bytes,2,opt,name=EndTime" json:"EndTime,omitempty"`
}

func (m *TimeRange) Reset()                    { *m = TimeRange{} }
func (m *TimeRange) String() string            { return proto.CompactTextString(m) }
func (*TimeRange) ProtoMessage()               {}
func (*TimeRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TimeRange) GetStartTime() *UnixTimestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *TimeRange) GetEndTime() *UnixTimestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

type TimeRangeWithUniqueID struct {
	// A time range with a unique ID
	TimeRange *TimeRange `protobuf:"bytes,1,opt,name=TimeRange" json:"TimeRange,omitempty"`
	UniqueID  *UniqueID  `protobuf:"bytes,2,opt,name=UniqueID" json:"UniqueID,omitempty"`
}

func (m *TimeRangeWithUniqueID) Reset()                    { *m = TimeRangeWithUniqueID{} }
func (m *TimeRangeWithUniqueID) String() string            { return proto.CompactTextString(m) }
func (*TimeRangeWithUniqueID) ProtoMessage()               {}
func (*TimeRangeWithUniqueID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TimeRangeWithUniqueID) GetTimeRange() *TimeRange {
	if m != nil {
		return m.TimeRange
	}
	return nil
}

func (m *TimeRangeWithUniqueID) GetUniqueID() *UniqueID {
	if m != nil {
		return m.UniqueID
	}
	return nil
}

func init() {
	proto.RegisterType((*UnixTimestamp)(nil), "stdprotos.UnixTimestamp")
	proto.RegisterType((*UniqueID)(nil), "stdprotos.UniqueID")
	proto.RegisterType((*TimeRange)(nil), "stdprotos.TimeRange")
	proto.RegisterType((*TimeRangeWithUniqueID)(nil), "stdprotos.TimeRangeWithUniqueID")
}

func init() {
	proto.RegisterFile("golang.lakeparime.info/apis/stdprotos/stdprotos.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x32, 0x4d, 0xcf, 0xcf, 0x49,
	0xcc, 0x4b, 0xd7, 0xcb, 0x49, 0xcc, 0x4e, 0x2d, 0x48, 0x2c, 0xca, 0xcc, 0x4d, 0xd5, 0xcb, 0xcc,
	0x4b, 0xcb, 0xd7, 0x4f, 0x2c, 0xc8, 0x2c, 0xd6, 0x2f, 0x2e, 0x49, 0x29, 0x28, 0xca, 0x2f, 0xc9,
	0x47, 0x62, 0xe9, 0x81, 0x29, 0x21, 0x4e, 0xb8, 0x80, 0x92, 0x2e, 0x17, 0x6f, 0x68, 0x5e, 0x66,
	0x45, 0x48, 0x66, 0x6e, 0x6a, 0x71, 0x49, 0x62, 0x6e, 0x81, 0x90, 0x0c, 0x17, 0x27, 0x9c, 0x23,
	0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x12, 0x84, 0x10, 0x50, 0x92, 0xe2, 0xe2, 0x08, 0xcd, 0xcb, 0x2c,
	0x2c, 0x4d, 0xf5, 0x74, 0x11, 0xe2, 0xe3, 0x62, 0xf2, 0x74, 0x81, 0x2a, 0x61, 0xf2, 0x74, 0x51,
	0x2a, 0x87, 0xe8, 0x0c, 0x4a, 0xcc, 0x4b, 0x4f, 0x15, 0x32, 0xe3, 0xe2, 0x0c, 0x2e, 0x49, 0x2c,
	0x2a, 0x01, 0x89, 0x80, 0xd5, 0x70, 0x1b, 0x49, 0xe8, 0x21, 0xdc, 0x81, 0x62, 0x67, 0x10, 0x42,
	0xa9, 0x90, 0x11, 0x17, 0xbb, 0x6b, 0x5e, 0x0a, 0x58, 0x17, 0x13, 0x01, 0x5d, 0x30, 0x85, 0x4a,
	0x35, 0x5c, 0xa2, 0x70, 0x8b, 0xc3, 0x33, 0x4b, 0x32, 0xe0, 0x2e, 0x34, 0x42, 0x72, 0x11, 0xd4,
	0x11, 0x22, 0x48, 0xc6, 0xc1, 0xe5, 0x82, 0x90, 0x1c, 0xae, 0x8f, 0xf0, 0x21, 0xd4, 0x05, 0xc2,
	0xa8, 0x2e, 0x00, 0x4b, 0x05, 0xc1, 0x15, 0x39, 0xc9, 0x73, 0xc9, 0x26, 0xe7, 0xe7, 0x22, 0x47,
	0x01, 0x28, 0xf4, 0x11, 0x7a, 0x92, 0xd8, 0xc0, 0xb4, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x05,
	0x89, 0x2c, 0xf7, 0xad, 0x01, 0x00, 0x00,
}
